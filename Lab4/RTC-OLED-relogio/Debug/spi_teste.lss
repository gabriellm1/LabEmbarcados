
spi_teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000232c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20400000  0040232c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002cc  2040044c  00402778  0002044c  2**2
                  ALLOC
  3 .stack        00002000  20400718  00402a44  0002044c  2**0
                  ALLOC
  4 .heap         00000200  20402718  00404a44  0002044c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016cd0  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003362  00000000  00000000  000371a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005a51  00000000  00000000  0003a505  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000898  00000000  00000000  0003ff56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008d8  00000000  00000000  000407ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020afd  00000000  00000000  000410c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e198  00000000  00000000  00061bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008fb0b  00000000  00000000  0006fd5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001588  00000000  00000000  000ff868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 27 40 20 69 10 40 00 65 10 40 00 65 10 40 00     .'@ i.@.e.@.e.@.
  400010:	65 10 40 00 65 10 40 00 65 10 40 00 00 00 00 00     e.@.e.@.e.@.....
	...
  40002c:	65 10 40 00 65 10 40 00 00 00 00 00 65 10 40 00     e.@.e.@.....e.@.
  40003c:	65 10 40 00 65 10 40 00 65 10 40 00 65 10 40 00     e.@.e.@.e.@.e.@.
  40004c:	65 10 40 00 65 10 40 00 65 10 40 00 65 10 40 00     e.@.e.@.e.@.e.@.
  40005c:	65 10 40 00 65 10 40 00 00 00 00 00 8d 0e 40 00     e.@.e.@.......@.
  40006c:	a1 0e 40 00 b5 0e 40 00 65 10 40 00 65 10 40 00     ..@...@.e.@.e.@.
  40007c:	65 10 40 00 c9 0e 40 00 dd 0e 40 00 65 10 40 00     e.@...@...@.e.@.
  40008c:	65 10 40 00 65 10 40 00 65 10 40 00 65 10 40 00     e.@.e.@.e.@.e.@.
  40009c:	65 10 40 00 65 10 40 00 65 10 40 00 65 10 40 00     e.@.e.@.e.@.e.@.
  4000ac:	65 10 40 00 65 10 40 00 65 10 40 00 65 10 40 00     e.@.e.@.e.@.e.@.
  4000bc:	65 10 40 00 65 10 40 00 65 10 40 00 65 10 40 00     e.@.e.@.e.@.e.@.
  4000cc:	65 10 40 00 00 00 00 00 65 10 40 00 00 00 00 00     e.@.....e.@.....
  4000dc:	65 10 40 00 65 10 40 00 65 10 40 00 65 10 40 00     e.@.e.@.e.@.e.@.
  4000ec:	65 10 40 00 65 10 40 00 65 10 40 00 65 10 40 00     e.@.e.@.e.@.e.@.
  4000fc:	65 10 40 00 65 10 40 00 65 10 40 00 65 10 40 00     e.@.e.@.e.@.e.@.
  40010c:	65 10 40 00 65 10 40 00 00 00 00 00 00 00 00 00     e.@.e.@.........
  40011c:	00 00 00 00 65 10 40 00 65 10 40 00 65 10 40 00     ....e.@.e.@.e.@.
  40012c:	65 10 40 00 65 10 40 00 00 00 00 00 65 10 40 00     e.@.e.@.....e.@.
  40013c:	65 10 40 00                                         e.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	0040232c 	.word	0x0040232c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040232c 	.word	0x0040232c
  4001a0:	20400450 	.word	0x20400450
  4001a4:	0040232c 	.word	0x0040232c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4002b0:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002b2:	4d2a      	ldr	r5, [pc, #168]	; (40035c <rtc_set_date+0xac>)
  4002b4:	fba5 4603 	umull	r4, r6, r5, r3
  4002b8:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4002ba:	9c03      	ldr	r4, [sp, #12]
  4002bc:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002be:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4002c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4002c6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4002ce:	fba5 6402 	umull	r6, r4, r5, r2
  4002d2:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4002d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4002dc:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4002e4:	4b1e      	ldr	r3, [pc, #120]	; (400360 <rtc_set_date+0xb0>)
  4002e6:	fba3 4301 	umull	r4, r3, r3, r1
  4002ea:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ec:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4002f0:	4b1c      	ldr	r3, [pc, #112]	; (400364 <rtc_set_date+0xb4>)
  4002f2:	fba3 4301 	umull	r4, r3, r3, r1
  4002f6:	095b      	lsrs	r3, r3, #5
  4002f8:	fba5 6403 	umull	r6, r4, r5, r3
  4002fc:	08e4      	lsrs	r4, r4, #3
  4002fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400302:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400306:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400308:	fba5 4301 	umull	r4, r3, r5, r1
  40030c:	08db      	lsrs	r3, r3, #3
  40030e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400312:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40031a:	fba5 1503 	umull	r1, r5, r5, r3
  40031e:	08ed      	lsrs	r5, r5, #3
  400320:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400324:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400328:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40032c:	6983      	ldr	r3, [r0, #24]
  40032e:	f013 0f04 	tst.w	r3, #4
  400332:	d0fb      	beq.n	40032c <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400334:	6803      	ldr	r3, [r0, #0]
  400336:	f043 0302 	orr.w	r3, r3, #2
  40033a:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40033c:	6983      	ldr	r3, [r0, #24]
  40033e:	f013 0f01 	tst.w	r3, #1
  400342:	d0fb      	beq.n	40033c <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400344:	2301      	movs	r3, #1
  400346:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400348:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40034a:	6803      	ldr	r3, [r0, #0]
  40034c:	f023 0302 	bic.w	r3, r3, #2
  400350:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400352:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400354:	f000 0002 	and.w	r0, r0, #2
  400358:	bc70      	pop	{r4, r5, r6}
  40035a:	4770      	bx	lr
  40035c:	cccccccd 	.word	0xcccccccd
  400360:	10624dd3 	.word	0x10624dd3
  400364:	51eb851f 	.word	0x51eb851f

00400368 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400368:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40036a:	4b07      	ldr	r3, [pc, #28]	; (400388 <spi_enable_clock+0x20>)
  40036c:	4298      	cmp	r0, r3
  40036e:	d003      	beq.n	400378 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400370:	4b06      	ldr	r3, [pc, #24]	; (40038c <spi_enable_clock+0x24>)
  400372:	4298      	cmp	r0, r3
  400374:	d004      	beq.n	400380 <spi_enable_clock+0x18>
  400376:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400378:	2015      	movs	r0, #21
  40037a:	4b05      	ldr	r3, [pc, #20]	; (400390 <spi_enable_clock+0x28>)
  40037c:	4798      	blx	r3
  40037e:	bd08      	pop	{r3, pc}
  400380:	202a      	movs	r0, #42	; 0x2a
  400382:	4b03      	ldr	r3, [pc, #12]	; (400390 <spi_enable_clock+0x28>)
  400384:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400386:	e7f6      	b.n	400376 <spi_enable_clock+0xe>
  400388:	40008000 	.word	0x40008000
  40038c:	40058000 	.word	0x40058000
  400390:	00401011 	.word	0x00401011

00400394 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400394:	6843      	ldr	r3, [r0, #4]
  400396:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40039a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40039c:	6843      	ldr	r3, [r0, #4]
  40039e:	0409      	lsls	r1, r1, #16
  4003a0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4003a4:	4319      	orrs	r1, r3
  4003a6:	6041      	str	r1, [r0, #4]
  4003a8:	4770      	bx	lr

004003aa <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4003aa:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4003ac:	f643 2499 	movw	r4, #15001	; 0x3a99
  4003b0:	6905      	ldr	r5, [r0, #16]
  4003b2:	f015 0f02 	tst.w	r5, #2
  4003b6:	d103      	bne.n	4003c0 <spi_write+0x16>
		if (!timeout--) {
  4003b8:	3c01      	subs	r4, #1
  4003ba:	d1f9      	bne.n	4003b0 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4003bc:	2001      	movs	r0, #1
  4003be:	e00c      	b.n	4003da <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4003c0:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4003c2:	f014 0f02 	tst.w	r4, #2
  4003c6:	d006      	beq.n	4003d6 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4003c8:	0412      	lsls	r2, r2, #16
  4003ca:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4003ce:	4311      	orrs	r1, r2
		if (uc_last) {
  4003d0:	b10b      	cbz	r3, 4003d6 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4003d2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4003d6:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4003d8:	2000      	movs	r0, #0
}
  4003da:	bc30      	pop	{r4, r5}
  4003dc:	4770      	bx	lr

004003de <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4003de:	b932      	cbnz	r2, 4003ee <spi_set_clock_polarity+0x10>
  4003e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4003e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4003e6:	f023 0301 	bic.w	r3, r3, #1
  4003ea:	6303      	str	r3, [r0, #48]	; 0x30
  4003ec:	4770      	bx	lr
  4003ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4003f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4003f4:	f043 0301 	orr.w	r3, r3, #1
  4003f8:	6303      	str	r3, [r0, #48]	; 0x30
  4003fa:	4770      	bx	lr

004003fc <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4003fc:	b932      	cbnz	r2, 40040c <spi_set_clock_phase+0x10>
  4003fe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400402:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400404:	f023 0302 	bic.w	r3, r3, #2
  400408:	6303      	str	r3, [r0, #48]	; 0x30
  40040a:	4770      	bx	lr
  40040c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400410:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400412:	f043 0302 	orr.w	r3, r3, #2
  400416:	6303      	str	r3, [r0, #48]	; 0x30
  400418:	4770      	bx	lr

0040041a <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40041a:	2a04      	cmp	r2, #4
  40041c:	d003      	beq.n	400426 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40041e:	b16a      	cbz	r2, 40043c <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400420:	2a08      	cmp	r2, #8
  400422:	d016      	beq.n	400452 <spi_configure_cs_behavior+0x38>
  400424:	4770      	bx	lr
  400426:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40042a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40042c:	f023 0308 	bic.w	r3, r3, #8
  400430:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400432:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400434:	f043 0304 	orr.w	r3, r3, #4
  400438:	6303      	str	r3, [r0, #48]	; 0x30
  40043a:	4770      	bx	lr
  40043c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400440:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400442:	f023 0308 	bic.w	r3, r3, #8
  400446:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400448:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40044a:	f023 0304 	bic.w	r3, r3, #4
  40044e:	6303      	str	r3, [r0, #48]	; 0x30
  400450:	4770      	bx	lr
  400452:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400456:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400458:	f043 0308 	orr.w	r3, r3, #8
  40045c:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40045e:	e7e1      	b.n	400424 <spi_configure_cs_behavior+0xa>

00400460 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400460:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400464:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40046a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40046c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40046e:	431a      	orrs	r2, r3
  400470:	630a      	str	r2, [r1, #48]	; 0x30
  400472:	4770      	bx	lr

00400474 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400474:	1e43      	subs	r3, r0, #1
  400476:	4419      	add	r1, r3
  400478:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40047c:	1e43      	subs	r3, r0, #1
  40047e:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400480:	bf94      	ite	ls
  400482:	b200      	sxthls	r0, r0
		return -1;
  400484:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400488:	4770      	bx	lr

0040048a <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40048a:	b17a      	cbz	r2, 4004ac <spi_set_baudrate_div+0x22>
{
  40048c:	b410      	push	{r4}
  40048e:	4614      	mov	r4, r2
  400490:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400494:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40049a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40049c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40049e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4004a2:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4004a4:	2000      	movs	r0, #0
}
  4004a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004aa:	4770      	bx	lr
        return -1;
  4004ac:	f04f 30ff 	mov.w	r0, #4294967295
  4004b0:	4770      	bx	lr
	...

004004b4 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4004b4:	4b01      	ldr	r3, [pc, #4]	; (4004bc <gfx_mono_set_framebuffer+0x8>)
  4004b6:	6018      	str	r0, [r3, #0]
  4004b8:	4770      	bx	lr
  4004ba:	bf00      	nop
  4004bc:	20400468 	.word	0x20400468

004004c0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4004c0:	4b02      	ldr	r3, [pc, #8]	; (4004cc <gfx_mono_framebuffer_put_byte+0xc>)
  4004c2:	681b      	ldr	r3, [r3, #0]
  4004c4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4004c8:	5442      	strb	r2, [r0, r1]
  4004ca:	4770      	bx	lr
  4004cc:	20400468 	.word	0x20400468

004004d0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4004d0:	4b02      	ldr	r3, [pc, #8]	; (4004dc <gfx_mono_framebuffer_get_byte+0xc>)
  4004d2:	681b      	ldr	r3, [r3, #0]
  4004d4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4004d8:	5c40      	ldrb	r0, [r0, r1]
  4004da:	4770      	bx	lr
  4004dc:	20400468 	.word	0x20400468

004004e0 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4004e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4004e4:	1884      	adds	r4, r0, r2
  4004e6:	2c80      	cmp	r4, #128	; 0x80
  4004e8:	dd02      	ble.n	4004f0 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4004ea:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4004ee:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4004f0:	b322      	cbz	r2, 40053c <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4004f2:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4004f4:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4004f8:	2601      	movs	r6, #1
  4004fa:	fa06 f101 	lsl.w	r1, r6, r1
  4004fe:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400500:	2b01      	cmp	r3, #1
  400502:	d01d      	beq.n	400540 <gfx_mono_generic_draw_horizontal_line+0x60>
  400504:	2b00      	cmp	r3, #0
  400506:	d035      	beq.n	400574 <gfx_mono_generic_draw_horizontal_line+0x94>
  400508:	2b02      	cmp	r3, #2
  40050a:	d117      	bne.n	40053c <gfx_mono_generic_draw_horizontal_line+0x5c>
  40050c:	3801      	subs	r0, #1
  40050e:	b2c7      	uxtb	r7, r0
  400510:	19d4      	adds	r4, r2, r7
  400512:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400514:	f8df a090 	ldr.w	sl, [pc, #144]	; 4005a8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400518:	f04f 0900 	mov.w	r9, #0
  40051c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4005ac <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400520:	4621      	mov	r1, r4
  400522:	4628      	mov	r0, r5
  400524:	47d0      	blx	sl
			temp ^= pixelmask;
  400526:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40052a:	464b      	mov	r3, r9
  40052c:	b2d2      	uxtb	r2, r2
  40052e:	4621      	mov	r1, r4
  400530:	4628      	mov	r0, r5
  400532:	47c0      	blx	r8
  400534:	3c01      	subs	r4, #1
  400536:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400538:	42bc      	cmp	r4, r7
  40053a:	d1f1      	bne.n	400520 <gfx_mono_generic_draw_horizontal_line+0x40>
  40053c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400540:	3801      	subs	r0, #1
  400542:	b2c7      	uxtb	r7, r0
  400544:	19d4      	adds	r4, r2, r7
  400546:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400548:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4005a8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  40054c:	f04f 0900 	mov.w	r9, #0
  400550:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4005ac <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400554:	4621      	mov	r1, r4
  400556:	4628      	mov	r0, r5
  400558:	47d0      	blx	sl
			temp |= pixelmask;
  40055a:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40055e:	464b      	mov	r3, r9
  400560:	b2d2      	uxtb	r2, r2
  400562:	4621      	mov	r1, r4
  400564:	4628      	mov	r0, r5
  400566:	47c0      	blx	r8
  400568:	3c01      	subs	r4, #1
  40056a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40056c:	42bc      	cmp	r4, r7
  40056e:	d1f1      	bne.n	400554 <gfx_mono_generic_draw_horizontal_line+0x74>
  400570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400574:	3801      	subs	r0, #1
  400576:	b2c7      	uxtb	r7, r0
  400578:	19d4      	adds	r4, r2, r7
  40057a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40057c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4005a8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400580:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400582:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4005ac <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400586:	4621      	mov	r1, r4
  400588:	4628      	mov	r0, r5
  40058a:	47c0      	blx	r8
			temp &= ~pixelmask;
  40058c:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400590:	2300      	movs	r3, #0
  400592:	b2d2      	uxtb	r2, r2
  400594:	4621      	mov	r1, r4
  400596:	4628      	mov	r0, r5
  400598:	47c8      	blx	r9
  40059a:	3c01      	subs	r4, #1
  40059c:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40059e:	42bc      	cmp	r4, r7
  4005a0:	d1f1      	bne.n	400586 <gfx_mono_generic_draw_horizontal_line+0xa6>
  4005a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4005a6:	bf00      	nop
  4005a8:	004007e1 	.word	0x004007e1
  4005ac:	004006dd 	.word	0x004006dd

004005b0 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4005b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4005b4:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4005b8:	b18b      	cbz	r3, 4005de <gfx_mono_generic_draw_filled_rect+0x2e>
  4005ba:	461c      	mov	r4, r3
  4005bc:	4690      	mov	r8, r2
  4005be:	4606      	mov	r6, r0
  4005c0:	1e4d      	subs	r5, r1, #1
  4005c2:	b2ed      	uxtb	r5, r5
  4005c4:	442c      	add	r4, r5
  4005c6:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4005c8:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4005e4 <gfx_mono_generic_draw_filled_rect+0x34>
  4005cc:	463b      	mov	r3, r7
  4005ce:	4642      	mov	r2, r8
  4005d0:	4621      	mov	r1, r4
  4005d2:	4630      	mov	r0, r6
  4005d4:	47c8      	blx	r9
  4005d6:	3c01      	subs	r4, #1
  4005d8:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4005da:	42ac      	cmp	r4, r5
  4005dc:	d1f6      	bne.n	4005cc <gfx_mono_generic_draw_filled_rect+0x1c>
  4005de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4005e2:	bf00      	nop
  4005e4:	004004e1 	.word	0x004004e1

004005e8 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4005e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ec:	b083      	sub	sp, #12
  4005ee:	4604      	mov	r4, r0
  4005f0:	4688      	mov	r8, r1
  4005f2:	4691      	mov	r9, r2
  4005f4:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4005f6:	7a5b      	ldrb	r3, [r3, #9]
  4005f8:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4005fc:	2100      	movs	r1, #0
  4005fe:	9100      	str	r1, [sp, #0]
  400600:	4649      	mov	r1, r9
  400602:	4640      	mov	r0, r8
  400604:	4d21      	ldr	r5, [pc, #132]	; (40068c <gfx_mono_draw_char+0xa4>)
  400606:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400608:	f89b 3000 	ldrb.w	r3, [fp]
  40060c:	b113      	cbz	r3, 400614 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40060e:	b003      	add	sp, #12
  400610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400614:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400618:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40061a:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40061e:	bf18      	it	ne
  400620:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400622:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400626:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40062a:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  40062c:	fb17 f70a 	smulbb	r7, r7, sl
  400630:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400634:	f8db 3004 	ldr.w	r3, [fp, #4]
  400638:	fa13 f787 	uxtah	r7, r3, r7
  40063c:	e01f      	b.n	40067e <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40063e:	0064      	lsls	r4, r4, #1
  400640:	b2e4      	uxtb	r4, r4
  400642:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400644:	b2eb      	uxtb	r3, r5
  400646:	429e      	cmp	r6, r3
  400648:	d910      	bls.n	40066c <gfx_mono_draw_char+0x84>
  40064a:	b2eb      	uxtb	r3, r5
  40064c:	eb08 0003 	add.w	r0, r8, r3
  400650:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400652:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400656:	bf08      	it	eq
  400658:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  40065c:	f014 0f80 	tst.w	r4, #128	; 0x80
  400660:	d0ed      	beq.n	40063e <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400662:	2201      	movs	r2, #1
  400664:	4649      	mov	r1, r9
  400666:	4b0a      	ldr	r3, [pc, #40]	; (400690 <gfx_mono_draw_char+0xa8>)
  400668:	4798      	blx	r3
  40066a:	e7e8      	b.n	40063e <gfx_mono_draw_char+0x56>
		inc_y += 1;
  40066c:	f109 0901 	add.w	r9, r9, #1
  400670:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400674:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400678:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  40067c:	d0c7      	beq.n	40060e <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40067e:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400682:	2e00      	cmp	r6, #0
  400684:	d0f2      	beq.n	40066c <gfx_mono_draw_char+0x84>
  400686:	2500      	movs	r5, #0
  400688:	462c      	mov	r4, r5
  40068a:	e7de      	b.n	40064a <gfx_mono_draw_char+0x62>
  40068c:	004005b1 	.word	0x004005b1
  400690:	0040077d 	.word	0x0040077d

00400694 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400698:	4604      	mov	r4, r0
  40069a:	4690      	mov	r8, r2
  40069c:	461d      	mov	r5, r3
  40069e:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  4006a0:	4f0d      	ldr	r7, [pc, #52]	; (4006d8 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  4006a2:	460e      	mov	r6, r1
  4006a4:	e008      	b.n	4006b8 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  4006a6:	7a6a      	ldrb	r2, [r5, #9]
  4006a8:	3201      	adds	r2, #1
  4006aa:	4442      	add	r2, r8
  4006ac:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4006b0:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4006b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4006b6:	b16b      	cbz	r3, 4006d4 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4006b8:	7820      	ldrb	r0, [r4, #0]
  4006ba:	280a      	cmp	r0, #10
  4006bc:	d0f3      	beq.n	4006a6 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4006be:	280d      	cmp	r0, #13
  4006c0:	d0f7      	beq.n	4006b2 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4006c2:	462b      	mov	r3, r5
  4006c4:	4642      	mov	r2, r8
  4006c6:	4649      	mov	r1, r9
  4006c8:	47b8      	blx	r7
			x += font->width;
  4006ca:	7a2b      	ldrb	r3, [r5, #8]
  4006cc:	4499      	add	r9, r3
  4006ce:	fa5f f989 	uxtb.w	r9, r9
  4006d2:	e7ee      	b.n	4006b2 <gfx_mono_draw_string+0x1e>
}
  4006d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4006d8:	004005e9 	.word	0x004005e9

004006dc <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4006dc:	b570      	push	{r4, r5, r6, lr}
  4006de:	4604      	mov	r4, r0
  4006e0:	460d      	mov	r5, r1
  4006e2:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4006e4:	b91b      	cbnz	r3, 4006ee <gfx_mono_ssd1306_put_byte+0x12>
  4006e6:	4b0d      	ldr	r3, [pc, #52]	; (40071c <gfx_mono_ssd1306_put_byte+0x40>)
  4006e8:	4798      	blx	r3
  4006ea:	42b0      	cmp	r0, r6
  4006ec:	d015      	beq.n	40071a <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4006ee:	4632      	mov	r2, r6
  4006f0:	4629      	mov	r1, r5
  4006f2:	4620      	mov	r0, r4
  4006f4:	4b0a      	ldr	r3, [pc, #40]	; (400720 <gfx_mono_ssd1306_put_byte+0x44>)
  4006f6:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4006f8:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4006fc:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400700:	4c08      	ldr	r4, [pc, #32]	; (400724 <gfx_mono_ssd1306_put_byte+0x48>)
  400702:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400704:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400708:	f040 0010 	orr.w	r0, r0, #16
  40070c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40070e:	f005 000f 	and.w	r0, r5, #15
  400712:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400714:	4630      	mov	r0, r6
  400716:	4b04      	ldr	r3, [pc, #16]	; (400728 <gfx_mono_ssd1306_put_byte+0x4c>)
  400718:	4798      	blx	r3
  40071a:	bd70      	pop	{r4, r5, r6, pc}
  40071c:	004004d1 	.word	0x004004d1
  400720:	004004c1 	.word	0x004004c1
  400724:	004007ed 	.word	0x004007ed
  400728:	00400a0d 	.word	0x00400a0d

0040072c <gfx_mono_ssd1306_init>:
{
  40072c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400730:	480d      	ldr	r0, [pc, #52]	; (400768 <gfx_mono_ssd1306_init+0x3c>)
  400732:	4b0e      	ldr	r3, [pc, #56]	; (40076c <gfx_mono_ssd1306_init+0x40>)
  400734:	4798      	blx	r3
	ssd1306_init();
  400736:	4b0e      	ldr	r3, [pc, #56]	; (400770 <gfx_mono_ssd1306_init+0x44>)
  400738:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40073a:	2040      	movs	r0, #64	; 0x40
  40073c:	4b0d      	ldr	r3, [pc, #52]	; (400774 <gfx_mono_ssd1306_init+0x48>)
  40073e:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400740:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400742:	f04f 0801 	mov.w	r8, #1
  400746:	462f      	mov	r7, r5
  400748:	4e0b      	ldr	r6, [pc, #44]	; (400778 <gfx_mono_ssd1306_init+0x4c>)
{
  40074a:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40074c:	4643      	mov	r3, r8
  40074e:	463a      	mov	r2, r7
  400750:	b2e1      	uxtb	r1, r4
  400752:	4628      	mov	r0, r5
  400754:	47b0      	blx	r6
  400756:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400758:	2c80      	cmp	r4, #128	; 0x80
  40075a:	d1f7      	bne.n	40074c <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40075c:	3501      	adds	r5, #1
  40075e:	b2ed      	uxtb	r5, r5
  400760:	2d04      	cmp	r5, #4
  400762:	d1f2      	bne.n	40074a <gfx_mono_ssd1306_init+0x1e>
  400764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400768:	2040046c 	.word	0x2040046c
  40076c:	004004b5 	.word	0x004004b5
  400770:	0040082d 	.word	0x0040082d
  400774:	004007ed 	.word	0x004007ed
  400778:	004006dd 	.word	0x004006dd

0040077c <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  40077c:	09c3      	lsrs	r3, r0, #7
  40077e:	d12a      	bne.n	4007d6 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400780:	291f      	cmp	r1, #31
  400782:	d828      	bhi.n	4007d6 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400788:	4614      	mov	r4, r2
  40078a:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  40078c:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  40078e:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400792:	2201      	movs	r2, #1
  400794:	fa02 f701 	lsl.w	r7, r2, r1
  400798:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  40079c:	4601      	mov	r1, r0
  40079e:	4630      	mov	r0, r6
  4007a0:	4b0d      	ldr	r3, [pc, #52]	; (4007d8 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  4007a2:	4798      	blx	r3
  4007a4:	4602      	mov	r2, r0
	switch (color) {
  4007a6:	2c01      	cmp	r4, #1
  4007a8:	d009      	beq.n	4007be <gfx_mono_ssd1306_draw_pixel+0x42>
  4007aa:	b164      	cbz	r4, 4007c6 <gfx_mono_ssd1306_draw_pixel+0x4a>
  4007ac:	2c02      	cmp	r4, #2
  4007ae:	d00e      	beq.n	4007ce <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4007b0:	2300      	movs	r3, #0
  4007b2:	4629      	mov	r1, r5
  4007b4:	4630      	mov	r0, r6
  4007b6:	4c09      	ldr	r4, [pc, #36]	; (4007dc <gfx_mono_ssd1306_draw_pixel+0x60>)
  4007b8:	47a0      	blx	r4
  4007ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4007be:	ea48 0200 	orr.w	r2, r8, r0
  4007c2:	b2d2      	uxtb	r2, r2
		break;
  4007c4:	e7f4      	b.n	4007b0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4007c6:	ea20 0207 	bic.w	r2, r0, r7
  4007ca:	b2d2      	uxtb	r2, r2
		break;
  4007cc:	e7f0      	b.n	4007b0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4007ce:	ea88 0200 	eor.w	r2, r8, r0
  4007d2:	b2d2      	uxtb	r2, r2
		break;
  4007d4:	e7ec      	b.n	4007b0 <gfx_mono_ssd1306_draw_pixel+0x34>
  4007d6:	4770      	bx	lr
  4007d8:	004004d1 	.word	0x004004d1
  4007dc:	004006dd 	.word	0x004006dd

004007e0 <gfx_mono_ssd1306_get_byte>:
{
  4007e0:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  4007e2:	4b01      	ldr	r3, [pc, #4]	; (4007e8 <gfx_mono_ssd1306_get_byte+0x8>)
  4007e4:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  4007e6:	bd08      	pop	{r3, pc}
  4007e8:	004004d1 	.word	0x004004d1

004007ec <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4007ec:	b538      	push	{r3, r4, r5, lr}
  4007ee:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4007f0:	2208      	movs	r2, #8
  4007f2:	4b09      	ldr	r3, [pc, #36]	; (400818 <ssd1306_write_command+0x2c>)
  4007f4:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4007f6:	4c09      	ldr	r4, [pc, #36]	; (40081c <ssd1306_write_command+0x30>)
  4007f8:	2101      	movs	r1, #1
  4007fa:	4620      	mov	r0, r4
  4007fc:	4b08      	ldr	r3, [pc, #32]	; (400820 <ssd1306_write_command+0x34>)
  4007fe:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400800:	2301      	movs	r3, #1
  400802:	461a      	mov	r2, r3
  400804:	4629      	mov	r1, r5
  400806:	4620      	mov	r0, r4
  400808:	4c06      	ldr	r4, [pc, #24]	; (400824 <ssd1306_write_command+0x38>)
  40080a:	47a0      	blx	r4
	delay_us(10);
  40080c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400810:	4b05      	ldr	r3, [pc, #20]	; (400828 <ssd1306_write_command+0x3c>)
  400812:	4798      	blx	r3
  400814:	bd38      	pop	{r3, r4, r5, pc}
  400816:	bf00      	nop
  400818:	400e1000 	.word	0x400e1000
  40081c:	40008000 	.word	0x40008000
  400820:	00400395 	.word	0x00400395
  400824:	004003ab 	.word	0x004003ab
  400828:	20400001 	.word	0x20400001

0040082c <ssd1306_init>:
{
  40082c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400830:	4d66      	ldr	r5, [pc, #408]	; (4009cc <ssd1306_init+0x1a0>)
  400832:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400836:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400838:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40083c:	4b64      	ldr	r3, [pc, #400]	; (4009d0 <ssd1306_init+0x1a4>)
  40083e:	2708      	movs	r7, #8
  400840:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400842:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400846:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400848:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40084c:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40084e:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400850:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400854:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400856:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40085a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40085c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40085e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400862:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400864:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400866:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40086a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40086c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40086e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400874:	f022 0208 	bic.w	r2, r2, #8
  400878:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40087a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40087c:	f022 0208 	bic.w	r2, r2, #8
  400880:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400882:	601f      	str	r7, [r3, #0]
  400884:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400886:	631f      	str	r7, [r3, #48]	; 0x30
  400888:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40088a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400a08 <ssd1306_init+0x1dc>
  40088e:	2300      	movs	r3, #0
  400890:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400894:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400898:	4640      	mov	r0, r8
  40089a:	4c4e      	ldr	r4, [pc, #312]	; (4009d4 <ssd1306_init+0x1a8>)
  40089c:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40089e:	2300      	movs	r3, #0
  4008a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4008a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008a8:	4640      	mov	r0, r8
  4008aa:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4008ac:	2300      	movs	r3, #0
  4008ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4008b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008b6:	4640      	mov	r0, r8
  4008b8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4008ba:	2300      	movs	r3, #0
  4008bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4008c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008c4:	4640      	mov	r0, r8
  4008c6:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4008c8:	2300      	movs	r3, #0
  4008ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4008ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008d2:	4640      	mov	r0, r8
  4008d4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4008d6:	2300      	movs	r3, #0
  4008d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4008dc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008e0:	4640      	mov	r0, r8
  4008e2:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4008e4:	4c3c      	ldr	r4, [pc, #240]	; (4009d8 <ssd1306_init+0x1ac>)
  4008e6:	f04f 0902 	mov.w	r9, #2
  4008ea:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4008ee:	f04f 0880 	mov.w	r8, #128	; 0x80
  4008f2:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4008f6:	6863      	ldr	r3, [r4, #4]
  4008f8:	f043 0301 	orr.w	r3, r3, #1
  4008fc:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4008fe:	463a      	mov	r2, r7
  400900:	2101      	movs	r1, #1
  400902:	4620      	mov	r0, r4
  400904:	4b35      	ldr	r3, [pc, #212]	; (4009dc <ssd1306_init+0x1b0>)
  400906:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400908:	2200      	movs	r2, #0
  40090a:	2101      	movs	r1, #1
  40090c:	4620      	mov	r0, r4
  40090e:	4b34      	ldr	r3, [pc, #208]	; (4009e0 <ssd1306_init+0x1b4>)
  400910:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400912:	2200      	movs	r2, #0
  400914:	2101      	movs	r1, #1
  400916:	4620      	mov	r0, r4
  400918:	4b32      	ldr	r3, [pc, #200]	; (4009e4 <ssd1306_init+0x1b8>)
  40091a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  40091c:	6863      	ldr	r3, [r4, #4]
  40091e:	f023 0302 	bic.w	r3, r3, #2
  400922:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400924:	2200      	movs	r2, #0
  400926:	2101      	movs	r1, #1
  400928:	4620      	mov	r0, r4
  40092a:	4b2f      	ldr	r3, [pc, #188]	; (4009e8 <ssd1306_init+0x1bc>)
  40092c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40092e:	6863      	ldr	r3, [r4, #4]
  400930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400934:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400936:	6863      	ldr	r3, [r4, #4]
  400938:	f043 0310 	orr.w	r3, r3, #16
  40093c:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  40093e:	492b      	ldr	r1, [pc, #172]	; (4009ec <ssd1306_init+0x1c0>)
  400940:	482b      	ldr	r0, [pc, #172]	; (4009f0 <ssd1306_init+0x1c4>)
  400942:	4b2c      	ldr	r3, [pc, #176]	; (4009f4 <ssd1306_init+0x1c8>)
  400944:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400946:	b2c2      	uxtb	r2, r0
  400948:	2101      	movs	r1, #1
  40094a:	4620      	mov	r0, r4
  40094c:	4b2a      	ldr	r3, [pc, #168]	; (4009f8 <ssd1306_init+0x1cc>)
  40094e:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400950:	4620      	mov	r0, r4
  400952:	4b2a      	ldr	r3, [pc, #168]	; (4009fc <ssd1306_init+0x1d0>)
  400954:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400956:	2301      	movs	r3, #1
  400958:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40095a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  40095c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400960:	4c27      	ldr	r4, [pc, #156]	; (400a00 <ssd1306_init+0x1d4>)
  400962:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400964:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400966:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40096a:	47a0      	blx	r4
  40096c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  40096e:	20a8      	movs	r0, #168	; 0xa8
  400970:	4c24      	ldr	r4, [pc, #144]	; (400a04 <ssd1306_init+0x1d8>)
  400972:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400974:	201f      	movs	r0, #31
  400976:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400978:	20d3      	movs	r0, #211	; 0xd3
  40097a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  40097c:	2000      	movs	r0, #0
  40097e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400980:	2040      	movs	r0, #64	; 0x40
  400982:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400984:	20a1      	movs	r0, #161	; 0xa1
  400986:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400988:	20c8      	movs	r0, #200	; 0xc8
  40098a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  40098c:	20da      	movs	r0, #218	; 0xda
  40098e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400990:	4648      	mov	r0, r9
  400992:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400994:	2081      	movs	r0, #129	; 0x81
  400996:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400998:	208f      	movs	r0, #143	; 0x8f
  40099a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  40099c:	20a4      	movs	r0, #164	; 0xa4
  40099e:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4009a0:	20a6      	movs	r0, #166	; 0xa6
  4009a2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4009a4:	20d5      	movs	r0, #213	; 0xd5
  4009a6:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4009a8:	4640      	mov	r0, r8
  4009aa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4009ac:	208d      	movs	r0, #141	; 0x8d
  4009ae:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4009b0:	2014      	movs	r0, #20
  4009b2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4009b4:	20db      	movs	r0, #219	; 0xdb
  4009b6:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4009b8:	2040      	movs	r0, #64	; 0x40
  4009ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4009bc:	20d9      	movs	r0, #217	; 0xd9
  4009be:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4009c0:	20f1      	movs	r0, #241	; 0xf1
  4009c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4009c4:	20af      	movs	r0, #175	; 0xaf
  4009c6:	47a0      	blx	r4
  4009c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009cc:	400e1200 	.word	0x400e1200
  4009d0:	400e1000 	.word	0x400e1000
  4009d4:	00400cfd 	.word	0x00400cfd
  4009d8:	40008000 	.word	0x40008000
  4009dc:	0040041b 	.word	0x0040041b
  4009e0:	004003df 	.word	0x004003df
  4009e4:	004003fd 	.word	0x004003fd
  4009e8:	00400461 	.word	0x00400461
  4009ec:	08f0d180 	.word	0x08f0d180
  4009f0:	000f4240 	.word	0x000f4240
  4009f4:	00400475 	.word	0x00400475
  4009f8:	0040048b 	.word	0x0040048b
  4009fc:	00400369 	.word	0x00400369
  400a00:	20400001 	.word	0x20400001
  400a04:	004007ed 	.word	0x004007ed
  400a08:	400e1400 	.word	0x400e1400

00400a0c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400a0c:	b538      	push	{r3, r4, r5, lr}
  400a0e:	4605      	mov	r5, r0
  400a10:	2208      	movs	r2, #8
  400a12:	4b09      	ldr	r3, [pc, #36]	; (400a38 <ssd1306_write_data+0x2c>)
  400a14:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400a16:	4c09      	ldr	r4, [pc, #36]	; (400a3c <ssd1306_write_data+0x30>)
  400a18:	2101      	movs	r1, #1
  400a1a:	4620      	mov	r0, r4
  400a1c:	4b08      	ldr	r3, [pc, #32]	; (400a40 <ssd1306_write_data+0x34>)
  400a1e:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400a20:	2301      	movs	r3, #1
  400a22:	461a      	mov	r2, r3
  400a24:	4629      	mov	r1, r5
  400a26:	4620      	mov	r0, r4
  400a28:	4c06      	ldr	r4, [pc, #24]	; (400a44 <ssd1306_write_data+0x38>)
  400a2a:	47a0      	blx	r4
	delay_us(10);
  400a2c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400a30:	4b05      	ldr	r3, [pc, #20]	; (400a48 <ssd1306_write_data+0x3c>)
  400a32:	4798      	blx	r3
  400a34:	bd38      	pop	{r3, r4, r5, pc}
  400a36:	bf00      	nop
  400a38:	400e1000 	.word	0x400e1000
  400a3c:	40008000 	.word	0x40008000
  400a40:	00400395 	.word	0x00400395
  400a44:	004003ab 	.word	0x004003ab
  400a48:	20400001 	.word	0x20400001

00400a4c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a4c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400a4e:	4810      	ldr	r0, [pc, #64]	; (400a90 <sysclk_init+0x44>)
  400a50:	4b10      	ldr	r3, [pc, #64]	; (400a94 <sysclk_init+0x48>)
  400a52:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400a54:	213e      	movs	r1, #62	; 0x3e
  400a56:	2000      	movs	r0, #0
  400a58:	4b0f      	ldr	r3, [pc, #60]	; (400a98 <sysclk_init+0x4c>)
  400a5a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400a5c:	4c0f      	ldr	r4, [pc, #60]	; (400a9c <sysclk_init+0x50>)
  400a5e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400a60:	2800      	cmp	r0, #0
  400a62:	d0fc      	beq.n	400a5e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400a64:	4b0e      	ldr	r3, [pc, #56]	; (400aa0 <sysclk_init+0x54>)
  400a66:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400a68:	4a0e      	ldr	r2, [pc, #56]	; (400aa4 <sysclk_init+0x58>)
  400a6a:	4b0f      	ldr	r3, [pc, #60]	; (400aa8 <sysclk_init+0x5c>)
  400a6c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400a6e:	4c0f      	ldr	r4, [pc, #60]	; (400aac <sysclk_init+0x60>)
  400a70:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400a72:	2800      	cmp	r0, #0
  400a74:	d0fc      	beq.n	400a70 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400a76:	2002      	movs	r0, #2
  400a78:	4b0d      	ldr	r3, [pc, #52]	; (400ab0 <sysclk_init+0x64>)
  400a7a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400a7c:	2000      	movs	r0, #0
  400a7e:	4b0d      	ldr	r3, [pc, #52]	; (400ab4 <sysclk_init+0x68>)
  400a80:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400a82:	4b0d      	ldr	r3, [pc, #52]	; (400ab8 <sysclk_init+0x6c>)
  400a84:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400a86:	4802      	ldr	r0, [pc, #8]	; (400a90 <sysclk_init+0x44>)
  400a88:	4b02      	ldr	r3, [pc, #8]	; (400a94 <sysclk_init+0x48>)
  400a8a:	4798      	blx	r3
  400a8c:	bd10      	pop	{r4, pc}
  400a8e:	bf00      	nop
  400a90:	11e1a300 	.word	0x11e1a300
  400a94:	0040123d 	.word	0x0040123d
  400a98:	00400f8d 	.word	0x00400f8d
  400a9c:	00400fe1 	.word	0x00400fe1
  400aa0:	00400ff1 	.word	0x00400ff1
  400aa4:	20183f01 	.word	0x20183f01
  400aa8:	400e0600 	.word	0x400e0600
  400aac:	00401001 	.word	0x00401001
  400ab0:	00400ef1 	.word	0x00400ef1
  400ab4:	00400f29 	.word	0x00400f29
  400ab8:	00401131 	.word	0x00401131

00400abc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400ac2:	4b48      	ldr	r3, [pc, #288]	; (400be4 <board_init+0x128>)
  400ac4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400aca:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400ace:	4b46      	ldr	r3, [pc, #280]	; (400be8 <board_init+0x12c>)
  400ad0:	2200      	movs	r2, #0
  400ad2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400ad6:	695a      	ldr	r2, [r3, #20]
  400ad8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400adc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400ade:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ae2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400ae6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400aea:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400aee:	f007 0007 	and.w	r0, r7, #7
  400af2:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400af4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400af8:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400afc:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400b00:	f3bf 8f4f 	dsb	sy
  400b04:	f04f 34ff 	mov.w	r4, #4294967295
  400b08:	fa04 fc00 	lsl.w	ip, r4, r0
  400b0c:	fa06 f000 	lsl.w	r0, r6, r0
  400b10:	fa04 f40e 	lsl.w	r4, r4, lr
  400b14:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400b18:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400b1a:	463a      	mov	r2, r7
  400b1c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400b1e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400b22:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400b26:	3a01      	subs	r2, #1
  400b28:	4423      	add	r3, r4
  400b2a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400b2e:	d1f6      	bne.n	400b1e <board_init+0x62>
        } while(sets--);
  400b30:	3e01      	subs	r6, #1
  400b32:	4460      	add	r0, ip
  400b34:	f1b6 3fff 	cmp.w	r6, #4294967295
  400b38:	d1ef      	bne.n	400b1a <board_init+0x5e>
  400b3a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400b3e:	4b2a      	ldr	r3, [pc, #168]	; (400be8 <board_init+0x12c>)
  400b40:	695a      	ldr	r2, [r3, #20]
  400b42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400b46:	615a      	str	r2, [r3, #20]
  400b48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b4c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b50:	4a26      	ldr	r2, [pc, #152]	; (400bec <board_init+0x130>)
  400b52:	4927      	ldr	r1, [pc, #156]	; (400bf0 <board_init+0x134>)
  400b54:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b56:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400b5a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400b5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b60:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b64:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400b68:	f022 0201 	bic.w	r2, r2, #1
  400b6c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400b70:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400b74:	f022 0201 	bic.w	r2, r2, #1
  400b78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400b7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b80:	f3bf 8f6f 	isb	sy
  400b84:	200a      	movs	r0, #10
  400b86:	4c1b      	ldr	r4, [pc, #108]	; (400bf4 <board_init+0x138>)
  400b88:	47a0      	blx	r4
  400b8a:	200b      	movs	r0, #11
  400b8c:	47a0      	blx	r4
  400b8e:	200c      	movs	r0, #12
  400b90:	47a0      	blx	r4
  400b92:	2010      	movs	r0, #16
  400b94:	47a0      	blx	r4
  400b96:	2011      	movs	r0, #17
  400b98:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b9a:	4b17      	ldr	r3, [pc, #92]	; (400bf8 <board_init+0x13c>)
  400b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400ba0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ba2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ba6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ba8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400bb0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bb2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400bb6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400bb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bbc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400bbe:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400bc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400bc6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400bca:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400bcc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400bce:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400bd2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400bd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400bd8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400bdc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400be2:	bf00      	nop
  400be4:	400e1850 	.word	0x400e1850
  400be8:	e000ed00 	.word	0xe000ed00
  400bec:	400e0c00 	.word	0x400e0c00
  400bf0:	5a00080c 	.word	0x5a00080c
  400bf4:	00401011 	.word	0x00401011
  400bf8:	400e1200 	.word	0x400e1200

00400bfc <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400bfc:	b90a      	cbnz	r2, 400c02 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400bfe:	6601      	str	r1, [r0, #96]	; 0x60
  400c00:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400c02:	6641      	str	r1, [r0, #100]	; 0x64
  400c04:	4770      	bx	lr

00400c06 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400c06:	6301      	str	r1, [r0, #48]	; 0x30
  400c08:	4770      	bx	lr

00400c0a <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c0a:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c0c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c10:	d03a      	beq.n	400c88 <pio_set_peripheral+0x7e>
  400c12:	d813      	bhi.n	400c3c <pio_set_peripheral+0x32>
  400c14:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c18:	d025      	beq.n	400c66 <pio_set_peripheral+0x5c>
  400c1a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c1e:	d10a      	bne.n	400c36 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c20:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c22:	4313      	orrs	r3, r2
  400c24:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c26:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c28:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c2a:	400b      	ands	r3, r1
  400c2c:	ea23 0302 	bic.w	r3, r3, r2
  400c30:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c32:	6042      	str	r2, [r0, #4]
  400c34:	4770      	bx	lr
	switch (ul_type) {
  400c36:	2900      	cmp	r1, #0
  400c38:	d1fb      	bne.n	400c32 <pio_set_peripheral+0x28>
  400c3a:	4770      	bx	lr
  400c3c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c40:	d021      	beq.n	400c86 <pio_set_peripheral+0x7c>
  400c42:	d809      	bhi.n	400c58 <pio_set_peripheral+0x4e>
  400c44:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c48:	d1f3      	bne.n	400c32 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c4a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c4c:	4313      	orrs	r3, r2
  400c4e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c50:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c52:	4313      	orrs	r3, r2
  400c54:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c56:	e7ec      	b.n	400c32 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400c58:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c5c:	d013      	beq.n	400c86 <pio_set_peripheral+0x7c>
  400c5e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c62:	d010      	beq.n	400c86 <pio_set_peripheral+0x7c>
  400c64:	e7e5      	b.n	400c32 <pio_set_peripheral+0x28>
{
  400c66:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c68:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c6a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400c6c:	43d3      	mvns	r3, r2
  400c6e:	4021      	ands	r1, r4
  400c70:	461c      	mov	r4, r3
  400c72:	4019      	ands	r1, r3
  400c74:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c76:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c78:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c7a:	400b      	ands	r3, r1
  400c7c:	4023      	ands	r3, r4
  400c7e:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400c80:	6042      	str	r2, [r0, #4]
}
  400c82:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c86:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c88:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c8a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400c8c:	400b      	ands	r3, r1
  400c8e:	ea23 0302 	bic.w	r3, r3, r2
  400c92:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c94:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c96:	4313      	orrs	r3, r2
  400c98:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c9a:	e7ca      	b.n	400c32 <pio_set_peripheral+0x28>

00400c9c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400c9c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c9e:	f012 0f01 	tst.w	r2, #1
  400ca2:	d10d      	bne.n	400cc0 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400ca4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400ca6:	f012 0f0a 	tst.w	r2, #10
  400caa:	d00b      	beq.n	400cc4 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400cac:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400cae:	f012 0f02 	tst.w	r2, #2
  400cb2:	d109      	bne.n	400cc8 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400cb4:	f012 0f08 	tst.w	r2, #8
  400cb8:	d008      	beq.n	400ccc <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400cba:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400cbe:	e005      	b.n	400ccc <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400cc0:	6641      	str	r1, [r0, #100]	; 0x64
  400cc2:	e7f0      	b.n	400ca6 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400cc4:	6241      	str	r1, [r0, #36]	; 0x24
  400cc6:	e7f2      	b.n	400cae <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400cc8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400ccc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400cce:	6001      	str	r1, [r0, #0]
  400cd0:	4770      	bx	lr

00400cd2 <pio_set_output>:
{
  400cd2:	b410      	push	{r4}
  400cd4:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400cd6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400cd8:	b94c      	cbnz	r4, 400cee <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400cda:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400cdc:	b14b      	cbz	r3, 400cf2 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400cde:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400ce0:	b94a      	cbnz	r2, 400cf6 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400ce2:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400ce4:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400ce6:	6001      	str	r1, [r0, #0]
}
  400ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cec:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400cee:	6641      	str	r1, [r0, #100]	; 0x64
  400cf0:	e7f4      	b.n	400cdc <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400cf2:	6541      	str	r1, [r0, #84]	; 0x54
  400cf4:	e7f4      	b.n	400ce0 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400cf6:	6301      	str	r1, [r0, #48]	; 0x30
  400cf8:	e7f4      	b.n	400ce4 <pio_set_output+0x12>
	...

00400cfc <pio_configure>:
{
  400cfc:	b570      	push	{r4, r5, r6, lr}
  400cfe:	b082      	sub	sp, #8
  400d00:	4605      	mov	r5, r0
  400d02:	4616      	mov	r6, r2
  400d04:	461c      	mov	r4, r3
	switch (ul_type) {
  400d06:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d0a:	d014      	beq.n	400d36 <pio_configure+0x3a>
  400d0c:	d90a      	bls.n	400d24 <pio_configure+0x28>
  400d0e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d12:	d024      	beq.n	400d5e <pio_configure+0x62>
  400d14:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d18:	d021      	beq.n	400d5e <pio_configure+0x62>
  400d1a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d1e:	d017      	beq.n	400d50 <pio_configure+0x54>
		return 0;
  400d20:	2000      	movs	r0, #0
  400d22:	e01a      	b.n	400d5a <pio_configure+0x5e>
	switch (ul_type) {
  400d24:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d28:	d005      	beq.n	400d36 <pio_configure+0x3a>
  400d2a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d2e:	d002      	beq.n	400d36 <pio_configure+0x3a>
  400d30:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d34:	d1f4      	bne.n	400d20 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400d36:	4632      	mov	r2, r6
  400d38:	4628      	mov	r0, r5
  400d3a:	4b11      	ldr	r3, [pc, #68]	; (400d80 <pio_configure+0x84>)
  400d3c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d3e:	f014 0f01 	tst.w	r4, #1
  400d42:	d102      	bne.n	400d4a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400d44:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400d46:	2001      	movs	r0, #1
  400d48:	e007      	b.n	400d5a <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400d4a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400d4c:	2001      	movs	r0, #1
  400d4e:	e004      	b.n	400d5a <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400d50:	461a      	mov	r2, r3
  400d52:	4631      	mov	r1, r6
  400d54:	4b0b      	ldr	r3, [pc, #44]	; (400d84 <pio_configure+0x88>)
  400d56:	4798      	blx	r3
	return 1;
  400d58:	2001      	movs	r0, #1
}
  400d5a:	b002      	add	sp, #8
  400d5c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400d5e:	f004 0301 	and.w	r3, r4, #1
  400d62:	9300      	str	r3, [sp, #0]
  400d64:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400d68:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d6c:	bf14      	ite	ne
  400d6e:	2200      	movne	r2, #0
  400d70:	2201      	moveq	r2, #1
  400d72:	4631      	mov	r1, r6
  400d74:	4628      	mov	r0, r5
  400d76:	4c04      	ldr	r4, [pc, #16]	; (400d88 <pio_configure+0x8c>)
  400d78:	47a0      	blx	r4
	return 1;
  400d7a:	2001      	movs	r0, #1
		break;
  400d7c:	e7ed      	b.n	400d5a <pio_configure+0x5e>
  400d7e:	bf00      	nop
  400d80:	00400c0b 	.word	0x00400c0b
  400d84:	00400c9d 	.word	0x00400c9d
  400d88:	00400cd3 	.word	0x00400cd3

00400d8c <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400d8c:	f012 0f10 	tst.w	r2, #16
  400d90:	d012      	beq.n	400db8 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400d92:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400d96:	f012 0f20 	tst.w	r2, #32
  400d9a:	d007      	beq.n	400dac <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400d9c:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400da0:	f012 0f40 	tst.w	r2, #64	; 0x40
  400da4:	d005      	beq.n	400db2 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400da6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400daa:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400dac:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400db0:	e7f6      	b.n	400da0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400db2:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400db6:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400db8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400dbc:	4770      	bx	lr

00400dbe <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400dbe:	6401      	str	r1, [r0, #64]	; 0x40
  400dc0:	4770      	bx	lr

00400dc2 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400dc2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400dc4:	4770      	bx	lr

00400dc6 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400dc6:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400dc8:	4770      	bx	lr
	...

00400dcc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dd0:	4604      	mov	r4, r0
  400dd2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400dd4:	4b0e      	ldr	r3, [pc, #56]	; (400e10 <pio_handler_process+0x44>)
  400dd6:	4798      	blx	r3
  400dd8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400dda:	4620      	mov	r0, r4
  400ddc:	4b0d      	ldr	r3, [pc, #52]	; (400e14 <pio_handler_process+0x48>)
  400dde:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400de0:	4005      	ands	r5, r0
  400de2:	d013      	beq.n	400e0c <pio_handler_process+0x40>
  400de4:	4c0c      	ldr	r4, [pc, #48]	; (400e18 <pio_handler_process+0x4c>)
  400de6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400dea:	e003      	b.n	400df4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400dec:	42b4      	cmp	r4, r6
  400dee:	d00d      	beq.n	400e0c <pio_handler_process+0x40>
  400df0:	3410      	adds	r4, #16
		while (status != 0) {
  400df2:	b15d      	cbz	r5, 400e0c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400df4:	6820      	ldr	r0, [r4, #0]
  400df6:	4540      	cmp	r0, r8
  400df8:	d1f8      	bne.n	400dec <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400dfa:	6861      	ldr	r1, [r4, #4]
  400dfc:	4229      	tst	r1, r5
  400dfe:	d0f5      	beq.n	400dec <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400e00:	68e3      	ldr	r3, [r4, #12]
  400e02:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400e04:	6863      	ldr	r3, [r4, #4]
  400e06:	ea25 0503 	bic.w	r5, r5, r3
  400e0a:	e7ef      	b.n	400dec <pio_handler_process+0x20>
  400e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e10:	00400dc3 	.word	0x00400dc3
  400e14:	00400dc7 	.word	0x00400dc7
  400e18:	2040066c 	.word	0x2040066c

00400e1c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400e1e:	4c18      	ldr	r4, [pc, #96]	; (400e80 <pio_handler_set+0x64>)
  400e20:	6826      	ldr	r6, [r4, #0]
  400e22:	2e06      	cmp	r6, #6
  400e24:	d82a      	bhi.n	400e7c <pio_handler_set+0x60>
  400e26:	f04f 0c00 	mov.w	ip, #0
  400e2a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e2c:	4f15      	ldr	r7, [pc, #84]	; (400e84 <pio_handler_set+0x68>)
  400e2e:	e004      	b.n	400e3a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400e30:	3401      	adds	r4, #1
  400e32:	b2e4      	uxtb	r4, r4
  400e34:	46a4      	mov	ip, r4
  400e36:	42a6      	cmp	r6, r4
  400e38:	d309      	bcc.n	400e4e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400e3a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e3c:	0125      	lsls	r5, r4, #4
  400e3e:	597d      	ldr	r5, [r7, r5]
  400e40:	428d      	cmp	r5, r1
  400e42:	d1f5      	bne.n	400e30 <pio_handler_set+0x14>
  400e44:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400e48:	686d      	ldr	r5, [r5, #4]
  400e4a:	4295      	cmp	r5, r2
  400e4c:	d1f0      	bne.n	400e30 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400e4e:	4d0d      	ldr	r5, [pc, #52]	; (400e84 <pio_handler_set+0x68>)
  400e50:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400e54:	eb05 040e 	add.w	r4, r5, lr
  400e58:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400e5c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400e5e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400e60:	9906      	ldr	r1, [sp, #24]
  400e62:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400e64:	3601      	adds	r6, #1
  400e66:	4566      	cmp	r6, ip
  400e68:	d005      	beq.n	400e76 <pio_handler_set+0x5a>
  400e6a:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400e6c:	461a      	mov	r2, r3
  400e6e:	4b06      	ldr	r3, [pc, #24]	; (400e88 <pio_handler_set+0x6c>)
  400e70:	4798      	blx	r3

	return 0;
  400e72:	2000      	movs	r0, #0
  400e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400e76:	4902      	ldr	r1, [pc, #8]	; (400e80 <pio_handler_set+0x64>)
  400e78:	600e      	str	r6, [r1, #0]
  400e7a:	e7f6      	b.n	400e6a <pio_handler_set+0x4e>
		return 1;
  400e7c:	2001      	movs	r0, #1
}
  400e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e80:	204006dc 	.word	0x204006dc
  400e84:	2040066c 	.word	0x2040066c
  400e88:	00400d8d 	.word	0x00400d8d

00400e8c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e8c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e8e:	210a      	movs	r1, #10
  400e90:	4801      	ldr	r0, [pc, #4]	; (400e98 <PIOA_Handler+0xc>)
  400e92:	4b02      	ldr	r3, [pc, #8]	; (400e9c <PIOA_Handler+0x10>)
  400e94:	4798      	blx	r3
  400e96:	bd08      	pop	{r3, pc}
  400e98:	400e0e00 	.word	0x400e0e00
  400e9c:	00400dcd 	.word	0x00400dcd

00400ea0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ea0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400ea2:	210b      	movs	r1, #11
  400ea4:	4801      	ldr	r0, [pc, #4]	; (400eac <PIOB_Handler+0xc>)
  400ea6:	4b02      	ldr	r3, [pc, #8]	; (400eb0 <PIOB_Handler+0x10>)
  400ea8:	4798      	blx	r3
  400eaa:	bd08      	pop	{r3, pc}
  400eac:	400e1000 	.word	0x400e1000
  400eb0:	00400dcd 	.word	0x00400dcd

00400eb4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400eb4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400eb6:	210c      	movs	r1, #12
  400eb8:	4801      	ldr	r0, [pc, #4]	; (400ec0 <PIOC_Handler+0xc>)
  400eba:	4b02      	ldr	r3, [pc, #8]	; (400ec4 <PIOC_Handler+0x10>)
  400ebc:	4798      	blx	r3
  400ebe:	bd08      	pop	{r3, pc}
  400ec0:	400e1200 	.word	0x400e1200
  400ec4:	00400dcd 	.word	0x00400dcd

00400ec8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ec8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400eca:	2110      	movs	r1, #16
  400ecc:	4801      	ldr	r0, [pc, #4]	; (400ed4 <PIOD_Handler+0xc>)
  400ece:	4b02      	ldr	r3, [pc, #8]	; (400ed8 <PIOD_Handler+0x10>)
  400ed0:	4798      	blx	r3
  400ed2:	bd08      	pop	{r3, pc}
  400ed4:	400e1400 	.word	0x400e1400
  400ed8:	00400dcd 	.word	0x00400dcd

00400edc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400edc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400ede:	2111      	movs	r1, #17
  400ee0:	4801      	ldr	r0, [pc, #4]	; (400ee8 <PIOE_Handler+0xc>)
  400ee2:	4b02      	ldr	r3, [pc, #8]	; (400eec <PIOE_Handler+0x10>)
  400ee4:	4798      	blx	r3
  400ee6:	bd08      	pop	{r3, pc}
  400ee8:	400e1600 	.word	0x400e1600
  400eec:	00400dcd 	.word	0x00400dcd

00400ef0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400ef0:	2803      	cmp	r0, #3
  400ef2:	d011      	beq.n	400f18 <pmc_mck_set_division+0x28>
  400ef4:	2804      	cmp	r0, #4
  400ef6:	d012      	beq.n	400f1e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400ef8:	2802      	cmp	r0, #2
  400efa:	bf0c      	ite	eq
  400efc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400f00:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400f02:	4a08      	ldr	r2, [pc, #32]	; (400f24 <pmc_mck_set_division+0x34>)
  400f04:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400f0a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400f0c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400f0e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f10:	f013 0f08 	tst.w	r3, #8
  400f14:	d0fb      	beq.n	400f0e <pmc_mck_set_division+0x1e>
}
  400f16:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400f18:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400f1c:	e7f1      	b.n	400f02 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400f22:	e7ee      	b.n	400f02 <pmc_mck_set_division+0x12>
  400f24:	400e0600 	.word	0x400e0600

00400f28 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400f28:	4a17      	ldr	r2, [pc, #92]	; (400f88 <pmc_switch_mck_to_pllack+0x60>)
  400f2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400f30:	4318      	orrs	r0, r3
  400f32:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f34:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f36:	f013 0f08 	tst.w	r3, #8
  400f3a:	d10a      	bne.n	400f52 <pmc_switch_mck_to_pllack+0x2a>
  400f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f40:	4911      	ldr	r1, [pc, #68]	; (400f88 <pmc_switch_mck_to_pllack+0x60>)
  400f42:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f44:	f012 0f08 	tst.w	r2, #8
  400f48:	d103      	bne.n	400f52 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f4a:	3b01      	subs	r3, #1
  400f4c:	d1f9      	bne.n	400f42 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400f4e:	2001      	movs	r0, #1
  400f50:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f52:	4a0d      	ldr	r2, [pc, #52]	; (400f88 <pmc_switch_mck_to_pllack+0x60>)
  400f54:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f56:	f023 0303 	bic.w	r3, r3, #3
  400f5a:	f043 0302 	orr.w	r3, r3, #2
  400f5e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f62:	f013 0f08 	tst.w	r3, #8
  400f66:	d10a      	bne.n	400f7e <pmc_switch_mck_to_pllack+0x56>
  400f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f6c:	4906      	ldr	r1, [pc, #24]	; (400f88 <pmc_switch_mck_to_pllack+0x60>)
  400f6e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f70:	f012 0f08 	tst.w	r2, #8
  400f74:	d105      	bne.n	400f82 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f76:	3b01      	subs	r3, #1
  400f78:	d1f9      	bne.n	400f6e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400f7a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f7c:	4770      	bx	lr
	return 0;
  400f7e:	2000      	movs	r0, #0
  400f80:	4770      	bx	lr
  400f82:	2000      	movs	r0, #0
  400f84:	4770      	bx	lr
  400f86:	bf00      	nop
  400f88:	400e0600 	.word	0x400e0600

00400f8c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f8c:	b9a0      	cbnz	r0, 400fb8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f8e:	480e      	ldr	r0, [pc, #56]	; (400fc8 <pmc_switch_mainck_to_xtal+0x3c>)
  400f90:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f92:	0209      	lsls	r1, r1, #8
  400f94:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f96:	4a0d      	ldr	r2, [pc, #52]	; (400fcc <pmc_switch_mainck_to_xtal+0x40>)
  400f98:	401a      	ands	r2, r3
  400f9a:	4b0d      	ldr	r3, [pc, #52]	; (400fd0 <pmc_switch_mainck_to_xtal+0x44>)
  400f9c:	4313      	orrs	r3, r2
  400f9e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400fa0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400fa2:	4602      	mov	r2, r0
  400fa4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400fa6:	f013 0f01 	tst.w	r3, #1
  400faa:	d0fb      	beq.n	400fa4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400fac:	4a06      	ldr	r2, [pc, #24]	; (400fc8 <pmc_switch_mainck_to_xtal+0x3c>)
  400fae:	6a11      	ldr	r1, [r2, #32]
  400fb0:	4b08      	ldr	r3, [pc, #32]	; (400fd4 <pmc_switch_mainck_to_xtal+0x48>)
  400fb2:	430b      	orrs	r3, r1
  400fb4:	6213      	str	r3, [r2, #32]
  400fb6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fb8:	4903      	ldr	r1, [pc, #12]	; (400fc8 <pmc_switch_mainck_to_xtal+0x3c>)
  400fba:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fbc:	4a06      	ldr	r2, [pc, #24]	; (400fd8 <pmc_switch_mainck_to_xtal+0x4c>)
  400fbe:	401a      	ands	r2, r3
  400fc0:	4b06      	ldr	r3, [pc, #24]	; (400fdc <pmc_switch_mainck_to_xtal+0x50>)
  400fc2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fc4:	620b      	str	r3, [r1, #32]
  400fc6:	4770      	bx	lr
  400fc8:	400e0600 	.word	0x400e0600
  400fcc:	ffc8fffc 	.word	0xffc8fffc
  400fd0:	00370001 	.word	0x00370001
  400fd4:	01370000 	.word	0x01370000
  400fd8:	fec8fffc 	.word	0xfec8fffc
  400fdc:	01370002 	.word	0x01370002

00400fe0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400fe0:	4b02      	ldr	r3, [pc, #8]	; (400fec <pmc_osc_is_ready_mainck+0xc>)
  400fe2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fe4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400fe8:	4770      	bx	lr
  400fea:	bf00      	nop
  400fec:	400e0600 	.word	0x400e0600

00400ff0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400ff0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ff4:	4b01      	ldr	r3, [pc, #4]	; (400ffc <pmc_disable_pllack+0xc>)
  400ff6:	629a      	str	r2, [r3, #40]	; 0x28
  400ff8:	4770      	bx	lr
  400ffa:	bf00      	nop
  400ffc:	400e0600 	.word	0x400e0600

00401000 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401000:	4b02      	ldr	r3, [pc, #8]	; (40100c <pmc_is_locked_pllack+0xc>)
  401002:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401004:	f000 0002 	and.w	r0, r0, #2
  401008:	4770      	bx	lr
  40100a:	bf00      	nop
  40100c:	400e0600 	.word	0x400e0600

00401010 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401010:	283f      	cmp	r0, #63	; 0x3f
  401012:	d81e      	bhi.n	401052 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401014:	281f      	cmp	r0, #31
  401016:	d80c      	bhi.n	401032 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401018:	4b11      	ldr	r3, [pc, #68]	; (401060 <pmc_enable_periph_clk+0x50>)
  40101a:	699a      	ldr	r2, [r3, #24]
  40101c:	2301      	movs	r3, #1
  40101e:	4083      	lsls	r3, r0
  401020:	4393      	bics	r3, r2
  401022:	d018      	beq.n	401056 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401024:	2301      	movs	r3, #1
  401026:	fa03 f000 	lsl.w	r0, r3, r0
  40102a:	4b0d      	ldr	r3, [pc, #52]	; (401060 <pmc_enable_periph_clk+0x50>)
  40102c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40102e:	2000      	movs	r0, #0
  401030:	4770      	bx	lr
		ul_id -= 32;
  401032:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401034:	4b0a      	ldr	r3, [pc, #40]	; (401060 <pmc_enable_periph_clk+0x50>)
  401036:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40103a:	2301      	movs	r3, #1
  40103c:	4083      	lsls	r3, r0
  40103e:	4393      	bics	r3, r2
  401040:	d00b      	beq.n	40105a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401042:	2301      	movs	r3, #1
  401044:	fa03 f000 	lsl.w	r0, r3, r0
  401048:	4b05      	ldr	r3, [pc, #20]	; (401060 <pmc_enable_periph_clk+0x50>)
  40104a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40104e:	2000      	movs	r0, #0
  401050:	4770      	bx	lr
		return 1;
  401052:	2001      	movs	r0, #1
  401054:	4770      	bx	lr
	return 0;
  401056:	2000      	movs	r0, #0
  401058:	4770      	bx	lr
  40105a:	2000      	movs	r0, #0
}
  40105c:	4770      	bx	lr
  40105e:	bf00      	nop
  401060:	400e0600 	.word	0x400e0600

00401064 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401064:	e7fe      	b.n	401064 <Dummy_Handler>
	...

00401068 <Reset_Handler>:
{
  401068:	b500      	push	{lr}
  40106a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40106c:	4b25      	ldr	r3, [pc, #148]	; (401104 <Reset_Handler+0x9c>)
  40106e:	4a26      	ldr	r2, [pc, #152]	; (401108 <Reset_Handler+0xa0>)
  401070:	429a      	cmp	r2, r3
  401072:	d010      	beq.n	401096 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401074:	4b25      	ldr	r3, [pc, #148]	; (40110c <Reset_Handler+0xa4>)
  401076:	4a23      	ldr	r2, [pc, #140]	; (401104 <Reset_Handler+0x9c>)
  401078:	429a      	cmp	r2, r3
  40107a:	d20c      	bcs.n	401096 <Reset_Handler+0x2e>
  40107c:	3b01      	subs	r3, #1
  40107e:	1a9b      	subs	r3, r3, r2
  401080:	f023 0303 	bic.w	r3, r3, #3
  401084:	3304      	adds	r3, #4
  401086:	4413      	add	r3, r2
  401088:	491f      	ldr	r1, [pc, #124]	; (401108 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40108a:	f851 0b04 	ldr.w	r0, [r1], #4
  40108e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401092:	429a      	cmp	r2, r3
  401094:	d1f9      	bne.n	40108a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401096:	4b1e      	ldr	r3, [pc, #120]	; (401110 <Reset_Handler+0xa8>)
  401098:	4a1e      	ldr	r2, [pc, #120]	; (401114 <Reset_Handler+0xac>)
  40109a:	429a      	cmp	r2, r3
  40109c:	d20a      	bcs.n	4010b4 <Reset_Handler+0x4c>
  40109e:	3b01      	subs	r3, #1
  4010a0:	1a9b      	subs	r3, r3, r2
  4010a2:	f023 0303 	bic.w	r3, r3, #3
  4010a6:	3304      	adds	r3, #4
  4010a8:	4413      	add	r3, r2
                *pDest++ = 0;
  4010aa:	2100      	movs	r1, #0
  4010ac:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4010b0:	4293      	cmp	r3, r2
  4010b2:	d1fb      	bne.n	4010ac <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4010b4:	4a18      	ldr	r2, [pc, #96]	; (401118 <Reset_Handler+0xb0>)
  4010b6:	4b19      	ldr	r3, [pc, #100]	; (40111c <Reset_Handler+0xb4>)
  4010b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4010bc:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4010be:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4010c2:	fab3 f383 	clz	r3, r3
  4010c6:	095b      	lsrs	r3, r3, #5
  4010c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4010ca:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4010cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010d0:	2200      	movs	r2, #0
  4010d2:	4b13      	ldr	r3, [pc, #76]	; (401120 <Reset_Handler+0xb8>)
  4010d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4010d6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4010d8:	4a12      	ldr	r2, [pc, #72]	; (401124 <Reset_Handler+0xbc>)
  4010da:	6813      	ldr	r3, [r2, #0]
  4010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4010e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4010e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4010e6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4010ea:	b129      	cbz	r1, 4010f8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4010ec:	2201      	movs	r2, #1
  4010ee:	4b0c      	ldr	r3, [pc, #48]	; (401120 <Reset_Handler+0xb8>)
  4010f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4010f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4010f6:	b662      	cpsie	i
        __libc_init_array();
  4010f8:	4b0b      	ldr	r3, [pc, #44]	; (401128 <Reset_Handler+0xc0>)
  4010fa:	4798      	blx	r3
        main();
  4010fc:	4b0b      	ldr	r3, [pc, #44]	; (40112c <Reset_Handler+0xc4>)
  4010fe:	4798      	blx	r3
  401100:	e7fe      	b.n	401100 <Reset_Handler+0x98>
  401102:	bf00      	nop
  401104:	20400000 	.word	0x20400000
  401108:	0040232c 	.word	0x0040232c
  40110c:	2040044c 	.word	0x2040044c
  401110:	20400718 	.word	0x20400718
  401114:	2040044c 	.word	0x2040044c
  401118:	e000ed00 	.word	0xe000ed00
  40111c:	00400000 	.word	0x00400000
  401120:	20400018 	.word	0x20400018
  401124:	e000ed88 	.word	0xe000ed88
  401128:	00401669 	.word	0x00401669
  40112c:	00401549 	.word	0x00401549

00401130 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401130:	4b3b      	ldr	r3, [pc, #236]	; (401220 <SystemCoreClockUpdate+0xf0>)
  401132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401134:	f003 0303 	and.w	r3, r3, #3
  401138:	2b01      	cmp	r3, #1
  40113a:	d01d      	beq.n	401178 <SystemCoreClockUpdate+0x48>
  40113c:	b183      	cbz	r3, 401160 <SystemCoreClockUpdate+0x30>
  40113e:	2b02      	cmp	r3, #2
  401140:	d036      	beq.n	4011b0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401142:	4b37      	ldr	r3, [pc, #220]	; (401220 <SystemCoreClockUpdate+0xf0>)
  401144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401146:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40114a:	2b70      	cmp	r3, #112	; 0x70
  40114c:	d05f      	beq.n	40120e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40114e:	4b34      	ldr	r3, [pc, #208]	; (401220 <SystemCoreClockUpdate+0xf0>)
  401150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401152:	4934      	ldr	r1, [pc, #208]	; (401224 <SystemCoreClockUpdate+0xf4>)
  401154:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401158:	680b      	ldr	r3, [r1, #0]
  40115a:	40d3      	lsrs	r3, r2
  40115c:	600b      	str	r3, [r1, #0]
  40115e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401160:	4b31      	ldr	r3, [pc, #196]	; (401228 <SystemCoreClockUpdate+0xf8>)
  401162:	695b      	ldr	r3, [r3, #20]
  401164:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401168:	bf14      	ite	ne
  40116a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40116e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401172:	4b2c      	ldr	r3, [pc, #176]	; (401224 <SystemCoreClockUpdate+0xf4>)
  401174:	601a      	str	r2, [r3, #0]
  401176:	e7e4      	b.n	401142 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401178:	4b29      	ldr	r3, [pc, #164]	; (401220 <SystemCoreClockUpdate+0xf0>)
  40117a:	6a1b      	ldr	r3, [r3, #32]
  40117c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401180:	d003      	beq.n	40118a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401182:	4a2a      	ldr	r2, [pc, #168]	; (40122c <SystemCoreClockUpdate+0xfc>)
  401184:	4b27      	ldr	r3, [pc, #156]	; (401224 <SystemCoreClockUpdate+0xf4>)
  401186:	601a      	str	r2, [r3, #0]
  401188:	e7db      	b.n	401142 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40118a:	4a29      	ldr	r2, [pc, #164]	; (401230 <SystemCoreClockUpdate+0x100>)
  40118c:	4b25      	ldr	r3, [pc, #148]	; (401224 <SystemCoreClockUpdate+0xf4>)
  40118e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401190:	4b23      	ldr	r3, [pc, #140]	; (401220 <SystemCoreClockUpdate+0xf0>)
  401192:	6a1b      	ldr	r3, [r3, #32]
  401194:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401198:	2b10      	cmp	r3, #16
  40119a:	d005      	beq.n	4011a8 <SystemCoreClockUpdate+0x78>
  40119c:	2b20      	cmp	r3, #32
  40119e:	d1d0      	bne.n	401142 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4011a0:	4a22      	ldr	r2, [pc, #136]	; (40122c <SystemCoreClockUpdate+0xfc>)
  4011a2:	4b20      	ldr	r3, [pc, #128]	; (401224 <SystemCoreClockUpdate+0xf4>)
  4011a4:	601a      	str	r2, [r3, #0]
          break;
  4011a6:	e7cc      	b.n	401142 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4011a8:	4a22      	ldr	r2, [pc, #136]	; (401234 <SystemCoreClockUpdate+0x104>)
  4011aa:	4b1e      	ldr	r3, [pc, #120]	; (401224 <SystemCoreClockUpdate+0xf4>)
  4011ac:	601a      	str	r2, [r3, #0]
          break;
  4011ae:	e7c8      	b.n	401142 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011b0:	4b1b      	ldr	r3, [pc, #108]	; (401220 <SystemCoreClockUpdate+0xf0>)
  4011b2:	6a1b      	ldr	r3, [r3, #32]
  4011b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011b8:	d016      	beq.n	4011e8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4011ba:	4a1c      	ldr	r2, [pc, #112]	; (40122c <SystemCoreClockUpdate+0xfc>)
  4011bc:	4b19      	ldr	r3, [pc, #100]	; (401224 <SystemCoreClockUpdate+0xf4>)
  4011be:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4011c0:	4b17      	ldr	r3, [pc, #92]	; (401220 <SystemCoreClockUpdate+0xf0>)
  4011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011c4:	f003 0303 	and.w	r3, r3, #3
  4011c8:	2b02      	cmp	r3, #2
  4011ca:	d1ba      	bne.n	401142 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011cc:	4a14      	ldr	r2, [pc, #80]	; (401220 <SystemCoreClockUpdate+0xf0>)
  4011ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4011d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4011d2:	4814      	ldr	r0, [pc, #80]	; (401224 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011d4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4011d8:	6803      	ldr	r3, [r0, #0]
  4011da:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4011de:	b2d2      	uxtb	r2, r2
  4011e0:	fbb3 f3f2 	udiv	r3, r3, r2
  4011e4:	6003      	str	r3, [r0, #0]
  4011e6:	e7ac      	b.n	401142 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011e8:	4a11      	ldr	r2, [pc, #68]	; (401230 <SystemCoreClockUpdate+0x100>)
  4011ea:	4b0e      	ldr	r3, [pc, #56]	; (401224 <SystemCoreClockUpdate+0xf4>)
  4011ec:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4011ee:	4b0c      	ldr	r3, [pc, #48]	; (401220 <SystemCoreClockUpdate+0xf0>)
  4011f0:	6a1b      	ldr	r3, [r3, #32]
  4011f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011f6:	2b10      	cmp	r3, #16
  4011f8:	d005      	beq.n	401206 <SystemCoreClockUpdate+0xd6>
  4011fa:	2b20      	cmp	r3, #32
  4011fc:	d1e0      	bne.n	4011c0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4011fe:	4a0b      	ldr	r2, [pc, #44]	; (40122c <SystemCoreClockUpdate+0xfc>)
  401200:	4b08      	ldr	r3, [pc, #32]	; (401224 <SystemCoreClockUpdate+0xf4>)
  401202:	601a      	str	r2, [r3, #0]
          break;
  401204:	e7dc      	b.n	4011c0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401206:	4a0b      	ldr	r2, [pc, #44]	; (401234 <SystemCoreClockUpdate+0x104>)
  401208:	4b06      	ldr	r3, [pc, #24]	; (401224 <SystemCoreClockUpdate+0xf4>)
  40120a:	601a      	str	r2, [r3, #0]
          break;
  40120c:	e7d8      	b.n	4011c0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40120e:	4a05      	ldr	r2, [pc, #20]	; (401224 <SystemCoreClockUpdate+0xf4>)
  401210:	6813      	ldr	r3, [r2, #0]
  401212:	4909      	ldr	r1, [pc, #36]	; (401238 <SystemCoreClockUpdate+0x108>)
  401214:	fba1 1303 	umull	r1, r3, r1, r3
  401218:	085b      	lsrs	r3, r3, #1
  40121a:	6013      	str	r3, [r2, #0]
  40121c:	4770      	bx	lr
  40121e:	bf00      	nop
  401220:	400e0600 	.word	0x400e0600
  401224:	2040001c 	.word	0x2040001c
  401228:	400e1810 	.word	0x400e1810
  40122c:	00b71b00 	.word	0x00b71b00
  401230:	003d0900 	.word	0x003d0900
  401234:	007a1200 	.word	0x007a1200
  401238:	aaaaaaab 	.word	0xaaaaaaab

0040123c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40123c:	4b16      	ldr	r3, [pc, #88]	; (401298 <system_init_flash+0x5c>)
  40123e:	4298      	cmp	r0, r3
  401240:	d913      	bls.n	40126a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401242:	4b16      	ldr	r3, [pc, #88]	; (40129c <system_init_flash+0x60>)
  401244:	4298      	cmp	r0, r3
  401246:	d915      	bls.n	401274 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401248:	4b15      	ldr	r3, [pc, #84]	; (4012a0 <system_init_flash+0x64>)
  40124a:	4298      	cmp	r0, r3
  40124c:	d916      	bls.n	40127c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40124e:	4b15      	ldr	r3, [pc, #84]	; (4012a4 <system_init_flash+0x68>)
  401250:	4298      	cmp	r0, r3
  401252:	d917      	bls.n	401284 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401254:	4b14      	ldr	r3, [pc, #80]	; (4012a8 <system_init_flash+0x6c>)
  401256:	4298      	cmp	r0, r3
  401258:	d918      	bls.n	40128c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40125a:	4b14      	ldr	r3, [pc, #80]	; (4012ac <system_init_flash+0x70>)
  40125c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40125e:	bf94      	ite	ls
  401260:	4a13      	ldrls	r2, [pc, #76]	; (4012b0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401262:	4a14      	ldrhi	r2, [pc, #80]	; (4012b4 <system_init_flash+0x78>)
  401264:	4b14      	ldr	r3, [pc, #80]	; (4012b8 <system_init_flash+0x7c>)
  401266:	601a      	str	r2, [r3, #0]
  401268:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40126a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40126e:	4b12      	ldr	r3, [pc, #72]	; (4012b8 <system_init_flash+0x7c>)
  401270:	601a      	str	r2, [r3, #0]
  401272:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401274:	4a11      	ldr	r2, [pc, #68]	; (4012bc <system_init_flash+0x80>)
  401276:	4b10      	ldr	r3, [pc, #64]	; (4012b8 <system_init_flash+0x7c>)
  401278:	601a      	str	r2, [r3, #0]
  40127a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40127c:	4a10      	ldr	r2, [pc, #64]	; (4012c0 <system_init_flash+0x84>)
  40127e:	4b0e      	ldr	r3, [pc, #56]	; (4012b8 <system_init_flash+0x7c>)
  401280:	601a      	str	r2, [r3, #0]
  401282:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401284:	4a0f      	ldr	r2, [pc, #60]	; (4012c4 <system_init_flash+0x88>)
  401286:	4b0c      	ldr	r3, [pc, #48]	; (4012b8 <system_init_flash+0x7c>)
  401288:	601a      	str	r2, [r3, #0]
  40128a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40128c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401290:	4b09      	ldr	r3, [pc, #36]	; (4012b8 <system_init_flash+0x7c>)
  401292:	601a      	str	r2, [r3, #0]
  401294:	4770      	bx	lr
  401296:	bf00      	nop
  401298:	015ef3bf 	.word	0x015ef3bf
  40129c:	02bde77f 	.word	0x02bde77f
  4012a0:	041cdb3f 	.word	0x041cdb3f
  4012a4:	057bceff 	.word	0x057bceff
  4012a8:	06dac2bf 	.word	0x06dac2bf
  4012ac:	0839b67f 	.word	0x0839b67f
  4012b0:	04000500 	.word	0x04000500
  4012b4:	04000600 	.word	0x04000600
  4012b8:	400e0c00 	.word	0x400e0c00
  4012bc:	04000100 	.word	0x04000100
  4012c0:	04000200 	.word	0x04000200
  4012c4:	04000300 	.word	0x04000300

004012c8 <but_flag_callback>:

uint32_t hour, minuto, seg;


void but_flag_callback(void){
	but_flag = true;
  4012c8:	2201      	movs	r2, #1
  4012ca:	4b01      	ldr	r3, [pc, #4]	; (4012d0 <but_flag_callback+0x8>)
  4012cc:	701a      	strb	r2, [r3, #0]
  4012ce:	4770      	bx	lr
  4012d0:	204006f0 	.word	0x204006f0

004012d4 <but_p_freq_callback>:
}
void but_p_freq_callback(void){
	but_p_freq = true;
  4012d4:	2201      	movs	r2, #1
  4012d6:	4b01      	ldr	r3, [pc, #4]	; (4012dc <but_p_freq_callback+0x8>)
  4012d8:	701a      	strb	r2, [r3, #0]
  4012da:	4770      	bx	lr
  4012dc:	204006f1 	.word	0x204006f1

004012e0 <but_m_freq_callback>:
}
void but_m_freq_callback(void){
	but_m_freq = true;
  4012e0:	2201      	movs	r2, #1
  4012e2:	4b01      	ldr	r3, [pc, #4]	; (4012e8 <but_m_freq_callback+0x8>)
  4012e4:	701a      	strb	r2, [r3, #0]
  4012e6:	4770      	bx	lr
  4012e8:	204006f2 	.word	0x204006f2

004012ec <but_stop_callback>:
}
void but_stop_callback(void){	
	but_stop = true;
  4012ec:	2201      	movs	r2, #1
  4012ee:	4b01      	ldr	r3, [pc, #4]	; (4012f4 <but_stop_callback+0x8>)
  4012f0:	701a      	strb	r2, [r3, #0]
  4012f2:	4770      	bx	lr
  4012f4:	204006e0 	.word	0x204006e0

004012f8 <io_init>:
}


// Inicializa botao SW0 do kit com interrupcao
void io_init(void)
{
  4012f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4012fc:	b082      	sub	sp, #8
	board_init();
  4012fe:	4b46      	ldr	r3, [pc, #280]	; (401418 <io_init+0x120>)
  401300:	4798      	blx	r3
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  401302:	4b46      	ldr	r3, [pc, #280]	; (40141c <io_init+0x124>)
  401304:	4798      	blx	r3

	// Configura led da placa
	pmc_enable_periph_clk(LED_PIO_ID);
  401306:	200c      	movs	r0, #12
  401308:	4e45      	ldr	r6, [pc, #276]	; (401420 <io_init+0x128>)
  40130a:	47b0      	blx	r6
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT);
  40130c:	4d45      	ldr	r5, [pc, #276]	; (401424 <io_init+0x12c>)
  40130e:	2300      	movs	r3, #0
  401310:	f44f 7280 	mov.w	r2, #256	; 0x100
  401314:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401318:	4628      	mov	r0, r5
  40131a:	f8df a130 	ldr.w	sl, [pc, #304]	; 40144c <io_init+0x154>
  40131e:	47d0      	blx	sl
	// configura botoes do oled
	pmc_enable_periph_clk(EBUT1_PIO_ID);
  401320:	2010      	movs	r0, #16
  401322:	47b0      	blx	r6
	pmc_enable_periph_clk(EBUT2_PIO_ID);
  401324:	200a      	movs	r0, #10
  401326:	47b0      	blx	r6
	pmc_enable_periph_clk(EBUT3_PIO_ID);
  401328:	200c      	movs	r0, #12
  40132a:	47b0      	blx	r6
	// configura botoes do oled como input
	pio_set_input(EBUT1_PIO,EBUT1_PIO_IDX_MASK,PIO_DEFAULT);
  40132c:	4f3e      	ldr	r7, [pc, #248]	; (401428 <io_init+0x130>)
  40132e:	2200      	movs	r2, #0
  401330:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401334:	4638      	mov	r0, r7
  401336:	f8df 9118 	ldr.w	r9, [pc, #280]	; 401450 <io_init+0x158>
  40133a:	47c8      	blx	r9
	pio_pull_up(EBUT1_PIO,EBUT1_PIO_IDX_MASK,PIO_PULLUP);
  40133c:	2201      	movs	r2, #1
  40133e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401342:	4638      	mov	r0, r7
  401344:	f8df 810c 	ldr.w	r8, [pc, #268]	; 401454 <io_init+0x15c>
  401348:	47c0      	blx	r8
	pio_set_input(EBUT2_PIO,EBUT2_PIO_IDX_MASK,PIO_DEFAULT);
  40134a:	4c38      	ldr	r4, [pc, #224]	; (40142c <io_init+0x134>)
  40134c:	2200      	movs	r2, #0
  40134e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401352:	4620      	mov	r0, r4
  401354:	47c8      	blx	r9
	pio_pull_up(EBUT2_PIO,EBUT2_PIO_IDX_MASK,PIO_PULLUP);
  401356:	2201      	movs	r2, #1
  401358:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40135c:	4620      	mov	r0, r4
  40135e:	47c0      	blx	r8
	pio_set_input(EBUT3_PIO,EBUT3_PIO_IDX_MASK,PIO_DEFAULT);
  401360:	2200      	movs	r2, #0
  401362:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401366:	4628      	mov	r0, r5
  401368:	47c8      	blx	r9
	pio_pull_up(EBUT3_PIO,EBUT3_PIO_IDX_MASK,PIO_PULLUP);
  40136a:	2201      	movs	r2, #1
  40136c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401370:	4628      	mov	r0, r5
  401372:	47c0      	blx	r8
	// Inicializa clock do perif?rico PIO responsavel pelo botao
	pmc_enable_periph_clk(BUT_PIO_ID);
  401374:	200a      	movs	r0, #10
  401376:	47b0      	blx	r6
	// Configura PIO para lidar com o pino do bot?o como entrada
	// com pull-up
	pio_configure(BUT_PIO, PIO_INPUT, BUT_IDX_MASK, PIO_PULLUP);
  401378:	2301      	movs	r3, #1
  40137a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40137e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401382:	4620      	mov	r0, r4
  401384:	47d0      	blx	sl
	// Configura interrup??o no pino referente ao botao e associa
	// fun??o de callback caso uma interrup??o for gerada
	// a fun??o de callback ? a: but_callback()
	pio_handler_set(BUT_PIO,
  401386:	4b2a      	ldr	r3, [pc, #168]	; (401430 <io_init+0x138>)
  401388:	9300      	str	r3, [sp, #0]
  40138a:	2370      	movs	r3, #112	; 0x70
  40138c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401390:	210a      	movs	r1, #10
  401392:	4620      	mov	r0, r4
  401394:	4e27      	ldr	r6, [pc, #156]	; (401434 <io_init+0x13c>)
  401396:	47b0      	blx	r6
	BUT_PIO_ID,
	BUT_IDX_MASK,
	PIO_IT_RISE_EDGE,
	but_flag_callback);
	pio_handler_set(EBUT1_PIO,
  401398:	4b27      	ldr	r3, [pc, #156]	; (401438 <io_init+0x140>)
  40139a:	9300      	str	r3, [sp, #0]
  40139c:	2350      	movs	r3, #80	; 0x50
  40139e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013a2:	2110      	movs	r1, #16
  4013a4:	4638      	mov	r0, r7
  4013a6:	47b0      	blx	r6
	EBUT1_PIO_ID,
	EBUT1_PIO_IDX_MASK,
	PIO_IT_FALL_EDGE,
	but_p_freq_callback);
	pio_handler_set(EBUT2_PIO,
  4013a8:	4b24      	ldr	r3, [pc, #144]	; (40143c <io_init+0x144>)
  4013aa:	9300      	str	r3, [sp, #0]
  4013ac:	2350      	movs	r3, #80	; 0x50
  4013ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4013b2:	210a      	movs	r1, #10
  4013b4:	4620      	mov	r0, r4
  4013b6:	47b0      	blx	r6
	EBUT2_PIO_ID,
	EBUT2_PIO_IDX_MASK,
	PIO_IT_FALL_EDGE,
	but_m_freq_callback);
	pio_handler_set(EBUT3_PIO,
  4013b8:	4b21      	ldr	r3, [pc, #132]	; (401440 <io_init+0x148>)
  4013ba:	9300      	str	r3, [sp, #0]
  4013bc:	2350      	movs	r3, #80	; 0x50
  4013be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4013c2:	210c      	movs	r1, #12
  4013c4:	4628      	mov	r0, r5
  4013c6:	47b0      	blx	r6
	EBUT3_PIO_ID,
	EBUT3_PIO_IDX_MASK,
	PIO_IT_FALL_EDGE,
	but_stop_callback);
	// Ativa interrup??o
	pio_enable_interrupt(EBUT1_PIO, EBUT1_PIO_IDX_MASK);
  4013c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013cc:	4638      	mov	r0, r7
  4013ce:	4e1d      	ldr	r6, [pc, #116]	; (401444 <io_init+0x14c>)
  4013d0:	47b0      	blx	r6
	pio_enable_interrupt(EBUT2_PIO, EBUT2_PIO_IDX_MASK);
  4013d2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4013d6:	4620      	mov	r0, r4
  4013d8:	47b0      	blx	r6
	pio_enable_interrupt(EBUT3_PIO, EBUT3_PIO_IDX_MASK);
  4013da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4013de:	4628      	mov	r0, r5
  4013e0:	47b0      	blx	r6

	// Ativa interrup??o
	pio_enable_interrupt(BUT_PIO, BUT_IDX_MASK);
  4013e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4013e6:	4620      	mov	r0, r4
  4013e8:	47b0      	blx	r6
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4013ea:	4b17      	ldr	r3, [pc, #92]	; (401448 <io_init+0x150>)
  4013ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4013f0:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4013f2:	2280      	movs	r2, #128	; 0x80
  4013f4:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4013f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  4013fc:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4013fe:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401402:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401404:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40140c:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40140e:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	NVIC_SetPriority(EBUT1_PIO_ID, 4); // Prioridade 4
	NVIC_EnableIRQ(EBUT2_PIO_ID);
	NVIC_SetPriority(EBUT2_PIO_ID, 4); // Prioridade 4
	NVIC_EnableIRQ(EBUT3_PIO_ID);
	NVIC_SetPriority(EBUT3_PIO_ID, 4); // Prioridade 4
}
  401412:	b002      	add	sp, #8
  401414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401418:	00400abd 	.word	0x00400abd
  40141c:	00400a4d 	.word	0x00400a4d
  401420:	00401011 	.word	0x00401011
  401424:	400e1200 	.word	0x400e1200
  401428:	400e1400 	.word	0x400e1400
  40142c:	400e0e00 	.word	0x400e0e00
  401430:	004012c9 	.word	0x004012c9
  401434:	00400e1d 	.word	0x00400e1d
  401438:	004012d5 	.word	0x004012d5
  40143c:	004012e1 	.word	0x004012e1
  401440:	004012ed 	.word	0x004012ed
  401444:	00400dbf 	.word	0x00400dbf
  401448:	e000e100 	.word	0xe000e100
  40144c:	00400cfd 	.word	0x00400cfd
  401450:	00400c9d 	.word	0x00400c9d
  401454:	00400bfd 	.word	0x00400bfd

00401458 <display_freq>:
	but_flag = false;
	
	
}

int display_freq(int hz, int minu, int hora){
  401458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40145c:	b087      	sub	sp, #28
  40145e:	4680      	mov	r8, r0
  401460:	4689      	mov	r9, r1
  401462:	4616      	mov	r6, r2
	gfx_mono_draw_string("  ",0,16, &sysfont);
  401464:	4d18      	ldr	r5, [pc, #96]	; (4014c8 <display_freq+0x70>)
  401466:	4f19      	ldr	r7, [pc, #100]	; (4014cc <display_freq+0x74>)
  401468:	462b      	mov	r3, r5
  40146a:	2210      	movs	r2, #16
  40146c:	2100      	movs	r1, #0
  40146e:	4638      	mov	r0, r7
  401470:	4c17      	ldr	r4, [pc, #92]	; (4014d0 <display_freq+0x78>)
  401472:	47a0      	blx	r4

	char hnum[5];
	itoa(hora, hnum, 10);
  401474:	220a      	movs	r2, #10
  401476:	a904      	add	r1, sp, #16
  401478:	4630      	mov	r0, r6
  40147a:	4e16      	ldr	r6, [pc, #88]	; (4014d4 <display_freq+0x7c>)
  40147c:	47b0      	blx	r6
	gfx_mono_draw_string(hnum,0,16, &sysfont);
  40147e:	462b      	mov	r3, r5
  401480:	2210      	movs	r2, #16
  401482:	2100      	movs	r1, #0
  401484:	eb0d 0002 	add.w	r0, sp, r2
  401488:	47a0      	blx	r4
	
	gfx_mono_draw_string("  ",30,16, &sysfont);
  40148a:	462b      	mov	r3, r5
  40148c:	2210      	movs	r2, #16
  40148e:	211e      	movs	r1, #30
  401490:	4638      	mov	r0, r7
  401492:	47a0      	blx	r4
	char hnum1[5];
	itoa(minu, hnum1, 10);
  401494:	220a      	movs	r2, #10
  401496:	a902      	add	r1, sp, #8
  401498:	4648      	mov	r0, r9
  40149a:	47b0      	blx	r6
	gfx_mono_draw_string(hnum1,30,16, &sysfont);
  40149c:	462b      	mov	r3, r5
  40149e:	2210      	movs	r2, #16
  4014a0:	211e      	movs	r1, #30
  4014a2:	a802      	add	r0, sp, #8
  4014a4:	47a0      	blx	r4

	gfx_mono_draw_string("  ",60,16, &sysfont);
  4014a6:	462b      	mov	r3, r5
  4014a8:	2210      	movs	r2, #16
  4014aa:	213c      	movs	r1, #60	; 0x3c
  4014ac:	4638      	mov	r0, r7
  4014ae:	47a0      	blx	r4
	
	char hnum2[5];
	itoa(hz, hnum2, 10);
  4014b0:	220a      	movs	r2, #10
  4014b2:	4669      	mov	r1, sp
  4014b4:	4640      	mov	r0, r8
  4014b6:	47b0      	blx	r6
	gfx_mono_draw_string(hnum2, 60,16, &sysfont);
  4014b8:	462b      	mov	r3, r5
  4014ba:	2210      	movs	r2, #16
  4014bc:	213c      	movs	r1, #60	; 0x3c
  4014be:	4668      	mov	r0, sp
  4014c0:	47a0      	blx	r4
}
  4014c2:	b007      	add	sp, #28
  4014c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4014c8:	2040000c 	.word	0x2040000c
  4014cc:	004022d4 	.word	0x004022d4
  4014d0:	00400695 	.word	0x00400695
  4014d4:	004016e9 	.word	0x004016e9

004014d8 <RTC_init>:


void RTC_init(){
  4014d8:	b530      	push	{r4, r5, lr}
  4014da:	b083      	sub	sp, #12
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  4014dc:	2002      	movs	r0, #2
  4014de:	4b13      	ldr	r3, [pc, #76]	; (40152c <RTC_init+0x54>)
  4014e0:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  4014e2:	4c13      	ldr	r4, [pc, #76]	; (401530 <RTC_init+0x58>)
  4014e4:	2100      	movs	r1, #0
  4014e6:	4620      	mov	r0, r4
  4014e8:	4b12      	ldr	r3, [pc, #72]	; (401534 <RTC_init+0x5c>)
  4014ea:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(RTC, YEAR, MOUNTH, DAY, WEEK);
  4014ec:	230c      	movs	r3, #12
  4014ee:	9300      	str	r3, [sp, #0]
  4014f0:	2313      	movs	r3, #19
  4014f2:	2203      	movs	r2, #3
  4014f4:	f240 71e2 	movw	r1, #2018	; 0x7e2
  4014f8:	4620      	mov	r0, r4
  4014fa:	4d0f      	ldr	r5, [pc, #60]	; (401538 <RTC_init+0x60>)
  4014fc:	47a8      	blx	r5
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  4014fe:	2300      	movs	r3, #0
  401500:	461a      	mov	r2, r3
  401502:	4619      	mov	r1, r3
  401504:	4620      	mov	r0, r4
  401506:	4d0d      	ldr	r5, [pc, #52]	; (40153c <RTC_init+0x64>)
  401508:	47a8      	blx	r5
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40150a:	4b0d      	ldr	r3, [pc, #52]	; (401540 <RTC_init+0x68>)
  40150c:	2204      	movs	r2, #4
  40150e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401512:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401516:	2100      	movs	r1, #0
  401518:	f883 1302 	strb.w	r1, [r3, #770]	; 0x302
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40151c:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTC_IRQn);
	NVIC_SetPriority(RTC_IRQn, 0);
	NVIC_EnableIRQ(RTC_IRQn);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(RTC,  RTC_IER_ALREN);
  40151e:	2102      	movs	r1, #2
  401520:	4620      	mov	r0, r4
  401522:	4b08      	ldr	r3, [pc, #32]	; (401544 <RTC_init+0x6c>)
  401524:	4798      	blx	r3

}
  401526:	b003      	add	sp, #12
  401528:	bd30      	pop	{r4, r5, pc}
  40152a:	bf00      	nop
  40152c:	00401011 	.word	0x00401011
  401530:	400e1860 	.word	0x400e1860
  401534:	004001ad 	.word	0x004001ad
  401538:	004002b1 	.word	0x004002b1
  40153c:	00400221 	.word	0x00400221
  401540:	e000e100 	.word	0xe000e100
  401544:	004001c3 	.word	0x004001c3

00401548 <main>:



int main (void)
{
  401548:	b580      	push	{r7, lr}
	io_init();
  40154a:	4b31      	ldr	r3, [pc, #196]	; (401610 <main+0xc8>)
  40154c:	4798      	blx	r3
	delay_init();

	gfx_mono_ssd1306_init();
  40154e:	4b31      	ldr	r3, [pc, #196]	; (401614 <main+0xcc>)
  401550:	4798      	blx	r3
	
	gfx_mono_draw_string(":",50,16, &sysfont);
  401552:	4e31      	ldr	r6, [pc, #196]	; (401618 <main+0xd0>)
  401554:	4d31      	ldr	r5, [pc, #196]	; (40161c <main+0xd4>)
  401556:	4633      	mov	r3, r6
  401558:	2210      	movs	r2, #16
  40155a:	2132      	movs	r1, #50	; 0x32
  40155c:	4628      	mov	r0, r5
  40155e:	4c30      	ldr	r4, [pc, #192]	; (401620 <main+0xd8>)
  401560:	47a0      	blx	r4
	gfx_mono_draw_string(":",20,16, &sysfont);
  401562:	4633      	mov	r3, r6
  401564:	2210      	movs	r2, #16
  401566:	2114      	movs	r1, #20
  401568:	4628      	mov	r0, r5
  40156a:	47a0      	blx	r4
	
	// Inicializa clock
	sysclk_init();
  40156c:	4b2d      	ldr	r3, [pc, #180]	; (401624 <main+0xdc>)
  40156e:	4798      	blx	r3
	// Desativa watchdog
	WDT->WDT_MR = WDT_MR_WDDIS;
  401570:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401574:	4b2c      	ldr	r3, [pc, #176]	; (401628 <main+0xe0>)
  401576:	605a      	str	r2, [r3, #4]

	// configura botao com interrupcao
	pio_set(LED_PIO, LED_IDX_MASK);
  401578:	f44f 7180 	mov.w	r1, #256	; 0x100
  40157c:	482b      	ldr	r0, [pc, #172]	; (40162c <main+0xe4>)
  40157e:	4b2c      	ldr	r3, [pc, #176]	; (401630 <main+0xe8>)
  401580:	4798      	blx	r3
	
	RTC_init();
  401582:	4b2c      	ldr	r3, [pc, #176]	; (401634 <main+0xec>)
  401584:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	
	while(1) {
		rtc_get_time(RTC, &hour, &minuto, &seg);
  401586:	4e2c      	ldr	r6, [pc, #176]	; (401638 <main+0xf0>)
  401588:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 401660 <main+0x118>
		//pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
		delay_ms(100);
  40158c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 401664 <main+0x11c>
  401590:	e009      	b.n	4015a6 <main+0x5e>
		display_freq(seg, minuto,hour);
		
		if(but_stop){
			rtc_set_time(RTC, hour, minuto+1, seg);		
  401592:	6822      	ldr	r2, [r4, #0]
  401594:	6833      	ldr	r3, [r6, #0]
  401596:	3201      	adds	r2, #1
  401598:	6829      	ldr	r1, [r5, #0]
  40159a:	4648      	mov	r0, r9
  40159c:	4c27      	ldr	r4, [pc, #156]	; (40163c <main+0xf4>)
  40159e:	47a0      	blx	r4
			but_stop = false;
  4015a0:	2200      	movs	r2, #0
  4015a2:	4b27      	ldr	r3, [pc, #156]	; (401640 <main+0xf8>)
  4015a4:	701a      	strb	r2, [r3, #0]
		rtc_get_time(RTC, &hour, &minuto, &seg);
  4015a6:	4c27      	ldr	r4, [pc, #156]	; (401644 <main+0xfc>)
  4015a8:	4d27      	ldr	r5, [pc, #156]	; (401648 <main+0x100>)
  4015aa:	4633      	mov	r3, r6
  4015ac:	4622      	mov	r2, r4
  4015ae:	4629      	mov	r1, r5
  4015b0:	4648      	mov	r0, r9
  4015b2:	4f26      	ldr	r7, [pc, #152]	; (40164c <main+0x104>)
  4015b4:	47b8      	blx	r7
		delay_ms(100);
  4015b6:	4640      	mov	r0, r8
  4015b8:	4b25      	ldr	r3, [pc, #148]	; (401650 <main+0x108>)
  4015ba:	4798      	blx	r3
		display_freq(seg, minuto,hour);
  4015bc:	682a      	ldr	r2, [r5, #0]
  4015be:	6821      	ldr	r1, [r4, #0]
  4015c0:	6830      	ldr	r0, [r6, #0]
  4015c2:	4b24      	ldr	r3, [pc, #144]	; (401654 <main+0x10c>)
  4015c4:	4798      	blx	r3
		if(but_stop){
  4015c6:	4b1e      	ldr	r3, [pc, #120]	; (401640 <main+0xf8>)
  4015c8:	781b      	ldrb	r3, [r3, #0]
  4015ca:	2b00      	cmp	r3, #0
  4015cc:	d1e1      	bne.n	401592 <main+0x4a>
		}
		else if(but_p_freq){
  4015ce:	4b22      	ldr	r3, [pc, #136]	; (401658 <main+0x110>)
  4015d0:	781b      	ldrb	r3, [r3, #0]
  4015d2:	b983      	cbnz	r3, 4015f6 <main+0xae>
			rtc_set_time(RTC, hour+1, minuto, seg);
			but_p_freq=false;
			
		}
		else if(but_m_freq){
  4015d4:	4b21      	ldr	r3, [pc, #132]	; (40165c <main+0x114>)
  4015d6:	781b      	ldrb	r3, [r3, #0]
  4015d8:	2b00      	cmp	r3, #0
  4015da:	d0e4      	beq.n	4015a6 <main+0x5e>
			rtc_set_time(RTC, hour, minuto, seg+1);
  4015dc:	6833      	ldr	r3, [r6, #0]
  4015de:	3301      	adds	r3, #1
  4015e0:	4a18      	ldr	r2, [pc, #96]	; (401644 <main+0xfc>)
  4015e2:	6812      	ldr	r2, [r2, #0]
  4015e4:	4918      	ldr	r1, [pc, #96]	; (401648 <main+0x100>)
  4015e6:	6809      	ldr	r1, [r1, #0]
  4015e8:	4648      	mov	r0, r9
  4015ea:	4c14      	ldr	r4, [pc, #80]	; (40163c <main+0xf4>)
  4015ec:	47a0      	blx	r4
			but_m_freq=false;
  4015ee:	2200      	movs	r2, #0
  4015f0:	4b1a      	ldr	r3, [pc, #104]	; (40165c <main+0x114>)
  4015f2:	701a      	strb	r2, [r3, #0]
  4015f4:	e7d7      	b.n	4015a6 <main+0x5e>
			rtc_set_time(RTC, hour+1, minuto, seg);
  4015f6:	4b14      	ldr	r3, [pc, #80]	; (401648 <main+0x100>)
  4015f8:	6819      	ldr	r1, [r3, #0]
  4015fa:	6833      	ldr	r3, [r6, #0]
  4015fc:	4a11      	ldr	r2, [pc, #68]	; (401644 <main+0xfc>)
  4015fe:	6812      	ldr	r2, [r2, #0]
  401600:	3101      	adds	r1, #1
  401602:	4648      	mov	r0, r9
  401604:	4c0d      	ldr	r4, [pc, #52]	; (40163c <main+0xf4>)
  401606:	47a0      	blx	r4
			but_p_freq=false;
  401608:	2200      	movs	r2, #0
  40160a:	4b13      	ldr	r3, [pc, #76]	; (401658 <main+0x110>)
  40160c:	701a      	strb	r2, [r3, #0]
  40160e:	e7ca      	b.n	4015a6 <main+0x5e>
  401610:	004012f9 	.word	0x004012f9
  401614:	0040072d 	.word	0x0040072d
  401618:	2040000c 	.word	0x2040000c
  40161c:	004022d8 	.word	0x004022d8
  401620:	00400695 	.word	0x00400695
  401624:	00400a4d 	.word	0x00400a4d
  401628:	400e1850 	.word	0x400e1850
  40162c:	400e1200 	.word	0x400e1200
  401630:	00400c07 	.word	0x00400c07
  401634:	004014d9 	.word	0x004014d9
  401638:	204006e8 	.word	0x204006e8
  40163c:	00400221 	.word	0x00400221
  401640:	204006e0 	.word	0x204006e0
  401644:	204006e4 	.word	0x204006e4
  401648:	204006ec 	.word	0x204006ec
  40164c:	004001c7 	.word	0x004001c7
  401650:	20400001 	.word	0x20400001
  401654:	00401459 	.word	0x00401459
  401658:	204006f1 	.word	0x204006f1
  40165c:	204006f2 	.word	0x204006f2
  401660:	400e1860 	.word	0x400e1860
  401664:	004d2b25 	.word	0x004d2b25

00401668 <__libc_init_array>:
  401668:	b570      	push	{r4, r5, r6, lr}
  40166a:	4e0f      	ldr	r6, [pc, #60]	; (4016a8 <__libc_init_array+0x40>)
  40166c:	4d0f      	ldr	r5, [pc, #60]	; (4016ac <__libc_init_array+0x44>)
  40166e:	1b76      	subs	r6, r6, r5
  401670:	10b6      	asrs	r6, r6, #2
  401672:	bf18      	it	ne
  401674:	2400      	movne	r4, #0
  401676:	d005      	beq.n	401684 <__libc_init_array+0x1c>
  401678:	3401      	adds	r4, #1
  40167a:	f855 3b04 	ldr.w	r3, [r5], #4
  40167e:	4798      	blx	r3
  401680:	42a6      	cmp	r6, r4
  401682:	d1f9      	bne.n	401678 <__libc_init_array+0x10>
  401684:	4e0a      	ldr	r6, [pc, #40]	; (4016b0 <__libc_init_array+0x48>)
  401686:	4d0b      	ldr	r5, [pc, #44]	; (4016b4 <__libc_init_array+0x4c>)
  401688:	1b76      	subs	r6, r6, r5
  40168a:	f000 fe3d 	bl	402308 <_init>
  40168e:	10b6      	asrs	r6, r6, #2
  401690:	bf18      	it	ne
  401692:	2400      	movne	r4, #0
  401694:	d006      	beq.n	4016a4 <__libc_init_array+0x3c>
  401696:	3401      	adds	r4, #1
  401698:	f855 3b04 	ldr.w	r3, [r5], #4
  40169c:	4798      	blx	r3
  40169e:	42a6      	cmp	r6, r4
  4016a0:	d1f9      	bne.n	401696 <__libc_init_array+0x2e>
  4016a2:	bd70      	pop	{r4, r5, r6, pc}
  4016a4:	bd70      	pop	{r4, r5, r6, pc}
  4016a6:	bf00      	nop
  4016a8:	00402314 	.word	0x00402314
  4016ac:	00402314 	.word	0x00402314
  4016b0:	0040231c 	.word	0x0040231c
  4016b4:	00402314 	.word	0x00402314

004016b8 <__itoa>:
  4016b8:	1e93      	subs	r3, r2, #2
  4016ba:	2b22      	cmp	r3, #34	; 0x22
  4016bc:	d810      	bhi.n	4016e0 <__itoa+0x28>
  4016be:	2a0a      	cmp	r2, #10
  4016c0:	b510      	push	{r4, lr}
  4016c2:	d006      	beq.n	4016d2 <__itoa+0x1a>
  4016c4:	2300      	movs	r3, #0
  4016c6:	460c      	mov	r4, r1
  4016c8:	4419      	add	r1, r3
  4016ca:	f000 f80f 	bl	4016ec <__utoa>
  4016ce:	4620      	mov	r0, r4
  4016d0:	bd10      	pop	{r4, pc}
  4016d2:	2800      	cmp	r0, #0
  4016d4:	daf6      	bge.n	4016c4 <__itoa+0xc>
  4016d6:	232d      	movs	r3, #45	; 0x2d
  4016d8:	700b      	strb	r3, [r1, #0]
  4016da:	4240      	negs	r0, r0
  4016dc:	2301      	movs	r3, #1
  4016de:	e7f2      	b.n	4016c6 <__itoa+0xe>
  4016e0:	2000      	movs	r0, #0
  4016e2:	7008      	strb	r0, [r1, #0]
  4016e4:	4770      	bx	lr
  4016e6:	bf00      	nop

004016e8 <itoa>:
  4016e8:	f7ff bfe6 	b.w	4016b8 <__itoa>

004016ec <__utoa>:
  4016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4016ee:	f8df e078 	ldr.w	lr, [pc, #120]	; 401768 <__utoa+0x7c>
  4016f2:	4616      	mov	r6, r2
  4016f4:	4604      	mov	r4, r0
  4016f6:	460f      	mov	r7, r1
  4016f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  4016fc:	b08b      	sub	sp, #44	; 0x2c
  4016fe:	466d      	mov	r5, sp
  401700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401702:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  401706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401708:	e89e 0003 	ldmia.w	lr, {r0, r1}
  40170c:	1eb3      	subs	r3, r6, #2
  40170e:	f845 0b04 	str.w	r0, [r5], #4
  401712:	2b22      	cmp	r3, #34	; 0x22
  401714:	7029      	strb	r1, [r5, #0]
  401716:	d822      	bhi.n	40175e <__utoa+0x72>
  401718:	1e7d      	subs	r5, r7, #1
  40171a:	4628      	mov	r0, r5
  40171c:	2200      	movs	r2, #0
  40171e:	e000      	b.n	401722 <__utoa+0x36>
  401720:	461a      	mov	r2, r3
  401722:	fbb4 f1f6 	udiv	r1, r4, r6
  401726:	ab0a      	add	r3, sp, #40	; 0x28
  401728:	fb06 4411 	mls	r4, r6, r1, r4
  40172c:	4423      	add	r3, r4
  40172e:	460c      	mov	r4, r1
  401730:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  401734:	f800 3f01 	strb.w	r3, [r0, #1]!
  401738:	1c53      	adds	r3, r2, #1
  40173a:	2900      	cmp	r1, #0
  40173c:	d1f0      	bne.n	401720 <__utoa+0x34>
  40173e:	54f9      	strb	r1, [r7, r3]
  401740:	18bb      	adds	r3, r7, r2
  401742:	b14a      	cbz	r2, 401758 <__utoa+0x6c>
  401744:	7819      	ldrb	r1, [r3, #0]
  401746:	7868      	ldrb	r0, [r5, #1]
  401748:	f805 1f01 	strb.w	r1, [r5, #1]!
  40174c:	3401      	adds	r4, #1
  40174e:	1b11      	subs	r1, r2, r4
  401750:	428c      	cmp	r4, r1
  401752:	f803 0901 	strb.w	r0, [r3], #-1
  401756:	dbf5      	blt.n	401744 <__utoa+0x58>
  401758:	4638      	mov	r0, r7
  40175a:	b00b      	add	sp, #44	; 0x2c
  40175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40175e:	2000      	movs	r0, #0
  401760:	7038      	strb	r0, [r7, #0]
  401762:	b00b      	add	sp, #44	; 0x2c
  401764:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401766:	bf00      	nop
  401768:	004022e0 	.word	0x004022e0

0040176c <register_fini>:
  40176c:	4b02      	ldr	r3, [pc, #8]	; (401778 <register_fini+0xc>)
  40176e:	b113      	cbz	r3, 401776 <register_fini+0xa>
  401770:	4802      	ldr	r0, [pc, #8]	; (40177c <register_fini+0x10>)
  401772:	f000 b805 	b.w	401780 <atexit>
  401776:	4770      	bx	lr
  401778:	00000000 	.word	0x00000000
  40177c:	0040178d 	.word	0x0040178d

00401780 <atexit>:
  401780:	2300      	movs	r3, #0
  401782:	4601      	mov	r1, r0
  401784:	461a      	mov	r2, r3
  401786:	4618      	mov	r0, r3
  401788:	f000 b81e 	b.w	4017c8 <__register_exitproc>

0040178c <__libc_fini_array>:
  40178c:	b538      	push	{r3, r4, r5, lr}
  40178e:	4c0a      	ldr	r4, [pc, #40]	; (4017b8 <__libc_fini_array+0x2c>)
  401790:	4d0a      	ldr	r5, [pc, #40]	; (4017bc <__libc_fini_array+0x30>)
  401792:	1b64      	subs	r4, r4, r5
  401794:	10a4      	asrs	r4, r4, #2
  401796:	d00a      	beq.n	4017ae <__libc_fini_array+0x22>
  401798:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40179c:	3b01      	subs	r3, #1
  40179e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4017a2:	3c01      	subs	r4, #1
  4017a4:	f855 3904 	ldr.w	r3, [r5], #-4
  4017a8:	4798      	blx	r3
  4017aa:	2c00      	cmp	r4, #0
  4017ac:	d1f9      	bne.n	4017a2 <__libc_fini_array+0x16>
  4017ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4017b2:	f000 bdb3 	b.w	40231c <_fini>
  4017b6:	bf00      	nop
  4017b8:	0040232c 	.word	0x0040232c
  4017bc:	00402328 	.word	0x00402328

004017c0 <__retarget_lock_acquire_recursive>:
  4017c0:	4770      	bx	lr
  4017c2:	bf00      	nop

004017c4 <__retarget_lock_release_recursive>:
  4017c4:	4770      	bx	lr
  4017c6:	bf00      	nop

004017c8 <__register_exitproc>:
  4017c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4017cc:	4d2c      	ldr	r5, [pc, #176]	; (401880 <__register_exitproc+0xb8>)
  4017ce:	4606      	mov	r6, r0
  4017d0:	6828      	ldr	r0, [r5, #0]
  4017d2:	4698      	mov	r8, r3
  4017d4:	460f      	mov	r7, r1
  4017d6:	4691      	mov	r9, r2
  4017d8:	f7ff fff2 	bl	4017c0 <__retarget_lock_acquire_recursive>
  4017dc:	4b29      	ldr	r3, [pc, #164]	; (401884 <__register_exitproc+0xbc>)
  4017de:	681c      	ldr	r4, [r3, #0]
  4017e0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4017e4:	2b00      	cmp	r3, #0
  4017e6:	d03e      	beq.n	401866 <__register_exitproc+0x9e>
  4017e8:	685a      	ldr	r2, [r3, #4]
  4017ea:	2a1f      	cmp	r2, #31
  4017ec:	dc1c      	bgt.n	401828 <__register_exitproc+0x60>
  4017ee:	f102 0e01 	add.w	lr, r2, #1
  4017f2:	b176      	cbz	r6, 401812 <__register_exitproc+0x4a>
  4017f4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4017f8:	2401      	movs	r4, #1
  4017fa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4017fe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401802:	4094      	lsls	r4, r2
  401804:	4320      	orrs	r0, r4
  401806:	2e02      	cmp	r6, #2
  401808:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40180c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401810:	d023      	beq.n	40185a <__register_exitproc+0x92>
  401812:	3202      	adds	r2, #2
  401814:	f8c3 e004 	str.w	lr, [r3, #4]
  401818:	6828      	ldr	r0, [r5, #0]
  40181a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40181e:	f7ff ffd1 	bl	4017c4 <__retarget_lock_release_recursive>
  401822:	2000      	movs	r0, #0
  401824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401828:	4b17      	ldr	r3, [pc, #92]	; (401888 <__register_exitproc+0xc0>)
  40182a:	b30b      	cbz	r3, 401870 <__register_exitproc+0xa8>
  40182c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401830:	f3af 8000 	nop.w
  401834:	4603      	mov	r3, r0
  401836:	b1d8      	cbz	r0, 401870 <__register_exitproc+0xa8>
  401838:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40183c:	6002      	str	r2, [r0, #0]
  40183e:	2100      	movs	r1, #0
  401840:	6041      	str	r1, [r0, #4]
  401842:	460a      	mov	r2, r1
  401844:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401848:	f04f 0e01 	mov.w	lr, #1
  40184c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401850:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401854:	2e00      	cmp	r6, #0
  401856:	d0dc      	beq.n	401812 <__register_exitproc+0x4a>
  401858:	e7cc      	b.n	4017f4 <__register_exitproc+0x2c>
  40185a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40185e:	430c      	orrs	r4, r1
  401860:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401864:	e7d5      	b.n	401812 <__register_exitproc+0x4a>
  401866:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40186a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40186e:	e7bb      	b.n	4017e8 <__register_exitproc+0x20>
  401870:	6828      	ldr	r0, [r5, #0]
  401872:	f7ff ffa7 	bl	4017c4 <__retarget_lock_release_recursive>
  401876:	f04f 30ff 	mov.w	r0, #4294967295
  40187a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40187e:	bf00      	nop
  401880:	20400448 	.word	0x20400448
  401884:	004022dc 	.word	0x004022dc
  401888:	00000000 	.word	0x00000000

0040188c <sysfont_glyphs>:
	...
  4018ac:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  4018bc:	00000030 00000000 00000000 006c006c     0...........l.l.
  4018cc:	006c006c 00000000 00000000 00000000     l.l.............
	...
  4018e4:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  4018f4:	00000028 00000000 00000000 003c0010     (.............<.
  401904:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  40191c:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  40192c:	00000088 00000000 00000000 00900060     ............`...
  40193c:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  401954:	00100010 00000010 00000000 00000000     ................
	...
  401970:	00100008 00200020 00200020 00200020     .... . . . . . .
  401980:	00080010 00000000 00000000 00100020     ............ ...
  401990:	00080008 00080008 00080008 00200010     .............. .
  4019a0:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  4019c8:	00100010 00fe0010 00100010 00000010     ................
	...
  4019f0:	00300010 00000020 00000000 00000000     ..0. ...........
  401a00:	00000000 007c0000 00000000 00000000     ......|.........
	...
  401a24:	00300000 00000030 00000000 00000000     ..0.0...........
  401a34:	00080000 00100008 00200010 00400020     .......... . .@.
  401a44:	00000040 00000000 00000000 00780000     @.............x.
  401a54:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  401a6c:	00100000 00500030 00100010 00100010     ....0.P.........
  401a7c:	0000007c 00000000 00000000 00700000     |.............p.
  401a8c:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  401aa4:	00700000 00080088 00080030 00880008     ..p.....0.......
  401ab4:	00000070 00000000 00000000 00080000     p...............
  401ac4:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  401adc:	00780000 00800080 000800f0 00080008     ..x.............
  401aec:	000000f0 00000000 00000000 00300000     ..............0.
  401afc:	00800040 008800f0 00880088 00000070     @...........p...
	...
  401b14:	00f80000 00100008 00200010 00400020     .......... . .@.
  401b24:	00000040 00000000 00000000 00700000     @.............p.
  401b34:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  401b4c:	00700000 00880088 00780088 00100008     ..p.......x.....
  401b5c:	00000060 00000000 00000000 00000000     `...............
  401b6c:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  401b88:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  401b98:	00000040 00000000 00000000 00100008     @...............
  401ba8:	00400020 00100020 00000008 00000000      .@. ...........
	...
  401bc4:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  401bdc:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  401bf4:	00300000 00080048 00200010 00000000     ..0.H..... .....
  401c04:	00000020 00000000 00000000 00000000      ...............
  401c14:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  401c2c:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  401c3c:	00000044 00000000 00000000 00f80000     D...............
  401c4c:	00840084 008400f8 00840084 000000f8     ................
	...
  401c64:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  401c74:	0000003c 00000000 00000000 00f00000     <...............
  401c84:	00840088 00840084 00880084 000000f0     ................
	...
  401c9c:	00f80000 00800080 008000f0 00800080     ................
  401cac:	000000f8 00000000 00000000 00f80000     ................
  401cbc:	00800080 008000f8 00800080 00000080     ................
	...
  401cd4:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  401ce4:	00000038 00000000 00000000 00880000     8...............
  401cf4:	00880088 008800f8 00880088 00000088     ................
	...
  401d0c:	00f80000 00200020 00200020 00200020     .... . . . . . .
  401d1c:	000000f8 00000000 00000000 00f80000     ................
  401d2c:	00080008 00080008 00080008 000000f0     ................
	...
  401d44:	00840000 00900088 00d000a0 00840088     ................
  401d54:	00000084 00000000 00000000 00800000     ................
  401d64:	00800080 00800080 00800080 000000fc     ................
	...
  401d7c:	00840000 00cc00cc 00b400b4 00840084     ................
  401d8c:	00000084 00000000 00000000 00840000     ................
  401d9c:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  401db4:	00780000 00840084 00840084 00840084     ..x.............
  401dc4:	00000078 00000000 00000000 00f80000     x...............
  401dd4:	00840084 00f80084 00800080 00000080     ................
	...
  401dec:	00780000 00840084 00840084 00840084     ..x.............
  401dfc:	00200078 00000018 00000000 00f80000     x. .............
  401e0c:	00840084 00f80084 00840088 00000084     ................
	...
  401e24:	007c0000 00800080 00180060 00040004     ..|.....`.......
  401e34:	000000f8 00000000 00000000 00f80000     ................
  401e44:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  401e5c:	00840000 00840084 00840084 00840084     ................
  401e6c:	00000078 00000000 00000000 00840000     x...............
  401e7c:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  401e94:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  401ea4:	00000050 00000000 00000000 00880000     P...............
  401eb4:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  401ecc:	00880000 00880088 00500050 00200020     ........P.P. . .
  401edc:	00000020 00000000 00000000 00fc0000      ...............
  401eec:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  401f04:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  401f14:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  401f24:	00200020 00100020 00100010 00080008      . . ...........
	...
  401f3c:	00080038 00080008 00080008 00080008     8...............
  401f4c:	00080008 00000038 00000000 00280010     ....8.........(.
  401f5c:	00000044 00000000 00000000 00000000     D...............
	...
  401f84:	00000038 00000000 00000000 00200000     8............. .
  401f94:	00000010 00000000 00000000 00000000     ................
	...
  401fb0:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  401fc8:	00800080 00f80080 00840084 00840084     ................
  401fd8:	000000f8 00000000 00000000 00000000     ................
  401fe8:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  402000:	00040004 007c0004 00840084 008c0084     ......|.........
  402010:	00000074 00000000 00000000 00000000     t...............
  402020:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  402038:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  402048:	000000fc 00000000 00000000 00000000     ................
  402058:	007c0000 00840084 00840084 0004007c     ..|.........|...
  402068:	00000078 00000000 00800080 00b80080     x...............
  402078:	008400c4 00840084 00000084 00000000     ................
  402088:	00000000 00100000 00700000 00100010     ..........p.....
  402098:	00100010 0000007c 00000000 00000000     ....|...........
  4020a8:	00080000 00780000 00080008 00080008     ......x.........
  4020b8:	00080008 00700008 00000000 00800080     ......p.........
  4020c8:	00880080 00a00090 008800d0 00000088     ................
	...
  4020e0:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  4020f0:	000000f8 00000000 00000000 00000000     ................
  402100:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  40211c:	00b80000 008400c4 00840084 00000084     ................
	...
  402138:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  402154:	00b80000 008400c4 00840084 008000f8     ................
  402164:	00000080 00000000 00000000 007c0000     ..............|.
  402174:	00840084 00840084 0004007c 00000004     ........|.......
	...
  40218c:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  4021a8:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  4021c4:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  4021e0:	00880000 00880088 00880088 0000007c     ............|...
	...
  4021fc:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  402218:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  402234:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  402250:	00840000 00480084 00300048 00200010     ......H.H.0... .
  402260:	00000040 00000000 00000000 00f80000     @...............
  402270:	00100008 00400020 000000f8 00000000     .... .@.........
  402280:	00000000 00200010 00100020 00200020     ...... . ... . .
  402290:	00200010 00100020 00000000 00000000     .. . ...........
  4022a0:	00100010 00100010 00000000 00100010     ................
  4022b0:	00100010 00000000 00000000 00100020     ............ ...
  4022c0:	00200010 00100010 00100020 00200010     .. ..... ..... .
  4022d0:	00000000 00002020 0000003a              ....  ..:...

004022dc <_global_impure_ptr>:
  4022dc:	20400020 33323130 37363534 62613938      .@ 0123456789ab
  4022ec:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
  4022fc:	76757473 7a797877 00000000              stuvwxyz....

00402308 <_init>:
  402308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40230a:	bf00      	nop
  40230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40230e:	bc08      	pop	{r3}
  402310:	469e      	mov	lr, r3
  402312:	4770      	bx	lr

00402314 <__init_array_start>:
  402314:	0040176d 	.word	0x0040176d

00402318 <__frame_dummy_init_array_entry>:
  402318:	00400165                                e.@.

0040231c <_fini>:
  40231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40231e:	bf00      	nop
  402320:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402322:	bc08      	pop	{r3}
  402324:	469e      	mov	lr, r3
  402326:	4770      	bx	lr

00402328 <__fini_array_start>:
  402328:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 188c 0040 0e0a 7d20               ......@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	06f4 2040                                   ..@ 
