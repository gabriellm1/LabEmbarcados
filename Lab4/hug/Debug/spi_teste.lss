
spi_teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002574  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20400000  00402574  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002d0  2040044c  004029c0  0002044c  2**2
                  ALLOC
  3 .stack        00002004  2040071c  00402c90  0002044c  2**0
                  ALLOC
  4 .heap         00000200  20402720  00404c94  0002044c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  7 .debug_info   000185d9  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003630  00000000  00000000  00038aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005b48  00000000  00000000  0003c0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008e8  00000000  00000000  00041c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000948  00000000  00000000  0004250c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00021272  00000000  00000000  00042e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ebc4  00000000  00000000  000640c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008fc31  00000000  00000000  00072c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001600  00000000  00000000  001028bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	20 27 40 20 19 12 40 00 15 12 40 00 15 12 40 00      '@ ..@...@...@.
  400010:	15 12 40 00 15 12 40 00 15 12 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	15 12 40 00 15 12 40 00 00 00 00 00 15 12 40 00     ..@...@.......@.
  40003c:	15 12 40 00 15 12 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  40004c:	15 12 40 00 15 12 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  40005c:	15 12 40 00 15 12 40 00 00 00 00 00 79 0d 40 00     ..@...@.....y.@.
  40006c:	8d 0d 40 00 a1 0d 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  40007c:	15 12 40 00 b5 0d 40 00 c9 0d 40 00 15 12 40 00     ..@...@...@...@.
  40008c:	15 12 40 00 15 12 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  40009c:	15 12 40 00 a9 14 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  4000ac:	15 12 40 00 15 12 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  4000bc:	15 12 40 00 15 12 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  4000cc:	15 12 40 00 00 00 00 00 15 12 40 00 00 00 00 00     ..@.......@.....
  4000dc:	15 12 40 00 15 12 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  4000ec:	15 12 40 00 15 12 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  4000fc:	15 12 40 00 15 12 40 00 15 12 40 00 15 12 40 00     ..@...@...@...@.
  40010c:	15 12 40 00 15 12 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 15 12 40 00 15 12 40 00 15 12 40 00     ......@...@...@.
  40012c:	15 12 40 00 15 12 40 00 00 00 00 00 15 12 40 00     ..@...@.......@.
  40013c:	15 12 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	00402574 	.word	0x00402574

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402574 	.word	0x00402574
  4001a0:	20400450 	.word	0x20400450
  4001a4:	00402574 	.word	0x00402574
  4001a8:	00000000 	.word	0x00000000

004001ac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001ac:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <spi_enable_clock+0x20>)
  4001b0:	4298      	cmp	r0, r3
  4001b2:	d003      	beq.n	4001bc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4001b4:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <spi_enable_clock+0x24>)
  4001b6:	4298      	cmp	r0, r3
  4001b8:	d004      	beq.n	4001c4 <spi_enable_clock+0x18>
  4001ba:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001bc:	2015      	movs	r0, #21
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <spi_enable_clock+0x28>)
  4001c0:	4798      	blx	r3
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	202a      	movs	r0, #42	; 0x2a
  4001c6:	4b03      	ldr	r3, [pc, #12]	; (4001d4 <spi_enable_clock+0x28>)
  4001c8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4001ca:	e7f6      	b.n	4001ba <spi_enable_clock+0xe>
  4001cc:	40008000 	.word	0x40008000
  4001d0:	40058000 	.word	0x40058000
  4001d4:	00400efd 	.word	0x00400efd

004001d8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4001d8:	6843      	ldr	r3, [r0, #4]
  4001da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4001de:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4001e0:	6843      	ldr	r3, [r0, #4]
  4001e2:	0409      	lsls	r1, r1, #16
  4001e4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4001e8:	4319      	orrs	r1, r3
  4001ea:	6041      	str	r1, [r0, #4]
  4001ec:	4770      	bx	lr

004001ee <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4001ee:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4001f0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4001f4:	6905      	ldr	r5, [r0, #16]
  4001f6:	f015 0f02 	tst.w	r5, #2
  4001fa:	d103      	bne.n	400204 <spi_write+0x16>
		if (!timeout--) {
  4001fc:	3c01      	subs	r4, #1
  4001fe:	d1f9      	bne.n	4001f4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400200:	2001      	movs	r0, #1
  400202:	e00c      	b.n	40021e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400204:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400206:	f014 0f02 	tst.w	r4, #2
  40020a:	d006      	beq.n	40021a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40020c:	0412      	lsls	r2, r2, #16
  40020e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400212:	4311      	orrs	r1, r2
		if (uc_last) {
  400214:	b10b      	cbz	r3, 40021a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400216:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40021a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40021c:	2000      	movs	r0, #0
}
  40021e:	bc30      	pop	{r4, r5}
  400220:	4770      	bx	lr

00400222 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400222:	b932      	cbnz	r2, 400232 <spi_set_clock_polarity+0x10>
  400224:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400228:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40022a:	f023 0301 	bic.w	r3, r3, #1
  40022e:	6303      	str	r3, [r0, #48]	; 0x30
  400230:	4770      	bx	lr
  400232:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400236:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400238:	f043 0301 	orr.w	r3, r3, #1
  40023c:	6303      	str	r3, [r0, #48]	; 0x30
  40023e:	4770      	bx	lr

00400240 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400240:	b932      	cbnz	r2, 400250 <spi_set_clock_phase+0x10>
  400242:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400246:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400248:	f023 0302 	bic.w	r3, r3, #2
  40024c:	6303      	str	r3, [r0, #48]	; 0x30
  40024e:	4770      	bx	lr
  400250:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400254:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400256:	f043 0302 	orr.w	r3, r3, #2
  40025a:	6303      	str	r3, [r0, #48]	; 0x30
  40025c:	4770      	bx	lr

0040025e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40025e:	2a04      	cmp	r2, #4
  400260:	d003      	beq.n	40026a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400262:	b16a      	cbz	r2, 400280 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400264:	2a08      	cmp	r2, #8
  400266:	d016      	beq.n	400296 <spi_configure_cs_behavior+0x38>
  400268:	4770      	bx	lr
  40026a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40026e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400270:	f023 0308 	bic.w	r3, r3, #8
  400274:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400276:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400278:	f043 0304 	orr.w	r3, r3, #4
  40027c:	6303      	str	r3, [r0, #48]	; 0x30
  40027e:	4770      	bx	lr
  400280:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400284:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400286:	f023 0308 	bic.w	r3, r3, #8
  40028a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40028c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40028e:	f023 0304 	bic.w	r3, r3, #4
  400292:	6303      	str	r3, [r0, #48]	; 0x30
  400294:	4770      	bx	lr
  400296:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40029a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40029c:	f043 0308 	orr.w	r3, r3, #8
  4002a0:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4002a2:	e7e1      	b.n	400268 <spi_configure_cs_behavior+0xa>

004002a4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4002a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4002a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4002ae:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4002b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002b2:	431a      	orrs	r2, r3
  4002b4:	630a      	str	r2, [r1, #48]	; 0x30
  4002b6:	4770      	bx	lr

004002b8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4002b8:	1e43      	subs	r3, r0, #1
  4002ba:	4419      	add	r1, r3
  4002bc:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4002c0:	1e43      	subs	r3, r0, #1
  4002c2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4002c4:	bf94      	ite	ls
  4002c6:	b200      	sxthls	r0, r0
		return -1;
  4002c8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4002cc:	4770      	bx	lr

004002ce <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4002ce:	b17a      	cbz	r2, 4002f0 <spi_set_baudrate_div+0x22>
{
  4002d0:	b410      	push	{r4}
  4002d2:	4614      	mov	r4, r2
  4002d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4002d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4002de:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4002e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4002e2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4002e6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4002e8:	2000      	movs	r0, #0
}
  4002ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002ee:	4770      	bx	lr
        return -1;
  4002f0:	f04f 30ff 	mov.w	r0, #4294967295
  4002f4:	4770      	bx	lr

004002f6 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4002f6:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4002f8:	0189      	lsls	r1, r1, #6
  4002fa:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4002fc:	2402      	movs	r4, #2
  4002fe:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400300:	f04f 31ff 	mov.w	r1, #4294967295
  400304:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400306:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400308:	605a      	str	r2, [r3, #4]
}
  40030a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40030e:	4770      	bx	lr

00400310 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400310:	0189      	lsls	r1, r1, #6
  400312:	2305      	movs	r3, #5
  400314:	5043      	str	r3, [r0, r1]
  400316:	4770      	bx	lr

00400318 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400318:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40031c:	61ca      	str	r2, [r1, #28]
  40031e:	4770      	bx	lr

00400320 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400320:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400324:	624a      	str	r2, [r1, #36]	; 0x24
  400326:	4770      	bx	lr

00400328 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400328:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40032c:	6a08      	ldr	r0, [r1, #32]
}
  40032e:	4770      	bx	lr

00400330 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400330:	b4f0      	push	{r4, r5, r6, r7}
  400332:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400334:	2402      	movs	r4, #2
  400336:	9401      	str	r4, [sp, #4]
  400338:	2408      	movs	r4, #8
  40033a:	9402      	str	r4, [sp, #8]
  40033c:	2420      	movs	r4, #32
  40033e:	9403      	str	r4, [sp, #12]
  400340:	2480      	movs	r4, #128	; 0x80
  400342:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400344:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400346:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400348:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40034a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40034e:	d814      	bhi.n	40037a <tc_find_mck_divisor+0x4a>
  400350:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400352:	42a0      	cmp	r0, r4
  400354:	d217      	bcs.n	400386 <tc_find_mck_divisor+0x56>
  400356:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400358:	af01      	add	r7, sp, #4
  40035a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40035e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400362:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400364:	4284      	cmp	r4, r0
  400366:	d30a      	bcc.n	40037e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400368:	4286      	cmp	r6, r0
  40036a:	d90d      	bls.n	400388 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40036c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40036e:	2d05      	cmp	r5, #5
  400370:	d1f3      	bne.n	40035a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400372:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400374:	b006      	add	sp, #24
  400376:	bcf0      	pop	{r4, r5, r6, r7}
  400378:	4770      	bx	lr
			return 0;
  40037a:	2000      	movs	r0, #0
  40037c:	e7fa      	b.n	400374 <tc_find_mck_divisor+0x44>
  40037e:	2000      	movs	r0, #0
  400380:	e7f8      	b.n	400374 <tc_find_mck_divisor+0x44>
	return 1;
  400382:	2001      	movs	r0, #1
  400384:	e7f6      	b.n	400374 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400386:	2500      	movs	r5, #0
	if (p_uldiv) {
  400388:	b12a      	cbz	r2, 400396 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40038a:	a906      	add	r1, sp, #24
  40038c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400390:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400394:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400396:	2b00      	cmp	r3, #0
  400398:	d0f3      	beq.n	400382 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40039a:	601d      	str	r5, [r3, #0]
	return 1;
  40039c:	2001      	movs	r0, #1
  40039e:	e7e9      	b.n	400374 <tc_find_mck_divisor+0x44>

004003a0 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4003a0:	4b01      	ldr	r3, [pc, #4]	; (4003a8 <gfx_mono_set_framebuffer+0x8>)
  4003a2:	6018      	str	r0, [r3, #0]
  4003a4:	4770      	bx	lr
  4003a6:	bf00      	nop
  4003a8:	20400468 	.word	0x20400468

004003ac <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4003ac:	4b02      	ldr	r3, [pc, #8]	; (4003b8 <gfx_mono_framebuffer_put_byte+0xc>)
  4003ae:	681b      	ldr	r3, [r3, #0]
  4003b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4003b4:	5442      	strb	r2, [r0, r1]
  4003b6:	4770      	bx	lr
  4003b8:	20400468 	.word	0x20400468

004003bc <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4003bc:	4b02      	ldr	r3, [pc, #8]	; (4003c8 <gfx_mono_framebuffer_get_byte+0xc>)
  4003be:	681b      	ldr	r3, [r3, #0]
  4003c0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4003c4:	5c40      	ldrb	r0, [r0, r1]
  4003c6:	4770      	bx	lr
  4003c8:	20400468 	.word	0x20400468

004003cc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4003cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4003d0:	1884      	adds	r4, r0, r2
  4003d2:	2c80      	cmp	r4, #128	; 0x80
  4003d4:	dd02      	ble.n	4003dc <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4003d6:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4003da:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4003dc:	b322      	cbz	r2, 400428 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4003de:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4003e0:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4003e4:	2601      	movs	r6, #1
  4003e6:	fa06 f101 	lsl.w	r1, r6, r1
  4003ea:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4003ec:	2b01      	cmp	r3, #1
  4003ee:	d01d      	beq.n	40042c <gfx_mono_generic_draw_horizontal_line+0x60>
  4003f0:	2b00      	cmp	r3, #0
  4003f2:	d035      	beq.n	400460 <gfx_mono_generic_draw_horizontal_line+0x94>
  4003f4:	2b02      	cmp	r3, #2
  4003f6:	d117      	bne.n	400428 <gfx_mono_generic_draw_horizontal_line+0x5c>
  4003f8:	3801      	subs	r0, #1
  4003fa:	b2c7      	uxtb	r7, r0
  4003fc:	19d4      	adds	r4, r2, r7
  4003fe:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400400:	f8df a090 	ldr.w	sl, [pc, #144]	; 400494 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400404:	f04f 0900 	mov.w	r9, #0
  400408:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400498 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40040c:	4621      	mov	r1, r4
  40040e:	4628      	mov	r0, r5
  400410:	47d0      	blx	sl
			temp ^= pixelmask;
  400412:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400416:	464b      	mov	r3, r9
  400418:	b2d2      	uxtb	r2, r2
  40041a:	4621      	mov	r1, r4
  40041c:	4628      	mov	r0, r5
  40041e:	47c0      	blx	r8
  400420:	3c01      	subs	r4, #1
  400422:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400424:	42bc      	cmp	r4, r7
  400426:	d1f1      	bne.n	40040c <gfx_mono_generic_draw_horizontal_line+0x40>
  400428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40042c:	3801      	subs	r0, #1
  40042e:	b2c7      	uxtb	r7, r0
  400430:	19d4      	adds	r4, r2, r7
  400432:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400434:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400494 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400438:	f04f 0900 	mov.w	r9, #0
  40043c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400498 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400440:	4621      	mov	r1, r4
  400442:	4628      	mov	r0, r5
  400444:	47d0      	blx	sl
			temp |= pixelmask;
  400446:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40044a:	464b      	mov	r3, r9
  40044c:	b2d2      	uxtb	r2, r2
  40044e:	4621      	mov	r1, r4
  400450:	4628      	mov	r0, r5
  400452:	47c0      	blx	r8
  400454:	3c01      	subs	r4, #1
  400456:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400458:	42bc      	cmp	r4, r7
  40045a:	d1f1      	bne.n	400440 <gfx_mono_generic_draw_horizontal_line+0x74>
  40045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400460:	3801      	subs	r0, #1
  400462:	b2c7      	uxtb	r7, r0
  400464:	19d4      	adds	r4, r2, r7
  400466:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400468:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400494 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  40046c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40046e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400498 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400472:	4621      	mov	r1, r4
  400474:	4628      	mov	r0, r5
  400476:	47c0      	blx	r8
			temp &= ~pixelmask;
  400478:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40047c:	2300      	movs	r3, #0
  40047e:	b2d2      	uxtb	r2, r2
  400480:	4621      	mov	r1, r4
  400482:	4628      	mov	r0, r5
  400484:	47c8      	blx	r9
  400486:	3c01      	subs	r4, #1
  400488:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40048a:	42bc      	cmp	r4, r7
  40048c:	d1f1      	bne.n	400472 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400492:	bf00      	nop
  400494:	004006cd 	.word	0x004006cd
  400498:	004005c9 	.word	0x004005c9

0040049c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4004a0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4004a4:	b18b      	cbz	r3, 4004ca <gfx_mono_generic_draw_filled_rect+0x2e>
  4004a6:	461c      	mov	r4, r3
  4004a8:	4690      	mov	r8, r2
  4004aa:	4606      	mov	r6, r0
  4004ac:	1e4d      	subs	r5, r1, #1
  4004ae:	b2ed      	uxtb	r5, r5
  4004b0:	442c      	add	r4, r5
  4004b2:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4004b4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4004d0 <gfx_mono_generic_draw_filled_rect+0x34>
  4004b8:	463b      	mov	r3, r7
  4004ba:	4642      	mov	r2, r8
  4004bc:	4621      	mov	r1, r4
  4004be:	4630      	mov	r0, r6
  4004c0:	47c8      	blx	r9
  4004c2:	3c01      	subs	r4, #1
  4004c4:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4004c6:	42ac      	cmp	r4, r5
  4004c8:	d1f6      	bne.n	4004b8 <gfx_mono_generic_draw_filled_rect+0x1c>
  4004ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4004ce:	bf00      	nop
  4004d0:	004003cd 	.word	0x004003cd

004004d4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4004d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004d8:	b083      	sub	sp, #12
  4004da:	4604      	mov	r4, r0
  4004dc:	4688      	mov	r8, r1
  4004de:	4691      	mov	r9, r2
  4004e0:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4004e2:	7a5b      	ldrb	r3, [r3, #9]
  4004e4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4004e8:	2100      	movs	r1, #0
  4004ea:	9100      	str	r1, [sp, #0]
  4004ec:	4649      	mov	r1, r9
  4004ee:	4640      	mov	r0, r8
  4004f0:	4d21      	ldr	r5, [pc, #132]	; (400578 <gfx_mono_draw_char+0xa4>)
  4004f2:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4004f4:	f89b 3000 	ldrb.w	r3, [fp]
  4004f8:	b113      	cbz	r3, 400500 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4004fa:	b003      	add	sp, #12
  4004fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400500:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400504:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400506:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40050a:	bf18      	it	ne
  40050c:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  40050e:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400512:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400516:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400518:	fb17 f70a 	smulbb	r7, r7, sl
  40051c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400520:	f8db 3004 	ldr.w	r3, [fp, #4]
  400524:	fa13 f787 	uxtah	r7, r3, r7
  400528:	e01f      	b.n	40056a <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40052a:	0064      	lsls	r4, r4, #1
  40052c:	b2e4      	uxtb	r4, r4
  40052e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400530:	b2eb      	uxtb	r3, r5
  400532:	429e      	cmp	r6, r3
  400534:	d910      	bls.n	400558 <gfx_mono_draw_char+0x84>
  400536:	b2eb      	uxtb	r3, r5
  400538:	eb08 0003 	add.w	r0, r8, r3
  40053c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  40053e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400542:	bf08      	it	eq
  400544:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400548:	f014 0f80 	tst.w	r4, #128	; 0x80
  40054c:	d0ed      	beq.n	40052a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  40054e:	2201      	movs	r2, #1
  400550:	4649      	mov	r1, r9
  400552:	4b0a      	ldr	r3, [pc, #40]	; (40057c <gfx_mono_draw_char+0xa8>)
  400554:	4798      	blx	r3
  400556:	e7e8      	b.n	40052a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400558:	f109 0901 	add.w	r9, r9, #1
  40055c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400560:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400564:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400568:	d0c7      	beq.n	4004fa <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40056a:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  40056e:	2e00      	cmp	r6, #0
  400570:	d0f2      	beq.n	400558 <gfx_mono_draw_char+0x84>
  400572:	2500      	movs	r5, #0
  400574:	462c      	mov	r4, r5
  400576:	e7de      	b.n	400536 <gfx_mono_draw_char+0x62>
  400578:	0040049d 	.word	0x0040049d
  40057c:	00400669 	.word	0x00400669

00400580 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400584:	4604      	mov	r4, r0
  400586:	4690      	mov	r8, r2
  400588:	461d      	mov	r5, r3
  40058a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  40058c:	4f0d      	ldr	r7, [pc, #52]	; (4005c4 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40058e:	460e      	mov	r6, r1
  400590:	e008      	b.n	4005a4 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400592:	7a6a      	ldrb	r2, [r5, #9]
  400594:	3201      	adds	r2, #1
  400596:	4442      	add	r2, r8
  400598:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  40059c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  40059e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4005a2:	b16b      	cbz	r3, 4005c0 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4005a4:	7820      	ldrb	r0, [r4, #0]
  4005a6:	280a      	cmp	r0, #10
  4005a8:	d0f3      	beq.n	400592 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4005aa:	280d      	cmp	r0, #13
  4005ac:	d0f7      	beq.n	40059e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4005ae:	462b      	mov	r3, r5
  4005b0:	4642      	mov	r2, r8
  4005b2:	4649      	mov	r1, r9
  4005b4:	47b8      	blx	r7
			x += font->width;
  4005b6:	7a2b      	ldrb	r3, [r5, #8]
  4005b8:	4499      	add	r9, r3
  4005ba:	fa5f f989 	uxtb.w	r9, r9
  4005be:	e7ee      	b.n	40059e <gfx_mono_draw_string+0x1e>
}
  4005c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4005c4:	004004d5 	.word	0x004004d5

004005c8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4005c8:	b570      	push	{r4, r5, r6, lr}
  4005ca:	4604      	mov	r4, r0
  4005cc:	460d      	mov	r5, r1
  4005ce:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4005d0:	b91b      	cbnz	r3, 4005da <gfx_mono_ssd1306_put_byte+0x12>
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <gfx_mono_ssd1306_put_byte+0x40>)
  4005d4:	4798      	blx	r3
  4005d6:	42b0      	cmp	r0, r6
  4005d8:	d015      	beq.n	400606 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4005da:	4632      	mov	r2, r6
  4005dc:	4629      	mov	r1, r5
  4005de:	4620      	mov	r0, r4
  4005e0:	4b0a      	ldr	r3, [pc, #40]	; (40060c <gfx_mono_ssd1306_put_byte+0x44>)
  4005e2:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4005e4:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4005e8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4005ec:	4c08      	ldr	r4, [pc, #32]	; (400610 <gfx_mono_ssd1306_put_byte+0x48>)
  4005ee:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4005f0:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4005f4:	f040 0010 	orr.w	r0, r0, #16
  4005f8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4005fa:	f005 000f 	and.w	r0, r5, #15
  4005fe:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400600:	4630      	mov	r0, r6
  400602:	4b04      	ldr	r3, [pc, #16]	; (400614 <gfx_mono_ssd1306_put_byte+0x4c>)
  400604:	4798      	blx	r3
  400606:	bd70      	pop	{r4, r5, r6, pc}
  400608:	004003bd 	.word	0x004003bd
  40060c:	004003ad 	.word	0x004003ad
  400610:	004006d9 	.word	0x004006d9
  400614:	004008f9 	.word	0x004008f9

00400618 <gfx_mono_ssd1306_init>:
{
  400618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  40061c:	480d      	ldr	r0, [pc, #52]	; (400654 <gfx_mono_ssd1306_init+0x3c>)
  40061e:	4b0e      	ldr	r3, [pc, #56]	; (400658 <gfx_mono_ssd1306_init+0x40>)
  400620:	4798      	blx	r3
	ssd1306_init();
  400622:	4b0e      	ldr	r3, [pc, #56]	; (40065c <gfx_mono_ssd1306_init+0x44>)
  400624:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400626:	2040      	movs	r0, #64	; 0x40
  400628:	4b0d      	ldr	r3, [pc, #52]	; (400660 <gfx_mono_ssd1306_init+0x48>)
  40062a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40062c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40062e:	f04f 0801 	mov.w	r8, #1
  400632:	462f      	mov	r7, r5
  400634:	4e0b      	ldr	r6, [pc, #44]	; (400664 <gfx_mono_ssd1306_init+0x4c>)
{
  400636:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400638:	4643      	mov	r3, r8
  40063a:	463a      	mov	r2, r7
  40063c:	b2e1      	uxtb	r1, r4
  40063e:	4628      	mov	r0, r5
  400640:	47b0      	blx	r6
  400642:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400644:	2c80      	cmp	r4, #128	; 0x80
  400646:	d1f7      	bne.n	400638 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400648:	3501      	adds	r5, #1
  40064a:	b2ed      	uxtb	r5, r5
  40064c:	2d04      	cmp	r5, #4
  40064e:	d1f2      	bne.n	400636 <gfx_mono_ssd1306_init+0x1e>
  400650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400654:	2040046c 	.word	0x2040046c
  400658:	004003a1 	.word	0x004003a1
  40065c:	00400719 	.word	0x00400719
  400660:	004006d9 	.word	0x004006d9
  400664:	004005c9 	.word	0x004005c9

00400668 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400668:	09c3      	lsrs	r3, r0, #7
  40066a:	d12a      	bne.n	4006c2 <gfx_mono_ssd1306_draw_pixel+0x5a>
  40066c:	291f      	cmp	r1, #31
  40066e:	d828      	bhi.n	4006c2 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400674:	4614      	mov	r4, r2
  400676:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400678:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  40067a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  40067e:	2201      	movs	r2, #1
  400680:	fa02 f701 	lsl.w	r7, r2, r1
  400684:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400688:	4601      	mov	r1, r0
  40068a:	4630      	mov	r0, r6
  40068c:	4b0d      	ldr	r3, [pc, #52]	; (4006c4 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  40068e:	4798      	blx	r3
  400690:	4602      	mov	r2, r0
	switch (color) {
  400692:	2c01      	cmp	r4, #1
  400694:	d009      	beq.n	4006aa <gfx_mono_ssd1306_draw_pixel+0x42>
  400696:	b164      	cbz	r4, 4006b2 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400698:	2c02      	cmp	r4, #2
  40069a:	d00e      	beq.n	4006ba <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  40069c:	2300      	movs	r3, #0
  40069e:	4629      	mov	r1, r5
  4006a0:	4630      	mov	r0, r6
  4006a2:	4c09      	ldr	r4, [pc, #36]	; (4006c8 <gfx_mono_ssd1306_draw_pixel+0x60>)
  4006a4:	47a0      	blx	r4
  4006a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4006aa:	ea48 0200 	orr.w	r2, r8, r0
  4006ae:	b2d2      	uxtb	r2, r2
		break;
  4006b0:	e7f4      	b.n	40069c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4006b2:	ea20 0207 	bic.w	r2, r0, r7
  4006b6:	b2d2      	uxtb	r2, r2
		break;
  4006b8:	e7f0      	b.n	40069c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4006ba:	ea88 0200 	eor.w	r2, r8, r0
  4006be:	b2d2      	uxtb	r2, r2
		break;
  4006c0:	e7ec      	b.n	40069c <gfx_mono_ssd1306_draw_pixel+0x34>
  4006c2:	4770      	bx	lr
  4006c4:	004003bd 	.word	0x004003bd
  4006c8:	004005c9 	.word	0x004005c9

004006cc <gfx_mono_ssd1306_get_byte>:
{
  4006cc:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  4006ce:	4b01      	ldr	r3, [pc, #4]	; (4006d4 <gfx_mono_ssd1306_get_byte+0x8>)
  4006d0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  4006d2:	bd08      	pop	{r3, pc}
  4006d4:	004003bd 	.word	0x004003bd

004006d8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4006d8:	b538      	push	{r3, r4, r5, lr}
  4006da:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4006dc:	2208      	movs	r2, #8
  4006de:	4b09      	ldr	r3, [pc, #36]	; (400704 <ssd1306_write_command+0x2c>)
  4006e0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4006e2:	4c09      	ldr	r4, [pc, #36]	; (400708 <ssd1306_write_command+0x30>)
  4006e4:	2101      	movs	r1, #1
  4006e6:	4620      	mov	r0, r4
  4006e8:	4b08      	ldr	r3, [pc, #32]	; (40070c <ssd1306_write_command+0x34>)
  4006ea:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4006ec:	2301      	movs	r3, #1
  4006ee:	461a      	mov	r2, r3
  4006f0:	4629      	mov	r1, r5
  4006f2:	4620      	mov	r0, r4
  4006f4:	4c06      	ldr	r4, [pc, #24]	; (400710 <ssd1306_write_command+0x38>)
  4006f6:	47a0      	blx	r4
	delay_us(10);
  4006f8:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4006fc:	4b05      	ldr	r3, [pc, #20]	; (400714 <ssd1306_write_command+0x3c>)
  4006fe:	4798      	blx	r3
  400700:	bd38      	pop	{r3, r4, r5, pc}
  400702:	bf00      	nop
  400704:	400e1000 	.word	0x400e1000
  400708:	40008000 	.word	0x40008000
  40070c:	004001d9 	.word	0x004001d9
  400710:	004001ef 	.word	0x004001ef
  400714:	20400001 	.word	0x20400001

00400718 <ssd1306_init>:
{
  400718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40071c:	4d66      	ldr	r5, [pc, #408]	; (4008b8 <ssd1306_init+0x1a0>)
  40071e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400722:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400724:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400728:	4b64      	ldr	r3, [pc, #400]	; (4008bc <ssd1306_init+0x1a4>)
  40072a:	2708      	movs	r7, #8
  40072c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40072e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400732:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400734:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400738:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40073a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40073c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400740:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400742:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400746:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400748:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40074a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40074e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400750:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400752:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400756:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400758:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40075a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40075e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400760:	f022 0208 	bic.w	r2, r2, #8
  400764:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400766:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400768:	f022 0208 	bic.w	r2, r2, #8
  40076c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40076e:	601f      	str	r7, [r3, #0]
  400770:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400772:	631f      	str	r7, [r3, #48]	; 0x30
  400774:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400776:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4008f4 <ssd1306_init+0x1dc>
  40077a:	2300      	movs	r3, #0
  40077c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400780:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400784:	4640      	mov	r0, r8
  400786:	4c4e      	ldr	r4, [pc, #312]	; (4008c0 <ssd1306_init+0x1a8>)
  400788:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40078a:	2300      	movs	r3, #0
  40078c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400790:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400794:	4640      	mov	r0, r8
  400796:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400798:	2300      	movs	r3, #0
  40079a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40079e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007a2:	4640      	mov	r0, r8
  4007a4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4007a6:	2300      	movs	r3, #0
  4007a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4007ac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007b0:	4640      	mov	r0, r8
  4007b2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4007b4:	2300      	movs	r3, #0
  4007b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007be:	4640      	mov	r0, r8
  4007c0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4007c2:	2300      	movs	r3, #0
  4007c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4007c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007cc:	4640      	mov	r0, r8
  4007ce:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4007d0:	4c3c      	ldr	r4, [pc, #240]	; (4008c4 <ssd1306_init+0x1ac>)
  4007d2:	f04f 0902 	mov.w	r9, #2
  4007d6:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4007da:	f04f 0880 	mov.w	r8, #128	; 0x80
  4007de:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4007e2:	6863      	ldr	r3, [r4, #4]
  4007e4:	f043 0301 	orr.w	r3, r3, #1
  4007e8:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4007ea:	463a      	mov	r2, r7
  4007ec:	2101      	movs	r1, #1
  4007ee:	4620      	mov	r0, r4
  4007f0:	4b35      	ldr	r3, [pc, #212]	; (4008c8 <ssd1306_init+0x1b0>)
  4007f2:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  4007f4:	2200      	movs	r2, #0
  4007f6:	2101      	movs	r1, #1
  4007f8:	4620      	mov	r0, r4
  4007fa:	4b34      	ldr	r3, [pc, #208]	; (4008cc <ssd1306_init+0x1b4>)
  4007fc:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  4007fe:	2200      	movs	r2, #0
  400800:	2101      	movs	r1, #1
  400802:	4620      	mov	r0, r4
  400804:	4b32      	ldr	r3, [pc, #200]	; (4008d0 <ssd1306_init+0x1b8>)
  400806:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400808:	6863      	ldr	r3, [r4, #4]
  40080a:	f023 0302 	bic.w	r3, r3, #2
  40080e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400810:	2200      	movs	r2, #0
  400812:	2101      	movs	r1, #1
  400814:	4620      	mov	r0, r4
  400816:	4b2f      	ldr	r3, [pc, #188]	; (4008d4 <ssd1306_init+0x1bc>)
  400818:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40081a:	6863      	ldr	r3, [r4, #4]
  40081c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400820:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400822:	6863      	ldr	r3, [r4, #4]
  400824:	f043 0310 	orr.w	r3, r3, #16
  400828:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  40082a:	492b      	ldr	r1, [pc, #172]	; (4008d8 <ssd1306_init+0x1c0>)
  40082c:	482b      	ldr	r0, [pc, #172]	; (4008dc <ssd1306_init+0x1c4>)
  40082e:	4b2c      	ldr	r3, [pc, #176]	; (4008e0 <ssd1306_init+0x1c8>)
  400830:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400832:	b2c2      	uxtb	r2, r0
  400834:	2101      	movs	r1, #1
  400836:	4620      	mov	r0, r4
  400838:	4b2a      	ldr	r3, [pc, #168]	; (4008e4 <ssd1306_init+0x1cc>)
  40083a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40083c:	4620      	mov	r0, r4
  40083e:	4b2a      	ldr	r3, [pc, #168]	; (4008e8 <ssd1306_init+0x1d0>)
  400840:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400842:	2301      	movs	r3, #1
  400844:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400846:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400848:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40084c:	4c27      	ldr	r4, [pc, #156]	; (4008ec <ssd1306_init+0x1d4>)
  40084e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400850:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400852:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400856:	47a0      	blx	r4
  400858:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  40085a:	20a8      	movs	r0, #168	; 0xa8
  40085c:	4c24      	ldr	r4, [pc, #144]	; (4008f0 <ssd1306_init+0x1d8>)
  40085e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400860:	201f      	movs	r0, #31
  400862:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400864:	20d3      	movs	r0, #211	; 0xd3
  400866:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400868:	2000      	movs	r0, #0
  40086a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  40086c:	2040      	movs	r0, #64	; 0x40
  40086e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400870:	20a1      	movs	r0, #161	; 0xa1
  400872:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400874:	20c8      	movs	r0, #200	; 0xc8
  400876:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400878:	20da      	movs	r0, #218	; 0xda
  40087a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  40087c:	4648      	mov	r0, r9
  40087e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400880:	2081      	movs	r0, #129	; 0x81
  400882:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400884:	208f      	movs	r0, #143	; 0x8f
  400886:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400888:	20a4      	movs	r0, #164	; 0xa4
  40088a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  40088c:	20a6      	movs	r0, #166	; 0xa6
  40088e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400890:	20d5      	movs	r0, #213	; 0xd5
  400892:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400894:	4640      	mov	r0, r8
  400896:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400898:	208d      	movs	r0, #141	; 0x8d
  40089a:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  40089c:	2014      	movs	r0, #20
  40089e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4008a0:	20db      	movs	r0, #219	; 0xdb
  4008a2:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4008a4:	2040      	movs	r0, #64	; 0x40
  4008a6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4008a8:	20d9      	movs	r0, #217	; 0xd9
  4008aa:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4008ac:	20f1      	movs	r0, #241	; 0xf1
  4008ae:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4008b0:	20af      	movs	r0, #175	; 0xaf
  4008b2:	47a0      	blx	r4
  4008b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008b8:	400e1200 	.word	0x400e1200
  4008bc:	400e1000 	.word	0x400e1000
  4008c0:	00400be9 	.word	0x00400be9
  4008c4:	40008000 	.word	0x40008000
  4008c8:	0040025f 	.word	0x0040025f
  4008cc:	00400223 	.word	0x00400223
  4008d0:	00400241 	.word	0x00400241
  4008d4:	004002a5 	.word	0x004002a5
  4008d8:	08f0d180 	.word	0x08f0d180
  4008dc:	000f4240 	.word	0x000f4240
  4008e0:	004002b9 	.word	0x004002b9
  4008e4:	004002cf 	.word	0x004002cf
  4008e8:	004001ad 	.word	0x004001ad
  4008ec:	20400001 	.word	0x20400001
  4008f0:	004006d9 	.word	0x004006d9
  4008f4:	400e1400 	.word	0x400e1400

004008f8 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  4008f8:	b538      	push	{r3, r4, r5, lr}
  4008fa:	4605      	mov	r5, r0
  4008fc:	2208      	movs	r2, #8
  4008fe:	4b09      	ldr	r3, [pc, #36]	; (400924 <ssd1306_write_data+0x2c>)
  400900:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400902:	4c09      	ldr	r4, [pc, #36]	; (400928 <ssd1306_write_data+0x30>)
  400904:	2101      	movs	r1, #1
  400906:	4620      	mov	r0, r4
  400908:	4b08      	ldr	r3, [pc, #32]	; (40092c <ssd1306_write_data+0x34>)
  40090a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40090c:	2301      	movs	r3, #1
  40090e:	461a      	mov	r2, r3
  400910:	4629      	mov	r1, r5
  400912:	4620      	mov	r0, r4
  400914:	4c06      	ldr	r4, [pc, #24]	; (400930 <ssd1306_write_data+0x38>)
  400916:	47a0      	blx	r4
	delay_us(10);
  400918:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40091c:	4b05      	ldr	r3, [pc, #20]	; (400934 <ssd1306_write_data+0x3c>)
  40091e:	4798      	blx	r3
  400920:	bd38      	pop	{r3, r4, r5, pc}
  400922:	bf00      	nop
  400924:	400e1000 	.word	0x400e1000
  400928:	40008000 	.word	0x40008000
  40092c:	004001d9 	.word	0x004001d9
  400930:	004001ef 	.word	0x004001ef
  400934:	20400001 	.word	0x20400001

00400938 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400938:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40093a:	4810      	ldr	r0, [pc, #64]	; (40097c <sysclk_init+0x44>)
  40093c:	4b10      	ldr	r3, [pc, #64]	; (400980 <sysclk_init+0x48>)
  40093e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400940:	213e      	movs	r1, #62	; 0x3e
  400942:	2000      	movs	r0, #0
  400944:	4b0f      	ldr	r3, [pc, #60]	; (400984 <sysclk_init+0x4c>)
  400946:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400948:	4c0f      	ldr	r4, [pc, #60]	; (400988 <sysclk_init+0x50>)
  40094a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40094c:	2800      	cmp	r0, #0
  40094e:	d0fc      	beq.n	40094a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400950:	4b0e      	ldr	r3, [pc, #56]	; (40098c <sysclk_init+0x54>)
  400952:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400954:	4a0e      	ldr	r2, [pc, #56]	; (400990 <sysclk_init+0x58>)
  400956:	4b0f      	ldr	r3, [pc, #60]	; (400994 <sysclk_init+0x5c>)
  400958:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40095a:	4c0f      	ldr	r4, [pc, #60]	; (400998 <sysclk_init+0x60>)
  40095c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40095e:	2800      	cmp	r0, #0
  400960:	d0fc      	beq.n	40095c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400962:	2002      	movs	r0, #2
  400964:	4b0d      	ldr	r3, [pc, #52]	; (40099c <sysclk_init+0x64>)
  400966:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400968:	2000      	movs	r0, #0
  40096a:	4b0d      	ldr	r3, [pc, #52]	; (4009a0 <sysclk_init+0x68>)
  40096c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40096e:	4b0d      	ldr	r3, [pc, #52]	; (4009a4 <sysclk_init+0x6c>)
  400970:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400972:	4802      	ldr	r0, [pc, #8]	; (40097c <sysclk_init+0x44>)
  400974:	4b02      	ldr	r3, [pc, #8]	; (400980 <sysclk_init+0x48>)
  400976:	4798      	blx	r3
  400978:	bd10      	pop	{r4, pc}
  40097a:	bf00      	nop
  40097c:	11e1a300 	.word	0x11e1a300
  400980:	004013ed 	.word	0x004013ed
  400984:	00400e79 	.word	0x00400e79
  400988:	00400ecd 	.word	0x00400ecd
  40098c:	00400edd 	.word	0x00400edd
  400990:	20183f01 	.word	0x20183f01
  400994:	400e0600 	.word	0x400e0600
  400998:	00400eed 	.word	0x00400eed
  40099c:	00400ddd 	.word	0x00400ddd
  4009a0:	00400e15 	.word	0x00400e15
  4009a4:	004012e1 	.word	0x004012e1

004009a8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4009aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009ae:	4b48      	ldr	r3, [pc, #288]	; (400ad0 <board_init+0x128>)
  4009b0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4009b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009b6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4009ba:	4b46      	ldr	r3, [pc, #280]	; (400ad4 <board_init+0x12c>)
  4009bc:	2200      	movs	r2, #0
  4009be:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4009c2:	695a      	ldr	r2, [r3, #20]
  4009c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4009c8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4009ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009ce:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4009d2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4009d6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4009da:	f007 0007 	and.w	r0, r7, #7
  4009de:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4009e0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4009e4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4009e8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4009ec:	f3bf 8f4f 	dsb	sy
  4009f0:	f04f 34ff 	mov.w	r4, #4294967295
  4009f4:	fa04 fc00 	lsl.w	ip, r4, r0
  4009f8:	fa06 f000 	lsl.w	r0, r6, r0
  4009fc:	fa04 f40e 	lsl.w	r4, r4, lr
  400a00:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400a04:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400a06:	463a      	mov	r2, r7
  400a08:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400a0a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400a0e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400a12:	3a01      	subs	r2, #1
  400a14:	4423      	add	r3, r4
  400a16:	f1b2 3fff 	cmp.w	r2, #4294967295
  400a1a:	d1f6      	bne.n	400a0a <board_init+0x62>
        } while(sets--);
  400a1c:	3e01      	subs	r6, #1
  400a1e:	4460      	add	r0, ip
  400a20:	f1b6 3fff 	cmp.w	r6, #4294967295
  400a24:	d1ef      	bne.n	400a06 <board_init+0x5e>
  400a26:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400a2a:	4b2a      	ldr	r3, [pc, #168]	; (400ad4 <board_init+0x12c>)
  400a2c:	695a      	ldr	r2, [r3, #20]
  400a2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400a32:	615a      	str	r2, [r3, #20]
  400a34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a38:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a3c:	4a26      	ldr	r2, [pc, #152]	; (400ad8 <board_init+0x130>)
  400a3e:	4927      	ldr	r1, [pc, #156]	; (400adc <board_init+0x134>)
  400a40:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a42:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400a46:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400a48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a4c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a50:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400a54:	f022 0201 	bic.w	r2, r2, #1
  400a58:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a5c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400a60:	f022 0201 	bic.w	r2, r2, #1
  400a64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a6c:	f3bf 8f6f 	isb	sy
  400a70:	200a      	movs	r0, #10
  400a72:	4c1b      	ldr	r4, [pc, #108]	; (400ae0 <board_init+0x138>)
  400a74:	47a0      	blx	r4
  400a76:	200b      	movs	r0, #11
  400a78:	47a0      	blx	r4
  400a7a:	200c      	movs	r0, #12
  400a7c:	47a0      	blx	r4
  400a7e:	2010      	movs	r0, #16
  400a80:	47a0      	blx	r4
  400a82:	2011      	movs	r0, #17
  400a84:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a86:	4b17      	ldr	r3, [pc, #92]	; (400ae4 <board_init+0x13c>)
  400a88:	f44f 7280 	mov.w	r2, #256	; 0x100
  400a8c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a92:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400a94:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400a9c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400aa2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400aa8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400aaa:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ab0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400ab2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400ab6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ab8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400aba:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400abe:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400ac0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400ac4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ac8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ace:	bf00      	nop
  400ad0:	400e1850 	.word	0x400e1850
  400ad4:	e000ed00 	.word	0xe000ed00
  400ad8:	400e0c00 	.word	0x400e0c00
  400adc:	5a00080c 	.word	0x5a00080c
  400ae0:	00400efd 	.word	0x00400efd
  400ae4:	400e1200 	.word	0x400e1200

00400ae8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ae8:	b90a      	cbnz	r2, 400aee <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400aea:	6601      	str	r1, [r0, #96]	; 0x60
  400aec:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400aee:	6641      	str	r1, [r0, #100]	; 0x64
  400af0:	4770      	bx	lr

00400af2 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400af2:	6301      	str	r1, [r0, #48]	; 0x30
  400af4:	4770      	bx	lr

00400af6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400af6:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400af8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400afc:	d03a      	beq.n	400b74 <pio_set_peripheral+0x7e>
  400afe:	d813      	bhi.n	400b28 <pio_set_peripheral+0x32>
  400b00:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400b04:	d025      	beq.n	400b52 <pio_set_peripheral+0x5c>
  400b06:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400b0a:	d10a      	bne.n	400b22 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b0c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400b0e:	4313      	orrs	r3, r2
  400b10:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400b12:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b14:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400b16:	400b      	ands	r3, r1
  400b18:	ea23 0302 	bic.w	r3, r3, r2
  400b1c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400b1e:	6042      	str	r2, [r0, #4]
  400b20:	4770      	bx	lr
	switch (ul_type) {
  400b22:	2900      	cmp	r1, #0
  400b24:	d1fb      	bne.n	400b1e <pio_set_peripheral+0x28>
  400b26:	4770      	bx	lr
  400b28:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400b2c:	d021      	beq.n	400b72 <pio_set_peripheral+0x7c>
  400b2e:	d809      	bhi.n	400b44 <pio_set_peripheral+0x4e>
  400b30:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400b34:	d1f3      	bne.n	400b1e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b36:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400b38:	4313      	orrs	r3, r2
  400b3a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400b3c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400b3e:	4313      	orrs	r3, r2
  400b40:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400b42:	e7ec      	b.n	400b1e <pio_set_peripheral+0x28>
	switch (ul_type) {
  400b44:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400b48:	d013      	beq.n	400b72 <pio_set_peripheral+0x7c>
  400b4a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400b4e:	d010      	beq.n	400b72 <pio_set_peripheral+0x7c>
  400b50:	e7e5      	b.n	400b1e <pio_set_peripheral+0x28>
{
  400b52:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b54:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b56:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400b58:	43d3      	mvns	r3, r2
  400b5a:	4021      	ands	r1, r4
  400b5c:	461c      	mov	r4, r3
  400b5e:	4019      	ands	r1, r3
  400b60:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400b62:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b64:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400b66:	400b      	ands	r3, r1
  400b68:	4023      	ands	r3, r4
  400b6a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400b6c:	6042      	str	r2, [r0, #4]
}
  400b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b72:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b74:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b76:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400b78:	400b      	ands	r3, r1
  400b7a:	ea23 0302 	bic.w	r3, r3, r2
  400b7e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400b80:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400b82:	4313      	orrs	r3, r2
  400b84:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400b86:	e7ca      	b.n	400b1e <pio_set_peripheral+0x28>

00400b88 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400b88:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400b8a:	f012 0f01 	tst.w	r2, #1
  400b8e:	d10d      	bne.n	400bac <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400b90:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400b92:	f012 0f0a 	tst.w	r2, #10
  400b96:	d00b      	beq.n	400bb0 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400b98:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400b9a:	f012 0f02 	tst.w	r2, #2
  400b9e:	d109      	bne.n	400bb4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400ba0:	f012 0f08 	tst.w	r2, #8
  400ba4:	d008      	beq.n	400bb8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400ba6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400baa:	e005      	b.n	400bb8 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400bac:	6641      	str	r1, [r0, #100]	; 0x64
  400bae:	e7f0      	b.n	400b92 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400bb0:	6241      	str	r1, [r0, #36]	; 0x24
  400bb2:	e7f2      	b.n	400b9a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400bb4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400bb8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400bba:	6001      	str	r1, [r0, #0]
  400bbc:	4770      	bx	lr

00400bbe <pio_set_output>:
{
  400bbe:	b410      	push	{r4}
  400bc0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400bc2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400bc4:	b94c      	cbnz	r4, 400bda <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400bc6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400bc8:	b14b      	cbz	r3, 400bde <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400bca:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400bcc:	b94a      	cbnz	r2, 400be2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400bce:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400bd0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400bd2:	6001      	str	r1, [r0, #0]
}
  400bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bd8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400bda:	6641      	str	r1, [r0, #100]	; 0x64
  400bdc:	e7f4      	b.n	400bc8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400bde:	6541      	str	r1, [r0, #84]	; 0x54
  400be0:	e7f4      	b.n	400bcc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400be2:	6301      	str	r1, [r0, #48]	; 0x30
  400be4:	e7f4      	b.n	400bd0 <pio_set_output+0x12>
	...

00400be8 <pio_configure>:
{
  400be8:	b570      	push	{r4, r5, r6, lr}
  400bea:	b082      	sub	sp, #8
  400bec:	4605      	mov	r5, r0
  400bee:	4616      	mov	r6, r2
  400bf0:	461c      	mov	r4, r3
	switch (ul_type) {
  400bf2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400bf6:	d014      	beq.n	400c22 <pio_configure+0x3a>
  400bf8:	d90a      	bls.n	400c10 <pio_configure+0x28>
  400bfa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400bfe:	d024      	beq.n	400c4a <pio_configure+0x62>
  400c00:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c04:	d021      	beq.n	400c4a <pio_configure+0x62>
  400c06:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c0a:	d017      	beq.n	400c3c <pio_configure+0x54>
		return 0;
  400c0c:	2000      	movs	r0, #0
  400c0e:	e01a      	b.n	400c46 <pio_configure+0x5e>
	switch (ul_type) {
  400c10:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c14:	d005      	beq.n	400c22 <pio_configure+0x3a>
  400c16:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c1a:	d002      	beq.n	400c22 <pio_configure+0x3a>
  400c1c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c20:	d1f4      	bne.n	400c0c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400c22:	4632      	mov	r2, r6
  400c24:	4628      	mov	r0, r5
  400c26:	4b11      	ldr	r3, [pc, #68]	; (400c6c <pio_configure+0x84>)
  400c28:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400c2a:	f014 0f01 	tst.w	r4, #1
  400c2e:	d102      	bne.n	400c36 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400c30:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400c32:	2001      	movs	r0, #1
  400c34:	e007      	b.n	400c46 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400c36:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400c38:	2001      	movs	r0, #1
  400c3a:	e004      	b.n	400c46 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400c3c:	461a      	mov	r2, r3
  400c3e:	4631      	mov	r1, r6
  400c40:	4b0b      	ldr	r3, [pc, #44]	; (400c70 <pio_configure+0x88>)
  400c42:	4798      	blx	r3
	return 1;
  400c44:	2001      	movs	r0, #1
}
  400c46:	b002      	add	sp, #8
  400c48:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400c4a:	f004 0301 	and.w	r3, r4, #1
  400c4e:	9300      	str	r3, [sp, #0]
  400c50:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400c54:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c58:	bf14      	ite	ne
  400c5a:	2200      	movne	r2, #0
  400c5c:	2201      	moveq	r2, #1
  400c5e:	4631      	mov	r1, r6
  400c60:	4628      	mov	r0, r5
  400c62:	4c04      	ldr	r4, [pc, #16]	; (400c74 <pio_configure+0x8c>)
  400c64:	47a0      	blx	r4
	return 1;
  400c66:	2001      	movs	r0, #1
		break;
  400c68:	e7ed      	b.n	400c46 <pio_configure+0x5e>
  400c6a:	bf00      	nop
  400c6c:	00400af7 	.word	0x00400af7
  400c70:	00400b89 	.word	0x00400b89
  400c74:	00400bbf 	.word	0x00400bbf

00400c78 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400c78:	f012 0f10 	tst.w	r2, #16
  400c7c:	d012      	beq.n	400ca4 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400c7e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400c82:	f012 0f20 	tst.w	r2, #32
  400c86:	d007      	beq.n	400c98 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400c88:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400c8c:	f012 0f40 	tst.w	r2, #64	; 0x40
  400c90:	d005      	beq.n	400c9e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400c92:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400c96:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400c98:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400c9c:	e7f6      	b.n	400c8c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400c9e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400ca2:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400ca4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400ca8:	4770      	bx	lr

00400caa <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400caa:	6401      	str	r1, [r0, #64]	; 0x40
  400cac:	4770      	bx	lr

00400cae <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400cae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400cb0:	4770      	bx	lr

00400cb2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400cb2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400cb4:	4770      	bx	lr
	...

00400cb8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400cbc:	4604      	mov	r4, r0
  400cbe:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400cc0:	4b0e      	ldr	r3, [pc, #56]	; (400cfc <pio_handler_process+0x44>)
  400cc2:	4798      	blx	r3
  400cc4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400cc6:	4620      	mov	r0, r4
  400cc8:	4b0d      	ldr	r3, [pc, #52]	; (400d00 <pio_handler_process+0x48>)
  400cca:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400ccc:	4005      	ands	r5, r0
  400cce:	d013      	beq.n	400cf8 <pio_handler_process+0x40>
  400cd0:	4c0c      	ldr	r4, [pc, #48]	; (400d04 <pio_handler_process+0x4c>)
  400cd2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400cd6:	e003      	b.n	400ce0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400cd8:	42b4      	cmp	r4, r6
  400cda:	d00d      	beq.n	400cf8 <pio_handler_process+0x40>
  400cdc:	3410      	adds	r4, #16
		while (status != 0) {
  400cde:	b15d      	cbz	r5, 400cf8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400ce0:	6820      	ldr	r0, [r4, #0]
  400ce2:	4540      	cmp	r0, r8
  400ce4:	d1f8      	bne.n	400cd8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400ce6:	6861      	ldr	r1, [r4, #4]
  400ce8:	4229      	tst	r1, r5
  400cea:	d0f5      	beq.n	400cd8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400cec:	68e3      	ldr	r3, [r4, #12]
  400cee:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400cf0:	6863      	ldr	r3, [r4, #4]
  400cf2:	ea25 0503 	bic.w	r5, r5, r3
  400cf6:	e7ef      	b.n	400cd8 <pio_handler_process+0x20>
  400cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cfc:	00400caf 	.word	0x00400caf
  400d00:	00400cb3 	.word	0x00400cb3
  400d04:	2040066c 	.word	0x2040066c

00400d08 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400d0a:	4c18      	ldr	r4, [pc, #96]	; (400d6c <pio_handler_set+0x64>)
  400d0c:	6826      	ldr	r6, [r4, #0]
  400d0e:	2e06      	cmp	r6, #6
  400d10:	d82a      	bhi.n	400d68 <pio_handler_set+0x60>
  400d12:	f04f 0c00 	mov.w	ip, #0
  400d16:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400d18:	4f15      	ldr	r7, [pc, #84]	; (400d70 <pio_handler_set+0x68>)
  400d1a:	e004      	b.n	400d26 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400d1c:	3401      	adds	r4, #1
  400d1e:	b2e4      	uxtb	r4, r4
  400d20:	46a4      	mov	ip, r4
  400d22:	42a6      	cmp	r6, r4
  400d24:	d309      	bcc.n	400d3a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400d26:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400d28:	0125      	lsls	r5, r4, #4
  400d2a:	597d      	ldr	r5, [r7, r5]
  400d2c:	428d      	cmp	r5, r1
  400d2e:	d1f5      	bne.n	400d1c <pio_handler_set+0x14>
  400d30:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400d34:	686d      	ldr	r5, [r5, #4]
  400d36:	4295      	cmp	r5, r2
  400d38:	d1f0      	bne.n	400d1c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400d3a:	4d0d      	ldr	r5, [pc, #52]	; (400d70 <pio_handler_set+0x68>)
  400d3c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400d40:	eb05 040e 	add.w	r4, r5, lr
  400d44:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400d48:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400d4a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400d4c:	9906      	ldr	r1, [sp, #24]
  400d4e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400d50:	3601      	adds	r6, #1
  400d52:	4566      	cmp	r6, ip
  400d54:	d005      	beq.n	400d62 <pio_handler_set+0x5a>
  400d56:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400d58:	461a      	mov	r2, r3
  400d5a:	4b06      	ldr	r3, [pc, #24]	; (400d74 <pio_handler_set+0x6c>)
  400d5c:	4798      	blx	r3

	return 0;
  400d5e:	2000      	movs	r0, #0
  400d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400d62:	4902      	ldr	r1, [pc, #8]	; (400d6c <pio_handler_set+0x64>)
  400d64:	600e      	str	r6, [r1, #0]
  400d66:	e7f6      	b.n	400d56 <pio_handler_set+0x4e>
		return 1;
  400d68:	2001      	movs	r0, #1
}
  400d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d6c:	204006dc 	.word	0x204006dc
  400d70:	2040066c 	.word	0x2040066c
  400d74:	00400c79 	.word	0x00400c79

00400d78 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d78:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400d7a:	210a      	movs	r1, #10
  400d7c:	4801      	ldr	r0, [pc, #4]	; (400d84 <PIOA_Handler+0xc>)
  400d7e:	4b02      	ldr	r3, [pc, #8]	; (400d88 <PIOA_Handler+0x10>)
  400d80:	4798      	blx	r3
  400d82:	bd08      	pop	{r3, pc}
  400d84:	400e0e00 	.word	0x400e0e00
  400d88:	00400cb9 	.word	0x00400cb9

00400d8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d8c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d8e:	210b      	movs	r1, #11
  400d90:	4801      	ldr	r0, [pc, #4]	; (400d98 <PIOB_Handler+0xc>)
  400d92:	4b02      	ldr	r3, [pc, #8]	; (400d9c <PIOB_Handler+0x10>)
  400d94:	4798      	blx	r3
  400d96:	bd08      	pop	{r3, pc}
  400d98:	400e1000 	.word	0x400e1000
  400d9c:	00400cb9 	.word	0x00400cb9

00400da0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400da0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400da2:	210c      	movs	r1, #12
  400da4:	4801      	ldr	r0, [pc, #4]	; (400dac <PIOC_Handler+0xc>)
  400da6:	4b02      	ldr	r3, [pc, #8]	; (400db0 <PIOC_Handler+0x10>)
  400da8:	4798      	blx	r3
  400daa:	bd08      	pop	{r3, pc}
  400dac:	400e1200 	.word	0x400e1200
  400db0:	00400cb9 	.word	0x00400cb9

00400db4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400db4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400db6:	2110      	movs	r1, #16
  400db8:	4801      	ldr	r0, [pc, #4]	; (400dc0 <PIOD_Handler+0xc>)
  400dba:	4b02      	ldr	r3, [pc, #8]	; (400dc4 <PIOD_Handler+0x10>)
  400dbc:	4798      	blx	r3
  400dbe:	bd08      	pop	{r3, pc}
  400dc0:	400e1400 	.word	0x400e1400
  400dc4:	00400cb9 	.word	0x00400cb9

00400dc8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400dc8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400dca:	2111      	movs	r1, #17
  400dcc:	4801      	ldr	r0, [pc, #4]	; (400dd4 <PIOE_Handler+0xc>)
  400dce:	4b02      	ldr	r3, [pc, #8]	; (400dd8 <PIOE_Handler+0x10>)
  400dd0:	4798      	blx	r3
  400dd2:	bd08      	pop	{r3, pc}
  400dd4:	400e1600 	.word	0x400e1600
  400dd8:	00400cb9 	.word	0x00400cb9

00400ddc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400ddc:	2803      	cmp	r0, #3
  400dde:	d011      	beq.n	400e04 <pmc_mck_set_division+0x28>
  400de0:	2804      	cmp	r0, #4
  400de2:	d012      	beq.n	400e0a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400de4:	2802      	cmp	r0, #2
  400de6:	bf0c      	ite	eq
  400de8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400dec:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400dee:	4a08      	ldr	r2, [pc, #32]	; (400e10 <pmc_mck_set_division+0x34>)
  400df0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400df6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400df8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400dfa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dfc:	f013 0f08 	tst.w	r3, #8
  400e00:	d0fb      	beq.n	400dfa <pmc_mck_set_division+0x1e>
}
  400e02:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400e04:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400e08:	e7f1      	b.n	400dee <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400e0a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400e0e:	e7ee      	b.n	400dee <pmc_mck_set_division+0x12>
  400e10:	400e0600 	.word	0x400e0600

00400e14 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400e14:	4a17      	ldr	r2, [pc, #92]	; (400e74 <pmc_switch_mck_to_pllack+0x60>)
  400e16:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400e1c:	4318      	orrs	r0, r3
  400e1e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e20:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e22:	f013 0f08 	tst.w	r3, #8
  400e26:	d10a      	bne.n	400e3e <pmc_switch_mck_to_pllack+0x2a>
  400e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e2c:	4911      	ldr	r1, [pc, #68]	; (400e74 <pmc_switch_mck_to_pllack+0x60>)
  400e2e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e30:	f012 0f08 	tst.w	r2, #8
  400e34:	d103      	bne.n	400e3e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e36:	3b01      	subs	r3, #1
  400e38:	d1f9      	bne.n	400e2e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400e3a:	2001      	movs	r0, #1
  400e3c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400e3e:	4a0d      	ldr	r2, [pc, #52]	; (400e74 <pmc_switch_mck_to_pllack+0x60>)
  400e40:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e42:	f023 0303 	bic.w	r3, r3, #3
  400e46:	f043 0302 	orr.w	r3, r3, #2
  400e4a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e4c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e4e:	f013 0f08 	tst.w	r3, #8
  400e52:	d10a      	bne.n	400e6a <pmc_switch_mck_to_pllack+0x56>
  400e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e58:	4906      	ldr	r1, [pc, #24]	; (400e74 <pmc_switch_mck_to_pllack+0x60>)
  400e5a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e5c:	f012 0f08 	tst.w	r2, #8
  400e60:	d105      	bne.n	400e6e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e62:	3b01      	subs	r3, #1
  400e64:	d1f9      	bne.n	400e5a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400e66:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400e68:	4770      	bx	lr
	return 0;
  400e6a:	2000      	movs	r0, #0
  400e6c:	4770      	bx	lr
  400e6e:	2000      	movs	r0, #0
  400e70:	4770      	bx	lr
  400e72:	bf00      	nop
  400e74:	400e0600 	.word	0x400e0600

00400e78 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e78:	b9a0      	cbnz	r0, 400ea4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e7a:	480e      	ldr	r0, [pc, #56]	; (400eb4 <pmc_switch_mainck_to_xtal+0x3c>)
  400e7c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e7e:	0209      	lsls	r1, r1, #8
  400e80:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e82:	4a0d      	ldr	r2, [pc, #52]	; (400eb8 <pmc_switch_mainck_to_xtal+0x40>)
  400e84:	401a      	ands	r2, r3
  400e86:	4b0d      	ldr	r3, [pc, #52]	; (400ebc <pmc_switch_mainck_to_xtal+0x44>)
  400e88:	4313      	orrs	r3, r2
  400e8a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e8c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e8e:	4602      	mov	r2, r0
  400e90:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e92:	f013 0f01 	tst.w	r3, #1
  400e96:	d0fb      	beq.n	400e90 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e98:	4a06      	ldr	r2, [pc, #24]	; (400eb4 <pmc_switch_mainck_to_xtal+0x3c>)
  400e9a:	6a11      	ldr	r1, [r2, #32]
  400e9c:	4b08      	ldr	r3, [pc, #32]	; (400ec0 <pmc_switch_mainck_to_xtal+0x48>)
  400e9e:	430b      	orrs	r3, r1
  400ea0:	6213      	str	r3, [r2, #32]
  400ea2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400ea4:	4903      	ldr	r1, [pc, #12]	; (400eb4 <pmc_switch_mainck_to_xtal+0x3c>)
  400ea6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400ea8:	4a06      	ldr	r2, [pc, #24]	; (400ec4 <pmc_switch_mainck_to_xtal+0x4c>)
  400eaa:	401a      	ands	r2, r3
  400eac:	4b06      	ldr	r3, [pc, #24]	; (400ec8 <pmc_switch_mainck_to_xtal+0x50>)
  400eae:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400eb0:	620b      	str	r3, [r1, #32]
  400eb2:	4770      	bx	lr
  400eb4:	400e0600 	.word	0x400e0600
  400eb8:	ffc8fffc 	.word	0xffc8fffc
  400ebc:	00370001 	.word	0x00370001
  400ec0:	01370000 	.word	0x01370000
  400ec4:	fec8fffc 	.word	0xfec8fffc
  400ec8:	01370002 	.word	0x01370002

00400ecc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ecc:	4b02      	ldr	r3, [pc, #8]	; (400ed8 <pmc_osc_is_ready_mainck+0xc>)
  400ece:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ed0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400ed4:	4770      	bx	lr
  400ed6:	bf00      	nop
  400ed8:	400e0600 	.word	0x400e0600

00400edc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400edc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ee0:	4b01      	ldr	r3, [pc, #4]	; (400ee8 <pmc_disable_pllack+0xc>)
  400ee2:	629a      	str	r2, [r3, #40]	; 0x28
  400ee4:	4770      	bx	lr
  400ee6:	bf00      	nop
  400ee8:	400e0600 	.word	0x400e0600

00400eec <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400eec:	4b02      	ldr	r3, [pc, #8]	; (400ef8 <pmc_is_locked_pllack+0xc>)
  400eee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ef0:	f000 0002 	and.w	r0, r0, #2
  400ef4:	4770      	bx	lr
  400ef6:	bf00      	nop
  400ef8:	400e0600 	.word	0x400e0600

00400efc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400efc:	283f      	cmp	r0, #63	; 0x3f
  400efe:	d81e      	bhi.n	400f3e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400f00:	281f      	cmp	r0, #31
  400f02:	d80c      	bhi.n	400f1e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400f04:	4b11      	ldr	r3, [pc, #68]	; (400f4c <pmc_enable_periph_clk+0x50>)
  400f06:	699a      	ldr	r2, [r3, #24]
  400f08:	2301      	movs	r3, #1
  400f0a:	4083      	lsls	r3, r0
  400f0c:	4393      	bics	r3, r2
  400f0e:	d018      	beq.n	400f42 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400f10:	2301      	movs	r3, #1
  400f12:	fa03 f000 	lsl.w	r0, r3, r0
  400f16:	4b0d      	ldr	r3, [pc, #52]	; (400f4c <pmc_enable_periph_clk+0x50>)
  400f18:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400f1a:	2000      	movs	r0, #0
  400f1c:	4770      	bx	lr
		ul_id -= 32;
  400f1e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400f20:	4b0a      	ldr	r3, [pc, #40]	; (400f4c <pmc_enable_periph_clk+0x50>)
  400f22:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400f26:	2301      	movs	r3, #1
  400f28:	4083      	lsls	r3, r0
  400f2a:	4393      	bics	r3, r2
  400f2c:	d00b      	beq.n	400f46 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400f2e:	2301      	movs	r3, #1
  400f30:	fa03 f000 	lsl.w	r0, r3, r0
  400f34:	4b05      	ldr	r3, [pc, #20]	; (400f4c <pmc_enable_periph_clk+0x50>)
  400f36:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400f3a:	2000      	movs	r0, #0
  400f3c:	4770      	bx	lr
		return 1;
  400f3e:	2001      	movs	r0, #1
  400f40:	4770      	bx	lr
	return 0;
  400f42:	2000      	movs	r0, #0
  400f44:	4770      	bx	lr
  400f46:	2000      	movs	r0, #0
}
  400f48:	4770      	bx	lr
  400f4a:	bf00      	nop
  400f4c:	400e0600 	.word	0x400e0600

00400f50 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  400f50:	4770      	bx	lr
	...

00400f54 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  400f54:	4a10      	ldr	r2, [pc, #64]	; (400f98 <pmc_enable_waitmode+0x44>)
  400f56:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400f58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400f5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  400f60:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  400f62:	6a11      	ldr	r1, [r2, #32]
  400f64:	4b0d      	ldr	r3, [pc, #52]	; (400f9c <pmc_enable_waitmode+0x48>)
  400f66:	430b      	orrs	r3, r1
  400f68:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400f6a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f6c:	f013 0f08 	tst.w	r3, #8
  400f70:	d0fb      	beq.n	400f6a <pmc_enable_waitmode+0x16>
  400f72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  400f76:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  400f78:	3b01      	subs	r3, #1
  400f7a:	d1fc      	bne.n	400f76 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  400f7c:	4a06      	ldr	r2, [pc, #24]	; (400f98 <pmc_enable_waitmode+0x44>)
  400f7e:	6a13      	ldr	r3, [r2, #32]
  400f80:	f013 0f08 	tst.w	r3, #8
  400f84:	d0fb      	beq.n	400f7e <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  400f86:	4a04      	ldr	r2, [pc, #16]	; (400f98 <pmc_enable_waitmode+0x44>)
  400f88:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400f8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  400f92:	6713      	str	r3, [r2, #112]	; 0x70
  400f94:	4770      	bx	lr
  400f96:	bf00      	nop
  400f98:	400e0600 	.word	0x400e0600
  400f9c:	00370004 	.word	0x00370004

00400fa0 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  400fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  400fa4:	1e43      	subs	r3, r0, #1
  400fa6:	2b04      	cmp	r3, #4
  400fa8:	f200 8107 	bhi.w	4011ba <pmc_sleep+0x21a>
  400fac:	e8df f013 	tbh	[pc, r3, lsl #1]
  400fb0:	00050005 	.word	0x00050005
  400fb4:	00150015 	.word	0x00150015
  400fb8:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400fba:	4a81      	ldr	r2, [pc, #516]	; (4011c0 <pmc_sleep+0x220>)
  400fbc:	6913      	ldr	r3, [r2, #16]
  400fbe:	f023 0304 	bic.w	r3, r3, #4
  400fc2:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400fc4:	2201      	movs	r2, #1
  400fc6:	4b7f      	ldr	r3, [pc, #508]	; (4011c4 <pmc_sleep+0x224>)
  400fc8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400fca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400fce:	b662      	cpsie	i
  __ASM volatile ("dsb");
  400fd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  400fd4:	bf30      	wfi
  400fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400fda:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400fdc:	2803      	cmp	r0, #3
  400fde:	bf0c      	ite	eq
  400fe0:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400fe2:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400fe6:	4b78      	ldr	r3, [pc, #480]	; (4011c8 <pmc_sleep+0x228>)
  400fe8:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400fea:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400fec:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400ff0:	2200      	movs	r2, #0
  400ff2:	4b74      	ldr	r3, [pc, #464]	; (4011c4 <pmc_sleep+0x224>)
  400ff4:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400ff6:	2201      	movs	r2, #1
  400ff8:	4b74      	ldr	r3, [pc, #464]	; (4011cc <pmc_sleep+0x22c>)
  400ffa:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400ffc:	4b74      	ldr	r3, [pc, #464]	; (4011d0 <pmc_sleep+0x230>)
  400ffe:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  401000:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  401002:	4a74      	ldr	r2, [pc, #464]	; (4011d4 <pmc_sleep+0x234>)
  401004:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401008:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40100a:	4a73      	ldr	r2, [pc, #460]	; (4011d8 <pmc_sleep+0x238>)
  40100c:	433a      	orrs	r2, r7
  40100e:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  401010:	f005 0903 	and.w	r9, r5, #3
  401014:	f1b9 0f01 	cmp.w	r9, #1
  401018:	f240 8089 	bls.w	40112e <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40101c:	f025 0103 	bic.w	r1, r5, #3
  401020:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  401024:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401026:	461a      	mov	r2, r3
  401028:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40102a:	f013 0f08 	tst.w	r3, #8
  40102e:	d0fb      	beq.n	401028 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  401030:	f011 0f70 	tst.w	r1, #112	; 0x70
  401034:	d008      	beq.n	401048 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  401036:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  40103a:	4b65      	ldr	r3, [pc, #404]	; (4011d0 <pmc_sleep+0x230>)
  40103c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40103e:	461a      	mov	r2, r3
  401040:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401042:	f013 0f08 	tst.w	r3, #8
  401046:	d0fb      	beq.n	401040 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  401048:	4b64      	ldr	r3, [pc, #400]	; (4011dc <pmc_sleep+0x23c>)
  40104a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40104c:	4a60      	ldr	r2, [pc, #384]	; (4011d0 <pmc_sleep+0x230>)
  40104e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401050:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401054:	d0fb      	beq.n	40104e <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401056:	4a5e      	ldr	r2, [pc, #376]	; (4011d0 <pmc_sleep+0x230>)
  401058:	6a11      	ldr	r1, [r2, #32]
  40105a:	4b61      	ldr	r3, [pc, #388]	; (4011e0 <pmc_sleep+0x240>)
  40105c:	400b      	ands	r3, r1
  40105e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401062:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401064:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401066:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40106a:	d0fb      	beq.n	401064 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40106c:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  401070:	4a58      	ldr	r2, [pc, #352]	; (4011d4 <pmc_sleep+0x234>)
  401072:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401074:	2c04      	cmp	r4, #4
  401076:	d05c      	beq.n	401132 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401078:	4c52      	ldr	r4, [pc, #328]	; (4011c4 <pmc_sleep+0x224>)
  40107a:	2301      	movs	r3, #1
  40107c:	7023      	strb	r3, [r4, #0]
  40107e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401082:	b662      	cpsie	i

		pmc_enable_waitmode();
  401084:	4b57      	ldr	r3, [pc, #348]	; (4011e4 <pmc_sleep+0x244>)
  401086:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401088:	b672      	cpsid	i
  40108a:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40108e:	2300      	movs	r3, #0
  401090:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  401092:	f017 0f02 	tst.w	r7, #2
  401096:	d055      	beq.n	401144 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401098:	4a4d      	ldr	r2, [pc, #308]	; (4011d0 <pmc_sleep+0x230>)
  40109a:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40109c:	4952      	ldr	r1, [pc, #328]	; (4011e8 <pmc_sleep+0x248>)
  40109e:	4019      	ands	r1, r3
  4010a0:	4b52      	ldr	r3, [pc, #328]	; (4011ec <pmc_sleep+0x24c>)
  4010a2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010a4:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4010a6:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4010a8:	4b51      	ldr	r3, [pc, #324]	; (4011f0 <pmc_sleep+0x250>)
  4010aa:	400b      	ands	r3, r1
  4010ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4010b0:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4010b2:	4b50      	ldr	r3, [pc, #320]	; (4011f4 <pmc_sleep+0x254>)
  4010b4:	4033      	ands	r3, r6
  4010b6:	2b00      	cmp	r3, #0
  4010b8:	d06e      	beq.n	401198 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4010ba:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4010be:	4b44      	ldr	r3, [pc, #272]	; (4011d0 <pmc_sleep+0x230>)
  4010c0:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4010c2:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4010c4:	f1b9 0f02 	cmp.w	r9, #2
  4010c8:	d104      	bne.n	4010d4 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4010ca:	4a41      	ldr	r2, [pc, #260]	; (4011d0 <pmc_sleep+0x230>)
  4010cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010ce:	f013 0f02 	tst.w	r3, #2
  4010d2:	d0fb      	beq.n	4010cc <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  4010d4:	4a3e      	ldr	r2, [pc, #248]	; (4011d0 <pmc_sleep+0x230>)
  4010d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4010d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4010dc:	f005 0070 	and.w	r0, r5, #112	; 0x70
  4010e0:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4010e2:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4010e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010e6:	f013 0f08 	tst.w	r3, #8
  4010ea:	d0fb      	beq.n	4010e4 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  4010ec:	4b39      	ldr	r3, [pc, #228]	; (4011d4 <pmc_sleep+0x234>)
  4010ee:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  4010f2:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4010f6:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4010f8:	461a      	mov	r2, r3
  4010fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010fc:	f013 0f08 	tst.w	r3, #8
  401100:	d0fb      	beq.n	4010fa <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  401102:	4a33      	ldr	r2, [pc, #204]	; (4011d0 <pmc_sleep+0x230>)
  401104:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401106:	420b      	tst	r3, r1
  401108:	d0fc      	beq.n	401104 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40110a:	2200      	movs	r2, #0
  40110c:	4b2f      	ldr	r3, [pc, #188]	; (4011cc <pmc_sleep+0x22c>)
  40110e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401110:	4b39      	ldr	r3, [pc, #228]	; (4011f8 <pmc_sleep+0x258>)
  401112:	681b      	ldr	r3, [r3, #0]
  401114:	b11b      	cbz	r3, 40111e <pmc_sleep+0x17e>
			callback_clocks_restored();
  401116:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401118:	2200      	movs	r2, #0
  40111a:	4b37      	ldr	r3, [pc, #220]	; (4011f8 <pmc_sleep+0x258>)
  40111c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40111e:	2201      	movs	r2, #1
  401120:	4b28      	ldr	r3, [pc, #160]	; (4011c4 <pmc_sleep+0x224>)
  401122:	701a      	strb	r2, [r3, #0]
  401124:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401128:	b662      	cpsie	i
  40112a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40112e:	4629      	mov	r1, r5
  401130:	e77e      	b.n	401030 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401132:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  401136:	6a11      	ldr	r1, [r2, #32]
  401138:	4b30      	ldr	r3, [pc, #192]	; (4011fc <pmc_sleep+0x25c>)
  40113a:	400b      	ands	r3, r1
  40113c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401140:	6213      	str	r3, [r2, #32]
  401142:	e799      	b.n	401078 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  401144:	f017 0f01 	tst.w	r7, #1
  401148:	d0b3      	beq.n	4010b2 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40114a:	4b21      	ldr	r3, [pc, #132]	; (4011d0 <pmc_sleep+0x230>)
  40114c:	6a1b      	ldr	r3, [r3, #32]
  40114e:	f013 0f01 	tst.w	r3, #1
  401152:	d10b      	bne.n	40116c <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401154:	491e      	ldr	r1, [pc, #120]	; (4011d0 <pmc_sleep+0x230>)
  401156:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  401158:	4a29      	ldr	r2, [pc, #164]	; (401200 <pmc_sleep+0x260>)
  40115a:	401a      	ands	r2, r3
  40115c:	4b29      	ldr	r3, [pc, #164]	; (401204 <pmc_sleep+0x264>)
  40115e:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401160:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401162:	460a      	mov	r2, r1
  401164:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401166:	f013 0f01 	tst.w	r3, #1
  40116a:	d0fb      	beq.n	401164 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  40116c:	4b18      	ldr	r3, [pc, #96]	; (4011d0 <pmc_sleep+0x230>)
  40116e:	6a1b      	ldr	r3, [r3, #32]
  401170:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401174:	d108      	bne.n	401188 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401176:	4a16      	ldr	r2, [pc, #88]	; (4011d0 <pmc_sleep+0x230>)
  401178:	6a11      	ldr	r1, [r2, #32]
  40117a:	4b23      	ldr	r3, [pc, #140]	; (401208 <pmc_sleep+0x268>)
  40117c:	430b      	orrs	r3, r1
  40117e:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401180:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401182:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401186:	d0fb      	beq.n	401180 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401188:	4a11      	ldr	r2, [pc, #68]	; (4011d0 <pmc_sleep+0x230>)
  40118a:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  40118c:	4b18      	ldr	r3, [pc, #96]	; (4011f0 <pmc_sleep+0x250>)
  40118e:	400b      	ands	r3, r1
  401190:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401194:	6213      	str	r3, [r2, #32]
  401196:	e78c      	b.n	4010b2 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401198:	2100      	movs	r1, #0
  40119a:	e793      	b.n	4010c4 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40119c:	4a08      	ldr	r2, [pc, #32]	; (4011c0 <pmc_sleep+0x220>)
  40119e:	6913      	ldr	r3, [r2, #16]
  4011a0:	f043 0304 	orr.w	r3, r3, #4
  4011a4:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4011a6:	4a19      	ldr	r2, [pc, #100]	; (40120c <pmc_sleep+0x26c>)
  4011a8:	4b19      	ldr	r3, [pc, #100]	; (401210 <pmc_sleep+0x270>)
  4011aa:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4011ac:	2201      	movs	r2, #1
  4011ae:	4b05      	ldr	r3, [pc, #20]	; (4011c4 <pmc_sleep+0x224>)
  4011b0:	701a      	strb	r2, [r3, #0]
  4011b2:	f3bf 8f5f 	dmb	sy
  4011b6:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4011b8:	bf30      	wfi
  4011ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4011be:	bf00      	nop
  4011c0:	e000ed00 	.word	0xe000ed00
  4011c4:	20400018 	.word	0x20400018
  4011c8:	00400f51 	.word	0x00400f51
  4011cc:	204006e0 	.word	0x204006e0
  4011d0:	400e0600 	.word	0x400e0600
  4011d4:	400e0c00 	.word	0x400e0c00
  4011d8:	00370008 	.word	0x00370008
  4011dc:	00400edd 	.word	0x00400edd
  4011e0:	fec8ffff 	.word	0xfec8ffff
  4011e4:	00400f55 	.word	0x00400f55
  4011e8:	fec8fffc 	.word	0xfec8fffc
  4011ec:	01370002 	.word	0x01370002
  4011f0:	ffc8ff87 	.word	0xffc8ff87
  4011f4:	07ff0000 	.word	0x07ff0000
  4011f8:	204006e4 	.word	0x204006e4
  4011fc:	ffc8fffe 	.word	0xffc8fffe
  401200:	ffc8fffc 	.word	0xffc8fffc
  401204:	00370001 	.word	0x00370001
  401208:	01370000 	.word	0x01370000
  40120c:	a5000004 	.word	0xa5000004
  401210:	400e1810 	.word	0x400e1810

00401214 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401214:	e7fe      	b.n	401214 <Dummy_Handler>
	...

00401218 <Reset_Handler>:
{
  401218:	b500      	push	{lr}
  40121a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40121c:	4b25      	ldr	r3, [pc, #148]	; (4012b4 <Reset_Handler+0x9c>)
  40121e:	4a26      	ldr	r2, [pc, #152]	; (4012b8 <Reset_Handler+0xa0>)
  401220:	429a      	cmp	r2, r3
  401222:	d010      	beq.n	401246 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401224:	4b25      	ldr	r3, [pc, #148]	; (4012bc <Reset_Handler+0xa4>)
  401226:	4a23      	ldr	r2, [pc, #140]	; (4012b4 <Reset_Handler+0x9c>)
  401228:	429a      	cmp	r2, r3
  40122a:	d20c      	bcs.n	401246 <Reset_Handler+0x2e>
  40122c:	3b01      	subs	r3, #1
  40122e:	1a9b      	subs	r3, r3, r2
  401230:	f023 0303 	bic.w	r3, r3, #3
  401234:	3304      	adds	r3, #4
  401236:	4413      	add	r3, r2
  401238:	491f      	ldr	r1, [pc, #124]	; (4012b8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40123a:	f851 0b04 	ldr.w	r0, [r1], #4
  40123e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401242:	429a      	cmp	r2, r3
  401244:	d1f9      	bne.n	40123a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401246:	4b1e      	ldr	r3, [pc, #120]	; (4012c0 <Reset_Handler+0xa8>)
  401248:	4a1e      	ldr	r2, [pc, #120]	; (4012c4 <Reset_Handler+0xac>)
  40124a:	429a      	cmp	r2, r3
  40124c:	d20a      	bcs.n	401264 <Reset_Handler+0x4c>
  40124e:	3b01      	subs	r3, #1
  401250:	1a9b      	subs	r3, r3, r2
  401252:	f023 0303 	bic.w	r3, r3, #3
  401256:	3304      	adds	r3, #4
  401258:	4413      	add	r3, r2
                *pDest++ = 0;
  40125a:	2100      	movs	r1, #0
  40125c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401260:	4293      	cmp	r3, r2
  401262:	d1fb      	bne.n	40125c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401264:	4a18      	ldr	r2, [pc, #96]	; (4012c8 <Reset_Handler+0xb0>)
  401266:	4b19      	ldr	r3, [pc, #100]	; (4012cc <Reset_Handler+0xb4>)
  401268:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40126c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40126e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401272:	fab3 f383 	clz	r3, r3
  401276:	095b      	lsrs	r3, r3, #5
  401278:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40127a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40127c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401280:	2200      	movs	r2, #0
  401282:	4b13      	ldr	r3, [pc, #76]	; (4012d0 <Reset_Handler+0xb8>)
  401284:	701a      	strb	r2, [r3, #0]
	return flags;
  401286:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401288:	4a12      	ldr	r2, [pc, #72]	; (4012d4 <Reset_Handler+0xbc>)
  40128a:	6813      	ldr	r3, [r2, #0]
  40128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401290:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401292:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401296:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40129a:	b129      	cbz	r1, 4012a8 <Reset_Handler+0x90>
		cpu_irq_enable();
  40129c:	2201      	movs	r2, #1
  40129e:	4b0c      	ldr	r3, [pc, #48]	; (4012d0 <Reset_Handler+0xb8>)
  4012a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4012a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4012a6:	b662      	cpsie	i
        __libc_init_array();
  4012a8:	4b0b      	ldr	r3, [pc, #44]	; (4012d8 <Reset_Handler+0xc0>)
  4012aa:	4798      	blx	r3
        main();
  4012ac:	4b0b      	ldr	r3, [pc, #44]	; (4012dc <Reset_Handler+0xc4>)
  4012ae:	4798      	blx	r3
  4012b0:	e7fe      	b.n	4012b0 <Reset_Handler+0x98>
  4012b2:	bf00      	nop
  4012b4:	20400000 	.word	0x20400000
  4012b8:	00402574 	.word	0x00402574
  4012bc:	2040044c 	.word	0x2040044c
  4012c0:	2040071c 	.word	0x2040071c
  4012c4:	2040044c 	.word	0x2040044c
  4012c8:	e000ed00 	.word	0xe000ed00
  4012cc:	00400000 	.word	0x00400000
  4012d0:	20400018 	.word	0x20400018
  4012d4:	e000ed88 	.word	0xe000ed88
  4012d8:	004018ad 	.word	0x004018ad
  4012dc:	00401729 	.word	0x00401729

004012e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4012e0:	4b3b      	ldr	r3, [pc, #236]	; (4013d0 <SystemCoreClockUpdate+0xf0>)
  4012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012e4:	f003 0303 	and.w	r3, r3, #3
  4012e8:	2b01      	cmp	r3, #1
  4012ea:	d01d      	beq.n	401328 <SystemCoreClockUpdate+0x48>
  4012ec:	b183      	cbz	r3, 401310 <SystemCoreClockUpdate+0x30>
  4012ee:	2b02      	cmp	r3, #2
  4012f0:	d036      	beq.n	401360 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4012f2:	4b37      	ldr	r3, [pc, #220]	; (4013d0 <SystemCoreClockUpdate+0xf0>)
  4012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012fa:	2b70      	cmp	r3, #112	; 0x70
  4012fc:	d05f      	beq.n	4013be <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4012fe:	4b34      	ldr	r3, [pc, #208]	; (4013d0 <SystemCoreClockUpdate+0xf0>)
  401300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401302:	4934      	ldr	r1, [pc, #208]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  401304:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401308:	680b      	ldr	r3, [r1, #0]
  40130a:	40d3      	lsrs	r3, r2
  40130c:	600b      	str	r3, [r1, #0]
  40130e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401310:	4b31      	ldr	r3, [pc, #196]	; (4013d8 <SystemCoreClockUpdate+0xf8>)
  401312:	695b      	ldr	r3, [r3, #20]
  401314:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401318:	bf14      	ite	ne
  40131a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40131e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401322:	4b2c      	ldr	r3, [pc, #176]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  401324:	601a      	str	r2, [r3, #0]
  401326:	e7e4      	b.n	4012f2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401328:	4b29      	ldr	r3, [pc, #164]	; (4013d0 <SystemCoreClockUpdate+0xf0>)
  40132a:	6a1b      	ldr	r3, [r3, #32]
  40132c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401330:	d003      	beq.n	40133a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401332:	4a2a      	ldr	r2, [pc, #168]	; (4013dc <SystemCoreClockUpdate+0xfc>)
  401334:	4b27      	ldr	r3, [pc, #156]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  401336:	601a      	str	r2, [r3, #0]
  401338:	e7db      	b.n	4012f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40133a:	4a29      	ldr	r2, [pc, #164]	; (4013e0 <SystemCoreClockUpdate+0x100>)
  40133c:	4b25      	ldr	r3, [pc, #148]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  40133e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401340:	4b23      	ldr	r3, [pc, #140]	; (4013d0 <SystemCoreClockUpdate+0xf0>)
  401342:	6a1b      	ldr	r3, [r3, #32]
  401344:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401348:	2b10      	cmp	r3, #16
  40134a:	d005      	beq.n	401358 <SystemCoreClockUpdate+0x78>
  40134c:	2b20      	cmp	r3, #32
  40134e:	d1d0      	bne.n	4012f2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401350:	4a22      	ldr	r2, [pc, #136]	; (4013dc <SystemCoreClockUpdate+0xfc>)
  401352:	4b20      	ldr	r3, [pc, #128]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  401354:	601a      	str	r2, [r3, #0]
          break;
  401356:	e7cc      	b.n	4012f2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401358:	4a22      	ldr	r2, [pc, #136]	; (4013e4 <SystemCoreClockUpdate+0x104>)
  40135a:	4b1e      	ldr	r3, [pc, #120]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  40135c:	601a      	str	r2, [r3, #0]
          break;
  40135e:	e7c8      	b.n	4012f2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401360:	4b1b      	ldr	r3, [pc, #108]	; (4013d0 <SystemCoreClockUpdate+0xf0>)
  401362:	6a1b      	ldr	r3, [r3, #32]
  401364:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401368:	d016      	beq.n	401398 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40136a:	4a1c      	ldr	r2, [pc, #112]	; (4013dc <SystemCoreClockUpdate+0xfc>)
  40136c:	4b19      	ldr	r3, [pc, #100]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  40136e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401370:	4b17      	ldr	r3, [pc, #92]	; (4013d0 <SystemCoreClockUpdate+0xf0>)
  401372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401374:	f003 0303 	and.w	r3, r3, #3
  401378:	2b02      	cmp	r3, #2
  40137a:	d1ba      	bne.n	4012f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40137c:	4a14      	ldr	r2, [pc, #80]	; (4013d0 <SystemCoreClockUpdate+0xf0>)
  40137e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401380:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401382:	4814      	ldr	r0, [pc, #80]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401384:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401388:	6803      	ldr	r3, [r0, #0]
  40138a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40138e:	b2d2      	uxtb	r2, r2
  401390:	fbb3 f3f2 	udiv	r3, r3, r2
  401394:	6003      	str	r3, [r0, #0]
  401396:	e7ac      	b.n	4012f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401398:	4a11      	ldr	r2, [pc, #68]	; (4013e0 <SystemCoreClockUpdate+0x100>)
  40139a:	4b0e      	ldr	r3, [pc, #56]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  40139c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40139e:	4b0c      	ldr	r3, [pc, #48]	; (4013d0 <SystemCoreClockUpdate+0xf0>)
  4013a0:	6a1b      	ldr	r3, [r3, #32]
  4013a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4013a6:	2b10      	cmp	r3, #16
  4013a8:	d005      	beq.n	4013b6 <SystemCoreClockUpdate+0xd6>
  4013aa:	2b20      	cmp	r3, #32
  4013ac:	d1e0      	bne.n	401370 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4013ae:	4a0b      	ldr	r2, [pc, #44]	; (4013dc <SystemCoreClockUpdate+0xfc>)
  4013b0:	4b08      	ldr	r3, [pc, #32]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  4013b2:	601a      	str	r2, [r3, #0]
          break;
  4013b4:	e7dc      	b.n	401370 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4013b6:	4a0b      	ldr	r2, [pc, #44]	; (4013e4 <SystemCoreClockUpdate+0x104>)
  4013b8:	4b06      	ldr	r3, [pc, #24]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  4013ba:	601a      	str	r2, [r3, #0]
          break;
  4013bc:	e7d8      	b.n	401370 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4013be:	4a05      	ldr	r2, [pc, #20]	; (4013d4 <SystemCoreClockUpdate+0xf4>)
  4013c0:	6813      	ldr	r3, [r2, #0]
  4013c2:	4909      	ldr	r1, [pc, #36]	; (4013e8 <SystemCoreClockUpdate+0x108>)
  4013c4:	fba1 1303 	umull	r1, r3, r1, r3
  4013c8:	085b      	lsrs	r3, r3, #1
  4013ca:	6013      	str	r3, [r2, #0]
  4013cc:	4770      	bx	lr
  4013ce:	bf00      	nop
  4013d0:	400e0600 	.word	0x400e0600
  4013d4:	2040001c 	.word	0x2040001c
  4013d8:	400e1810 	.word	0x400e1810
  4013dc:	00b71b00 	.word	0x00b71b00
  4013e0:	003d0900 	.word	0x003d0900
  4013e4:	007a1200 	.word	0x007a1200
  4013e8:	aaaaaaab 	.word	0xaaaaaaab

004013ec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4013ec:	4b16      	ldr	r3, [pc, #88]	; (401448 <system_init_flash+0x5c>)
  4013ee:	4298      	cmp	r0, r3
  4013f0:	d913      	bls.n	40141a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4013f2:	4b16      	ldr	r3, [pc, #88]	; (40144c <system_init_flash+0x60>)
  4013f4:	4298      	cmp	r0, r3
  4013f6:	d915      	bls.n	401424 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4013f8:	4b15      	ldr	r3, [pc, #84]	; (401450 <system_init_flash+0x64>)
  4013fa:	4298      	cmp	r0, r3
  4013fc:	d916      	bls.n	40142c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4013fe:	4b15      	ldr	r3, [pc, #84]	; (401454 <system_init_flash+0x68>)
  401400:	4298      	cmp	r0, r3
  401402:	d917      	bls.n	401434 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401404:	4b14      	ldr	r3, [pc, #80]	; (401458 <system_init_flash+0x6c>)
  401406:	4298      	cmp	r0, r3
  401408:	d918      	bls.n	40143c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40140a:	4b14      	ldr	r3, [pc, #80]	; (40145c <system_init_flash+0x70>)
  40140c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40140e:	bf94      	ite	ls
  401410:	4a13      	ldrls	r2, [pc, #76]	; (401460 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401412:	4a14      	ldrhi	r2, [pc, #80]	; (401464 <system_init_flash+0x78>)
  401414:	4b14      	ldr	r3, [pc, #80]	; (401468 <system_init_flash+0x7c>)
  401416:	601a      	str	r2, [r3, #0]
  401418:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40141a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40141e:	4b12      	ldr	r3, [pc, #72]	; (401468 <system_init_flash+0x7c>)
  401420:	601a      	str	r2, [r3, #0]
  401422:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401424:	4a11      	ldr	r2, [pc, #68]	; (40146c <system_init_flash+0x80>)
  401426:	4b10      	ldr	r3, [pc, #64]	; (401468 <system_init_flash+0x7c>)
  401428:	601a      	str	r2, [r3, #0]
  40142a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40142c:	4a10      	ldr	r2, [pc, #64]	; (401470 <system_init_flash+0x84>)
  40142e:	4b0e      	ldr	r3, [pc, #56]	; (401468 <system_init_flash+0x7c>)
  401430:	601a      	str	r2, [r3, #0]
  401432:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401434:	4a0f      	ldr	r2, [pc, #60]	; (401474 <system_init_flash+0x88>)
  401436:	4b0c      	ldr	r3, [pc, #48]	; (401468 <system_init_flash+0x7c>)
  401438:	601a      	str	r2, [r3, #0]
  40143a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40143c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401440:	4b09      	ldr	r3, [pc, #36]	; (401468 <system_init_flash+0x7c>)
  401442:	601a      	str	r2, [r3, #0]
  401444:	4770      	bx	lr
  401446:	bf00      	nop
  401448:	015ef3bf 	.word	0x015ef3bf
  40144c:	02bde77f 	.word	0x02bde77f
  401450:	041cdb3f 	.word	0x041cdb3f
  401454:	057bceff 	.word	0x057bceff
  401458:	06dac2bf 	.word	0x06dac2bf
  40145c:	0839b67f 	.word	0x0839b67f
  401460:	04000500 	.word	0x04000500
  401464:	04000600 	.word	0x04000600
  401468:	400e0c00 	.word	0x400e0c00
  40146c:	04000100 	.word	0x04000100
  401470:	04000200 	.word	0x04000200
  401474:	04000300 	.word	0x04000300

00401478 <but_flag_callback>:
volatile Bool but_p_freq;
volatile Bool but_m_freq;
volatile Bool but_stop;

void but_flag_callback(void){
	but_flag = true;
  401478:	2201      	movs	r2, #1
  40147a:	4b01      	ldr	r3, [pc, #4]	; (401480 <but_flag_callback+0x8>)
  40147c:	701a      	strb	r2, [r3, #0]
  40147e:	4770      	bx	lr
  401480:	204006f4 	.word	0x204006f4

00401484 <but_p_freq_callback>:
}
void but_p_freq_callback(void){
	but_p_freq = true;
  401484:	2201      	movs	r2, #1
  401486:	4b01      	ldr	r3, [pc, #4]	; (40148c <but_p_freq_callback+0x8>)
  401488:	701a      	strb	r2, [r3, #0]
  40148a:	4770      	bx	lr
  40148c:	204006f6 	.word	0x204006f6

00401490 <but_m_freq_callback>:
}
void but_m_freq_callback(void){
	but_m_freq = true;
  401490:	2201      	movs	r2, #1
  401492:	4b01      	ldr	r3, [pc, #4]	; (401498 <but_m_freq_callback+0x8>)
  401494:	701a      	strb	r2, [r3, #0]
  401496:	4770      	bx	lr
  401498:	204006f7 	.word	0x204006f7

0040149c <but_stop_callback>:
}
void but_stop_callback(void){
	but_stop = true;
  40149c:	2201      	movs	r2, #1
  40149e:	4b01      	ldr	r3, [pc, #4]	; (4014a4 <but_stop_callback+0x8>)
  4014a0:	701a      	strb	r2, [r3, #0]
  4014a2:	4770      	bx	lr
  4014a4:	204006f5 	.word	0x204006f5

004014a8 <TC1_Handler>:
}

void TC1_Handler(void){
  4014a8:	b500      	push	{lr}
  4014aa:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup??o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  4014ac:	2101      	movs	r1, #1
  4014ae:	4806      	ldr	r0, [pc, #24]	; (4014c8 <TC1_Handler+0x20>)
  4014b0:	4b06      	ldr	r3, [pc, #24]	; (4014cc <TC1_Handler+0x24>)
  4014b2:	4798      	blx	r3
  4014b4:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  4014b6:	9b01      	ldr	r3, [sp, #4]
	
	freq+=1;
  4014b8:	4a05      	ldr	r2, [pc, #20]	; (4014d0 <TC1_Handler+0x28>)
  4014ba:	6813      	ldr	r3, [r2, #0]
  4014bc:	3301      	adds	r3, #1
  4014be:	6013      	str	r3, [r2, #0]
	//display_freq(freq);
	

}
  4014c0:	b003      	add	sp, #12
  4014c2:	f85d fb04 	ldr.w	pc, [sp], #4
  4014c6:	bf00      	nop
  4014c8:	4000c000 	.word	0x4000c000
  4014cc:	00400329 	.word	0x00400329
  4014d0:	204006e8 	.word	0x204006e8

004014d4 <io_init>:


// Inicializa botao SW0 do kit com interrupcao
void io_init(void)
{
  4014d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4014d8:	b082      	sub	sp, #8
	board_init();
  4014da:	4b47      	ldr	r3, [pc, #284]	; (4015f8 <io_init+0x124>)
  4014dc:	4798      	blx	r3
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  4014de:	4b47      	ldr	r3, [pc, #284]	; (4015fc <io_init+0x128>)
  4014e0:	4798      	blx	r3

	// Configura led da placa
	pmc_enable_periph_clk(LED_PIO_ID);
  4014e2:	200c      	movs	r0, #12
  4014e4:	4e46      	ldr	r6, [pc, #280]	; (401600 <io_init+0x12c>)
  4014e6:	47b0      	blx	r6
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT);
  4014e8:	4d46      	ldr	r5, [pc, #280]	; (401604 <io_init+0x130>)
  4014ea:	2300      	movs	r3, #0
  4014ec:	f44f 7280 	mov.w	r2, #256	; 0x100
  4014f0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4014f4:	4628      	mov	r0, r5
  4014f6:	f8df a134 	ldr.w	sl, [pc, #308]	; 40162c <io_init+0x158>
  4014fa:	47d0      	blx	sl
	// configura botoes do oled
	pmc_enable_periph_clk(EBUT1_PIO_ID);
  4014fc:	2010      	movs	r0, #16
  4014fe:	47b0      	blx	r6
	pmc_enable_periph_clk(EBUT2_PIO_ID);
  401500:	200a      	movs	r0, #10
  401502:	47b0      	blx	r6
	pmc_enable_periph_clk(EBUT3_PIO_ID);
  401504:	200c      	movs	r0, #12
  401506:	47b0      	blx	r6
	// configura botoes do oled como input
	pio_set_input(EBUT1_PIO,EBUT1_PIO_IDX_MASK,PIO_DEFAULT);
  401508:	4f3f      	ldr	r7, [pc, #252]	; (401608 <io_init+0x134>)
  40150a:	2200      	movs	r2, #0
  40150c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401510:	4638      	mov	r0, r7
  401512:	f8df 911c 	ldr.w	r9, [pc, #284]	; 401630 <io_init+0x15c>
  401516:	47c8      	blx	r9
	pio_pull_up(EBUT1_PIO,EBUT1_PIO_IDX_MASK,PIO_PULLUP);
  401518:	2201      	movs	r2, #1
  40151a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40151e:	4638      	mov	r0, r7
  401520:	f8df 8110 	ldr.w	r8, [pc, #272]	; 401634 <io_init+0x160>
  401524:	47c0      	blx	r8
	pio_set_input(EBUT2_PIO,EBUT2_PIO_IDX_MASK,PIO_DEFAULT);
  401526:	4c39      	ldr	r4, [pc, #228]	; (40160c <io_init+0x138>)
  401528:	2200      	movs	r2, #0
  40152a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40152e:	4620      	mov	r0, r4
  401530:	47c8      	blx	r9
	pio_pull_up(EBUT2_PIO,EBUT2_PIO_IDX_MASK,PIO_PULLUP);
  401532:	2201      	movs	r2, #1
  401534:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401538:	4620      	mov	r0, r4
  40153a:	47c0      	blx	r8
	pio_set_input(EBUT3_PIO,EBUT3_PIO_IDX_MASK,PIO_DEFAULT);
  40153c:	2200      	movs	r2, #0
  40153e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401542:	4628      	mov	r0, r5
  401544:	47c8      	blx	r9
	pio_pull_up(EBUT3_PIO,EBUT3_PIO_IDX_MASK,PIO_PULLUP);
  401546:	2201      	movs	r2, #1
  401548:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40154c:	4628      	mov	r0, r5
  40154e:	47c0      	blx	r8
	// Inicializa clock do perif?rico PIO responsavel pelo botao
	pmc_enable_periph_clk(BUT_PIO_ID);
  401550:	200a      	movs	r0, #10
  401552:	47b0      	blx	r6
	// Configura PIO para lidar com o pino do bot?o como entrada
	// com pull-up
	pio_configure(BUT_PIO, PIO_INPUT, BUT_IDX_MASK, PIO_PULLUP);
  401554:	2301      	movs	r3, #1
  401556:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40155a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40155e:	4620      	mov	r0, r4
  401560:	47d0      	blx	sl
	// Configura interrup??o no pino referente ao botao e associa
	// fun??o de callback caso uma interrup??o for gerada
	// a fun??o de callback ? a: but_callback()
	pio_handler_set(BUT_PIO,
  401562:	4b2b      	ldr	r3, [pc, #172]	; (401610 <io_init+0x13c>)
  401564:	9300      	str	r3, [sp, #0]
  401566:	2370      	movs	r3, #112	; 0x70
  401568:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40156c:	210a      	movs	r1, #10
  40156e:	4620      	mov	r0, r4
  401570:	4e28      	ldr	r6, [pc, #160]	; (401614 <io_init+0x140>)
  401572:	47b0      	blx	r6
	BUT_PIO_ID,
	BUT_IDX_MASK,
	PIO_IT_RISE_EDGE,
	but_flag_callback);
	pio_handler_set(EBUT1_PIO,
  401574:	4b28      	ldr	r3, [pc, #160]	; (401618 <io_init+0x144>)
  401576:	9300      	str	r3, [sp, #0]
  401578:	2350      	movs	r3, #80	; 0x50
  40157a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40157e:	2110      	movs	r1, #16
  401580:	4638      	mov	r0, r7
  401582:	47b0      	blx	r6
	EBUT1_PIO_ID,
	EBUT1_PIO_IDX_MASK,
	PIO_IT_FALL_EDGE,
	but_p_freq_callback);
	pio_handler_set(EBUT2_PIO,
  401584:	4b25      	ldr	r3, [pc, #148]	; (40161c <io_init+0x148>)
  401586:	9300      	str	r3, [sp, #0]
  401588:	2350      	movs	r3, #80	; 0x50
  40158a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40158e:	210a      	movs	r1, #10
  401590:	4620      	mov	r0, r4
  401592:	47b0      	blx	r6
	EBUT2_PIO_ID,
	EBUT2_PIO_IDX_MASK,
	PIO_IT_FALL_EDGE,
	but_m_freq_callback);
	pio_handler_set(EBUT3_PIO,
  401594:	4b22      	ldr	r3, [pc, #136]	; (401620 <io_init+0x14c>)
  401596:	9300      	str	r3, [sp, #0]
  401598:	2350      	movs	r3, #80	; 0x50
  40159a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40159e:	210c      	movs	r1, #12
  4015a0:	4628      	mov	r0, r5
  4015a2:	47b0      	blx	r6
	EBUT3_PIO_ID,
	EBUT3_PIO_IDX_MASK,
	PIO_IT_FALL_EDGE,
	but_stop_callback);
	// Ativa interrup??o
	pio_enable_interrupt(EBUT1_PIO, EBUT1_PIO_IDX_MASK);
  4015a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4015a8:	4638      	mov	r0, r7
  4015aa:	4e1e      	ldr	r6, [pc, #120]	; (401624 <io_init+0x150>)
  4015ac:	47b0      	blx	r6
	pio_enable_interrupt(EBUT2_PIO, EBUT2_PIO_IDX_MASK);
  4015ae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4015b2:	4620      	mov	r0, r4
  4015b4:	47b0      	blx	r6
	pio_enable_interrupt(EBUT3_PIO, EBUT3_PIO_IDX_MASK);
  4015b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4015ba:	4628      	mov	r0, r5
  4015bc:	47b0      	blx	r6

	// Ativa interrup??o
	pio_enable_interrupt(BUT_PIO, BUT_IDX_MASK);
  4015be:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4015c2:	4620      	mov	r0, r4
  4015c4:	47b0      	blx	r6
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015c6:	4b18      	ldr	r3, [pc, #96]	; (401628 <io_init+0x154>)
  4015c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4015cc:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4015ce:	2280      	movs	r2, #128	; 0x80
  4015d0:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4015d8:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4015da:	2200      	movs	r2, #0
  4015dc:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015e0:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4015e2:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4015ea:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4015ec:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	NVIC_SetPriority(EBUT1_PIO_ID, 0); // Prioridade 4
	NVIC_EnableIRQ(EBUT2_PIO_ID);
	NVIC_SetPriority(EBUT2_PIO_ID, 0); // Prioridade 4
	NVIC_EnableIRQ(EBUT3_PIO_ID);
	NVIC_SetPriority(EBUT3_PIO_ID, 0); // Prioridade 4
}
  4015f0:	b002      	add	sp, #8
  4015f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015f6:	bf00      	nop
  4015f8:	004009a9 	.word	0x004009a9
  4015fc:	00400939 	.word	0x00400939
  401600:	00400efd 	.word	0x00400efd
  401604:	400e1200 	.word	0x400e1200
  401608:	400e1400 	.word	0x400e1400
  40160c:	400e0e00 	.word	0x400e0e00
  401610:	00401479 	.word	0x00401479
  401614:	00400d09 	.word	0x00400d09
  401618:	00401485 	.word	0x00401485
  40161c:	00401491 	.word	0x00401491
  401620:	0040149d 	.word	0x0040149d
  401624:	00400cab 	.word	0x00400cab
  401628:	e000e100 	.word	0xe000e100
  40162c:	00400be9 	.word	0x00400be9
  401630:	00400b89 	.word	0x00400b89
  401634:	00400ae9 	.word	0x00400ae9

00401638 <display_freq>:
	but_flag = false;
	
	
}

int display_freq(int hz, int minu, int hora){
  401638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40163c:	b086      	sub	sp, #24
  40163e:	4607      	mov	r7, r0
  401640:	4688      	mov	r8, r1
  401642:	4610      	mov	r0, r2
	//gfx_mono_draw_string("      ",0,16, &sysfont);

	char hnum[5];
	itoa(hora, hnum, 10);
  401644:	220a      	movs	r2, #10
  401646:	a904      	add	r1, sp, #16
  401648:	4e0f      	ldr	r6, [pc, #60]	; (401688 <display_freq+0x50>)
  40164a:	47b0      	blx	r6
	gfx_mono_draw_string(hnum,0,16, &sysfont);
  40164c:	4d0f      	ldr	r5, [pc, #60]	; (40168c <display_freq+0x54>)
  40164e:	462b      	mov	r3, r5
  401650:	2210      	movs	r2, #16
  401652:	2100      	movs	r1, #0
  401654:	eb0d 0002 	add.w	r0, sp, r2
  401658:	4c0d      	ldr	r4, [pc, #52]	; (401690 <display_freq+0x58>)
  40165a:	47a0      	blx	r4
	
	char hnum1[5];
	itoa(minu, hnum1, 10);
  40165c:	220a      	movs	r2, #10
  40165e:	a902      	add	r1, sp, #8
  401660:	4640      	mov	r0, r8
  401662:	47b0      	blx	r6
	gfx_mono_draw_string(hnum1,30,16, &sysfont);
  401664:	462b      	mov	r3, r5
  401666:	2210      	movs	r2, #16
  401668:	211e      	movs	r1, #30
  40166a:	a802      	add	r0, sp, #8
  40166c:	47a0      	blx	r4

	char hnum2[5];
	itoa(hz, hnum2, 10);
  40166e:	220a      	movs	r2, #10
  401670:	4669      	mov	r1, sp
  401672:	4638      	mov	r0, r7
  401674:	47b0      	blx	r6
	gfx_mono_draw_string(hnum2, 60,16, &sysfont);
  401676:	462b      	mov	r3, r5
  401678:	2210      	movs	r2, #16
  40167a:	213c      	movs	r1, #60	; 0x3c
  40167c:	4668      	mov	r0, sp
  40167e:	47a0      	blx	r4
}
  401680:	b006      	add	sp, #24
  401682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401686:	bf00      	nop
  401688:	0040192d 	.word	0x0040192d
  40168c:	2040000c 	.word	0x2040000c
  401690:	00400581 	.word	0x00400581

00401694 <TC_init>:


void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401698:	b085      	sub	sp, #20
  40169a:	4606      	mov	r6, r0
  40169c:	460c      	mov	r4, r1
  40169e:	4617      	mov	r7, r2
  4016a0:	4698      	mov	r8, r3
	o uC possui 3 TCs, cada TC possui 3 canais
	TC0 : ID_TC0, ID_TC1, ID_TC2
	TC1 : ID_TC3, ID_TC4, ID_TC5
	TC2 : ID_TC6, ID_TC7, ID_TC8
	*/
	pmc_enable_periph_clk(ID_TC);
  4016a2:	4608      	mov	r0, r1
  4016a4:	4b18      	ldr	r3, [pc, #96]	; (401708 <TC_init+0x74>)
  4016a6:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrup?c?o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4016a8:	4d18      	ldr	r5, [pc, #96]	; (40170c <TC_init+0x78>)
  4016aa:	9500      	str	r5, [sp, #0]
  4016ac:	ab02      	add	r3, sp, #8
  4016ae:	aa03      	add	r2, sp, #12
  4016b0:	4629      	mov	r1, r5
  4016b2:	4640      	mov	r0, r8
  4016b4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 401724 <TC_init+0x90>
  4016b8:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4016ba:	9a02      	ldr	r2, [sp, #8]
  4016bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4016c0:	4639      	mov	r1, r7
  4016c2:	4630      	mov	r0, r6
  4016c4:	4b12      	ldr	r3, [pc, #72]	; (401710 <TC_init+0x7c>)
  4016c6:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  4016c8:	9a03      	ldr	r2, [sp, #12]
  4016ca:	fbb5 f2f2 	udiv	r2, r5, r2
  4016ce:	fbb2 f2f8 	udiv	r2, r2, r8
  4016d2:	4639      	mov	r1, r7
  4016d4:	4630      	mov	r0, r6
  4016d6:	4b0f      	ldr	r3, [pc, #60]	; (401714 <TC_init+0x80>)
  4016d8:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4016da:	b263      	sxtb	r3, r4
  4016dc:	095b      	lsrs	r3, r3, #5
  4016de:	f004 041f 	and.w	r4, r4, #31
  4016e2:	2201      	movs	r2, #1
  4016e4:	fa02 f404 	lsl.w	r4, r2, r4
  4016e8:	4a0b      	ldr	r2, [pc, #44]	; (401718 <TC_init+0x84>)
  4016ea:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

	/* Configura e ativa interrup?c?o no TC canal 0 */
	/* Interrup??o no C */
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4016ee:	2210      	movs	r2, #16
  4016f0:	4639      	mov	r1, r7
  4016f2:	4630      	mov	r0, r6
  4016f4:	4b09      	ldr	r3, [pc, #36]	; (40171c <TC_init+0x88>)
  4016f6:	4798      	blx	r3

	/* Inicializa o canal 0 do TC */
	tc_start(TC, TC_CHANNEL);
  4016f8:	4639      	mov	r1, r7
  4016fa:	4630      	mov	r0, r6
  4016fc:	4b08      	ldr	r3, [pc, #32]	; (401720 <TC_init+0x8c>)
  4016fe:	4798      	blx	r3
}
  401700:	b005      	add	sp, #20
  401702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401706:	bf00      	nop
  401708:	00400efd 	.word	0x00400efd
  40170c:	11e1a300 	.word	0x11e1a300
  401710:	004002f7 	.word	0x004002f7
  401714:	00400319 	.word	0x00400319
  401718:	e000e100 	.word	0xe000e100
  40171c:	00400321 	.word	0x00400321
  401720:	00400311 	.word	0x00400311
  401724:	00400331 	.word	0x00400331

00401728 <main>:




int main (void)
{
  401728:	b580      	push	{r7, lr}
	io_init();
  40172a:	4b4b      	ldr	r3, [pc, #300]	; (401858 <main+0x130>)
  40172c:	4798      	blx	r3
	delay_init();

	gfx_mono_ssd1306_init();
  40172e:	4b4b      	ldr	r3, [pc, #300]	; (40185c <main+0x134>)
  401730:	4798      	blx	r3
	//char hnum[5];
	//itoa(freq, hnum, 10);
	//gfx_mono_draw_string(hnum, 0,16, &sysfont);
	//gfx_mono_draw_string("Hz", 60,16, &sysfont);
	
	gfx_mono_draw_string(":",50,16, &sysfont);
  401732:	4e4b      	ldr	r6, [pc, #300]	; (401860 <main+0x138>)
  401734:	4d4b      	ldr	r5, [pc, #300]	; (401864 <main+0x13c>)
  401736:	4633      	mov	r3, r6
  401738:	2210      	movs	r2, #16
  40173a:	2132      	movs	r1, #50	; 0x32
  40173c:	4628      	mov	r0, r5
  40173e:	4c4a      	ldr	r4, [pc, #296]	; (401868 <main+0x140>)
  401740:	47a0      	blx	r4
	gfx_mono_draw_string(":",20,16, &sysfont);
  401742:	4633      	mov	r3, r6
  401744:	2210      	movs	r2, #16
  401746:	2114      	movs	r1, #20
  401748:	4628      	mov	r0, r5
  40174a:	47a0      	blx	r4
	
	// Inicializa clock
	sysclk_init();
  40174c:	4b47      	ldr	r3, [pc, #284]	; (40186c <main+0x144>)
  40174e:	4798      	blx	r3
	// Desativa watchdog
	WDT->WDT_MR = WDT_MR_WDDIS;
  401750:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401754:	4b46      	ldr	r3, [pc, #280]	; (401870 <main+0x148>)
  401756:	605a      	str	r2, [r3, #4]

	// configura botao com interrupcao
	pio_set(LED_PIO, LED_IDX_MASK);
  401758:	f44f 7180 	mov.w	r1, #256	; 0x100
  40175c:	4845      	ldr	r0, [pc, #276]	; (401874 <main+0x14c>)
  40175e:	4b46      	ldr	r3, [pc, #280]	; (401878 <main+0x150>)
  401760:	4798      	blx	r3
	TC_init(TC0, ID_TC1, 1, 1);
  401762:	2301      	movs	r3, #1
  401764:	461a      	mov	r2, r3
  401766:	2118      	movs	r1, #24
  401768:	4844      	ldr	r0, [pc, #272]	; (40187c <main+0x154>)
  40176a:	4c45      	ldr	r4, [pc, #276]	; (401880 <main+0x158>)
  40176c:	47a0      	blx	r4

	/* Insert application code here, after the board has been initialized. */
	while(1) {
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  40176e:	4f45      	ldr	r7, [pc, #276]	; (401884 <main+0x15c>)
		display_freq(freq, minu,hora);
  401770:	4d45      	ldr	r5, [pc, #276]	; (401888 <main+0x160>)
  401772:	4c46      	ldr	r4, [pc, #280]	; (40188c <main+0x164>)
  401774:	e048      	b.n	401808 <main+0xe0>
		if(freq == 60){
			freq = 0;
  401776:	2300      	movs	r3, #0
  401778:	6033      	str	r3, [r6, #0]
			minu += 1;
  40177a:	6823      	ldr	r3, [r4, #0]
  40177c:	3301      	adds	r3, #1
  40177e:	6023      	str	r3, [r4, #0]
			gfx_mono_draw_string("      ",60,16, &sysfont);
  401780:	4b37      	ldr	r3, [pc, #220]	; (401860 <main+0x138>)
  401782:	2210      	movs	r2, #16
  401784:	213c      	movs	r1, #60	; 0x3c
  401786:	4842      	ldr	r0, [pc, #264]	; (401890 <main+0x168>)
  401788:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 401868 <main+0x140>
  40178c:	47c0      	blx	r8
			display_freq(freq, minu,hora);
  40178e:	682a      	ldr	r2, [r5, #0]
  401790:	6821      	ldr	r1, [r4, #0]
  401792:	6830      	ldr	r0, [r6, #0]
  401794:	4b3f      	ldr	r3, [pc, #252]	; (401894 <main+0x16c>)
  401796:	4798      	blx	r3
  401798:	e041      	b.n	40181e <main+0xf6>
		}
		if(minu == 60){
			minu = 0;
  40179a:	2300      	movs	r3, #0
  40179c:	6023      	str	r3, [r4, #0]
			hora += 1;
  40179e:	682b      	ldr	r3, [r5, #0]
  4017a0:	3301      	adds	r3, #1
  4017a2:	602b      	str	r3, [r5, #0]
			gfx_mono_draw_string("      ",15,16, &sysfont);
  4017a4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401860 <main+0x138>
  4017a8:	4643      	mov	r3, r8
  4017aa:	2210      	movs	r2, #16
  4017ac:	210f      	movs	r1, #15
  4017ae:	4838      	ldr	r0, [pc, #224]	; (401890 <main+0x168>)
  4017b0:	4e2d      	ldr	r6, [pc, #180]	; (401868 <main+0x140>)
  4017b2:	47b0      	blx	r6
			gfx_mono_draw_string(":",50,16, &sysfont);
  4017b4:	4643      	mov	r3, r8
  4017b6:	2210      	movs	r2, #16
  4017b8:	2132      	movs	r1, #50	; 0x32
  4017ba:	482a      	ldr	r0, [pc, #168]	; (401864 <main+0x13c>)
  4017bc:	47b0      	blx	r6
			display_freq(freq, minu,hora);
  4017be:	682a      	ldr	r2, [r5, #0]
  4017c0:	6821      	ldr	r1, [r4, #0]
  4017c2:	4b35      	ldr	r3, [pc, #212]	; (401898 <main+0x170>)
  4017c4:	6818      	ldr	r0, [r3, #0]
  4017c6:	4b33      	ldr	r3, [pc, #204]	; (401894 <main+0x16c>)
  4017c8:	4798      	blx	r3
  4017ca:	e02b      	b.n	401824 <main+0xfc>
		}
		
		if(hora == 24){
			hora = 0;
  4017cc:	2100      	movs	r1, #0
  4017ce:	6029      	str	r1, [r5, #0]
			gfx_mono_draw_string("  ",0,16, &sysfont);
  4017d0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401860 <main+0x138>
  4017d4:	4643      	mov	r3, r8
  4017d6:	2210      	movs	r2, #16
  4017d8:	4830      	ldr	r0, [pc, #192]	; (40189c <main+0x174>)
  4017da:	4e23      	ldr	r6, [pc, #140]	; (401868 <main+0x140>)
  4017dc:	47b0      	blx	r6
			gfx_mono_draw_string(":",20,16, &sysfont);
  4017de:	4643      	mov	r3, r8
  4017e0:	2210      	movs	r2, #16
  4017e2:	2114      	movs	r1, #20
  4017e4:	481f      	ldr	r0, [pc, #124]	; (401864 <main+0x13c>)
  4017e6:	47b0      	blx	r6
			display_freq(freq, minu,hora);
  4017e8:	682a      	ldr	r2, [r5, #0]
  4017ea:	6821      	ldr	r1, [r4, #0]
  4017ec:	4b2a      	ldr	r3, [pc, #168]	; (401898 <main+0x170>)
  4017ee:	6818      	ldr	r0, [r3, #0]
  4017f0:	4b28      	ldr	r3, [pc, #160]	; (401894 <main+0x16c>)
  4017f2:	4798      	blx	r3
  4017f4:	e019      	b.n	40182a <main+0x102>
		if(but_stop){
			minu += 1;
			but_stop = false;
			
		}
		else if(but_p_freq){
  4017f6:	4b2a      	ldr	r3, [pc, #168]	; (4018a0 <main+0x178>)
  4017f8:	781b      	ldrb	r3, [r3, #0]
  4017fa:	b30b      	cbz	r3, 401840 <main+0x118>
			hora += 1;
  4017fc:	682b      	ldr	r3, [r5, #0]
  4017fe:	3301      	adds	r3, #1
  401800:	602b      	str	r3, [r5, #0]
			but_p_freq=false;
  401802:	2200      	movs	r2, #0
  401804:	4b26      	ldr	r3, [pc, #152]	; (4018a0 <main+0x178>)
  401806:	701a      	strb	r2, [r3, #0]
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401808:	2002      	movs	r0, #2
  40180a:	47b8      	blx	r7
		display_freq(freq, minu,hora);
  40180c:	4e22      	ldr	r6, [pc, #136]	; (401898 <main+0x170>)
  40180e:	682a      	ldr	r2, [r5, #0]
  401810:	6821      	ldr	r1, [r4, #0]
  401812:	6830      	ldr	r0, [r6, #0]
  401814:	4b1f      	ldr	r3, [pc, #124]	; (401894 <main+0x16c>)
  401816:	4798      	blx	r3
		if(freq == 60){
  401818:	6833      	ldr	r3, [r6, #0]
  40181a:	2b3c      	cmp	r3, #60	; 0x3c
  40181c:	d0ab      	beq.n	401776 <main+0x4e>
		if(minu == 60){
  40181e:	6823      	ldr	r3, [r4, #0]
  401820:	2b3c      	cmp	r3, #60	; 0x3c
  401822:	d0ba      	beq.n	40179a <main+0x72>
		if(hora == 24){
  401824:	682b      	ldr	r3, [r5, #0]
  401826:	2b18      	cmp	r3, #24
  401828:	d0d0      	beq.n	4017cc <main+0xa4>
		if(but_stop){
  40182a:	4b1e      	ldr	r3, [pc, #120]	; (4018a4 <main+0x17c>)
  40182c:	781b      	ldrb	r3, [r3, #0]
  40182e:	2b00      	cmp	r3, #0
  401830:	d0e1      	beq.n	4017f6 <main+0xce>
			minu += 1;
  401832:	6823      	ldr	r3, [r4, #0]
  401834:	3301      	adds	r3, #1
  401836:	6023      	str	r3, [r4, #0]
			but_stop = false;
  401838:	2200      	movs	r2, #0
  40183a:	4b1a      	ldr	r3, [pc, #104]	; (4018a4 <main+0x17c>)
  40183c:	701a      	strb	r2, [r3, #0]
  40183e:	e7e3      	b.n	401808 <main+0xe0>
		}
		else if(but_m_freq){
  401840:	4b19      	ldr	r3, [pc, #100]	; (4018a8 <main+0x180>)
  401842:	781b      	ldrb	r3, [r3, #0]
  401844:	2b00      	cmp	r3, #0
  401846:	d0df      	beq.n	401808 <main+0xe0>
			freq += 1;
  401848:	4a13      	ldr	r2, [pc, #76]	; (401898 <main+0x170>)
  40184a:	6813      	ldr	r3, [r2, #0]
  40184c:	3301      	adds	r3, #1
  40184e:	6013      	str	r3, [r2, #0]
			but_m_freq=false;
  401850:	2200      	movs	r2, #0
  401852:	4b15      	ldr	r3, [pc, #84]	; (4018a8 <main+0x180>)
  401854:	701a      	strb	r2, [r3, #0]
  401856:	e7d7      	b.n	401808 <main+0xe0>
  401858:	004014d5 	.word	0x004014d5
  40185c:	00400619 	.word	0x00400619
  401860:	2040000c 	.word	0x2040000c
  401864:	00402518 	.word	0x00402518
  401868:	00400581 	.word	0x00400581
  40186c:	00400939 	.word	0x00400939
  401870:	400e1850 	.word	0x400e1850
  401874:	400e1200 	.word	0x400e1200
  401878:	00400af3 	.word	0x00400af3
  40187c:	4000c000 	.word	0x4000c000
  401880:	00401695 	.word	0x00401695
  401884:	00400fa1 	.word	0x00400fa1
  401888:	204006ec 	.word	0x204006ec
  40188c:	204006f0 	.word	0x204006f0
  401890:	0040251c 	.word	0x0040251c
  401894:	00401639 	.word	0x00401639
  401898:	204006e8 	.word	0x204006e8
  40189c:	00402520 	.word	0x00402520
  4018a0:	204006f6 	.word	0x204006f6
  4018a4:	204006f5 	.word	0x204006f5
  4018a8:	204006f7 	.word	0x204006f7

004018ac <__libc_init_array>:
  4018ac:	b570      	push	{r4, r5, r6, lr}
  4018ae:	4e0f      	ldr	r6, [pc, #60]	; (4018ec <__libc_init_array+0x40>)
  4018b0:	4d0f      	ldr	r5, [pc, #60]	; (4018f0 <__libc_init_array+0x44>)
  4018b2:	1b76      	subs	r6, r6, r5
  4018b4:	10b6      	asrs	r6, r6, #2
  4018b6:	bf18      	it	ne
  4018b8:	2400      	movne	r4, #0
  4018ba:	d005      	beq.n	4018c8 <__libc_init_array+0x1c>
  4018bc:	3401      	adds	r4, #1
  4018be:	f855 3b04 	ldr.w	r3, [r5], #4
  4018c2:	4798      	blx	r3
  4018c4:	42a6      	cmp	r6, r4
  4018c6:	d1f9      	bne.n	4018bc <__libc_init_array+0x10>
  4018c8:	4e0a      	ldr	r6, [pc, #40]	; (4018f4 <__libc_init_array+0x48>)
  4018ca:	4d0b      	ldr	r5, [pc, #44]	; (4018f8 <__libc_init_array+0x4c>)
  4018cc:	1b76      	subs	r6, r6, r5
  4018ce:	f000 fe3f 	bl	402550 <_init>
  4018d2:	10b6      	asrs	r6, r6, #2
  4018d4:	bf18      	it	ne
  4018d6:	2400      	movne	r4, #0
  4018d8:	d006      	beq.n	4018e8 <__libc_init_array+0x3c>
  4018da:	3401      	adds	r4, #1
  4018dc:	f855 3b04 	ldr.w	r3, [r5], #4
  4018e0:	4798      	blx	r3
  4018e2:	42a6      	cmp	r6, r4
  4018e4:	d1f9      	bne.n	4018da <__libc_init_array+0x2e>
  4018e6:	bd70      	pop	{r4, r5, r6, pc}
  4018e8:	bd70      	pop	{r4, r5, r6, pc}
  4018ea:	bf00      	nop
  4018ec:	0040255c 	.word	0x0040255c
  4018f0:	0040255c 	.word	0x0040255c
  4018f4:	00402564 	.word	0x00402564
  4018f8:	0040255c 	.word	0x0040255c

004018fc <__itoa>:
  4018fc:	1e93      	subs	r3, r2, #2
  4018fe:	2b22      	cmp	r3, #34	; 0x22
  401900:	d810      	bhi.n	401924 <__itoa+0x28>
  401902:	2a0a      	cmp	r2, #10
  401904:	b510      	push	{r4, lr}
  401906:	d006      	beq.n	401916 <__itoa+0x1a>
  401908:	2300      	movs	r3, #0
  40190a:	460c      	mov	r4, r1
  40190c:	4419      	add	r1, r3
  40190e:	f000 f80f 	bl	401930 <__utoa>
  401912:	4620      	mov	r0, r4
  401914:	bd10      	pop	{r4, pc}
  401916:	2800      	cmp	r0, #0
  401918:	daf6      	bge.n	401908 <__itoa+0xc>
  40191a:	232d      	movs	r3, #45	; 0x2d
  40191c:	700b      	strb	r3, [r1, #0]
  40191e:	4240      	negs	r0, r0
  401920:	2301      	movs	r3, #1
  401922:	e7f2      	b.n	40190a <__itoa+0xe>
  401924:	2000      	movs	r0, #0
  401926:	7008      	strb	r0, [r1, #0]
  401928:	4770      	bx	lr
  40192a:	bf00      	nop

0040192c <itoa>:
  40192c:	f7ff bfe6 	b.w	4018fc <__itoa>

00401930 <__utoa>:
  401930:	b5f0      	push	{r4, r5, r6, r7, lr}
  401932:	f8df e078 	ldr.w	lr, [pc, #120]	; 4019ac <__utoa+0x7c>
  401936:	4616      	mov	r6, r2
  401938:	4604      	mov	r4, r0
  40193a:	460f      	mov	r7, r1
  40193c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  401940:	b08b      	sub	sp, #44	; 0x2c
  401942:	466d      	mov	r5, sp
  401944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401946:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40194a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40194c:	e89e 0003 	ldmia.w	lr, {r0, r1}
  401950:	1eb3      	subs	r3, r6, #2
  401952:	f845 0b04 	str.w	r0, [r5], #4
  401956:	2b22      	cmp	r3, #34	; 0x22
  401958:	7029      	strb	r1, [r5, #0]
  40195a:	d822      	bhi.n	4019a2 <__utoa+0x72>
  40195c:	1e7d      	subs	r5, r7, #1
  40195e:	4628      	mov	r0, r5
  401960:	2200      	movs	r2, #0
  401962:	e000      	b.n	401966 <__utoa+0x36>
  401964:	461a      	mov	r2, r3
  401966:	fbb4 f1f6 	udiv	r1, r4, r6
  40196a:	ab0a      	add	r3, sp, #40	; 0x28
  40196c:	fb06 4411 	mls	r4, r6, r1, r4
  401970:	4423      	add	r3, r4
  401972:	460c      	mov	r4, r1
  401974:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  401978:	f800 3f01 	strb.w	r3, [r0, #1]!
  40197c:	1c53      	adds	r3, r2, #1
  40197e:	2900      	cmp	r1, #0
  401980:	d1f0      	bne.n	401964 <__utoa+0x34>
  401982:	54f9      	strb	r1, [r7, r3]
  401984:	18bb      	adds	r3, r7, r2
  401986:	b14a      	cbz	r2, 40199c <__utoa+0x6c>
  401988:	7819      	ldrb	r1, [r3, #0]
  40198a:	7868      	ldrb	r0, [r5, #1]
  40198c:	f805 1f01 	strb.w	r1, [r5, #1]!
  401990:	3401      	adds	r4, #1
  401992:	1b11      	subs	r1, r2, r4
  401994:	428c      	cmp	r4, r1
  401996:	f803 0901 	strb.w	r0, [r3], #-1
  40199a:	dbf5      	blt.n	401988 <__utoa+0x58>
  40199c:	4638      	mov	r0, r7
  40199e:	b00b      	add	sp, #44	; 0x2c
  4019a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4019a2:	2000      	movs	r0, #0
  4019a4:	7038      	strb	r0, [r7, #0]
  4019a6:	b00b      	add	sp, #44	; 0x2c
  4019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4019aa:	bf00      	nop
  4019ac:	00402528 	.word	0x00402528

004019b0 <register_fini>:
  4019b0:	4b02      	ldr	r3, [pc, #8]	; (4019bc <register_fini+0xc>)
  4019b2:	b113      	cbz	r3, 4019ba <register_fini+0xa>
  4019b4:	4802      	ldr	r0, [pc, #8]	; (4019c0 <register_fini+0x10>)
  4019b6:	f000 b805 	b.w	4019c4 <atexit>
  4019ba:	4770      	bx	lr
  4019bc:	00000000 	.word	0x00000000
  4019c0:	004019d1 	.word	0x004019d1

004019c4 <atexit>:
  4019c4:	2300      	movs	r3, #0
  4019c6:	4601      	mov	r1, r0
  4019c8:	461a      	mov	r2, r3
  4019ca:	4618      	mov	r0, r3
  4019cc:	f000 b81e 	b.w	401a0c <__register_exitproc>

004019d0 <__libc_fini_array>:
  4019d0:	b538      	push	{r3, r4, r5, lr}
  4019d2:	4c0a      	ldr	r4, [pc, #40]	; (4019fc <__libc_fini_array+0x2c>)
  4019d4:	4d0a      	ldr	r5, [pc, #40]	; (401a00 <__libc_fini_array+0x30>)
  4019d6:	1b64      	subs	r4, r4, r5
  4019d8:	10a4      	asrs	r4, r4, #2
  4019da:	d00a      	beq.n	4019f2 <__libc_fini_array+0x22>
  4019dc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4019e0:	3b01      	subs	r3, #1
  4019e2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4019e6:	3c01      	subs	r4, #1
  4019e8:	f855 3904 	ldr.w	r3, [r5], #-4
  4019ec:	4798      	blx	r3
  4019ee:	2c00      	cmp	r4, #0
  4019f0:	d1f9      	bne.n	4019e6 <__libc_fini_array+0x16>
  4019f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4019f6:	f000 bdb5 	b.w	402564 <_fini>
  4019fa:	bf00      	nop
  4019fc:	00402574 	.word	0x00402574
  401a00:	00402570 	.word	0x00402570

00401a04 <__retarget_lock_acquire_recursive>:
  401a04:	4770      	bx	lr
  401a06:	bf00      	nop

00401a08 <__retarget_lock_release_recursive>:
  401a08:	4770      	bx	lr
  401a0a:	bf00      	nop

00401a0c <__register_exitproc>:
  401a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a10:	4d2c      	ldr	r5, [pc, #176]	; (401ac4 <__register_exitproc+0xb8>)
  401a12:	4606      	mov	r6, r0
  401a14:	6828      	ldr	r0, [r5, #0]
  401a16:	4698      	mov	r8, r3
  401a18:	460f      	mov	r7, r1
  401a1a:	4691      	mov	r9, r2
  401a1c:	f7ff fff2 	bl	401a04 <__retarget_lock_acquire_recursive>
  401a20:	4b29      	ldr	r3, [pc, #164]	; (401ac8 <__register_exitproc+0xbc>)
  401a22:	681c      	ldr	r4, [r3, #0]
  401a24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401a28:	2b00      	cmp	r3, #0
  401a2a:	d03e      	beq.n	401aaa <__register_exitproc+0x9e>
  401a2c:	685a      	ldr	r2, [r3, #4]
  401a2e:	2a1f      	cmp	r2, #31
  401a30:	dc1c      	bgt.n	401a6c <__register_exitproc+0x60>
  401a32:	f102 0e01 	add.w	lr, r2, #1
  401a36:	b176      	cbz	r6, 401a56 <__register_exitproc+0x4a>
  401a38:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401a3c:	2401      	movs	r4, #1
  401a3e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401a42:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401a46:	4094      	lsls	r4, r2
  401a48:	4320      	orrs	r0, r4
  401a4a:	2e02      	cmp	r6, #2
  401a4c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401a50:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401a54:	d023      	beq.n	401a9e <__register_exitproc+0x92>
  401a56:	3202      	adds	r2, #2
  401a58:	f8c3 e004 	str.w	lr, [r3, #4]
  401a5c:	6828      	ldr	r0, [r5, #0]
  401a5e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401a62:	f7ff ffd1 	bl	401a08 <__retarget_lock_release_recursive>
  401a66:	2000      	movs	r0, #0
  401a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401a6c:	4b17      	ldr	r3, [pc, #92]	; (401acc <__register_exitproc+0xc0>)
  401a6e:	b30b      	cbz	r3, 401ab4 <__register_exitproc+0xa8>
  401a70:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401a74:	f3af 8000 	nop.w
  401a78:	4603      	mov	r3, r0
  401a7a:	b1d8      	cbz	r0, 401ab4 <__register_exitproc+0xa8>
  401a7c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401a80:	6002      	str	r2, [r0, #0]
  401a82:	2100      	movs	r1, #0
  401a84:	6041      	str	r1, [r0, #4]
  401a86:	460a      	mov	r2, r1
  401a88:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401a8c:	f04f 0e01 	mov.w	lr, #1
  401a90:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401a94:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401a98:	2e00      	cmp	r6, #0
  401a9a:	d0dc      	beq.n	401a56 <__register_exitproc+0x4a>
  401a9c:	e7cc      	b.n	401a38 <__register_exitproc+0x2c>
  401a9e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401aa2:	430c      	orrs	r4, r1
  401aa4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401aa8:	e7d5      	b.n	401a56 <__register_exitproc+0x4a>
  401aaa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401aae:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401ab2:	e7bb      	b.n	401a2c <__register_exitproc+0x20>
  401ab4:	6828      	ldr	r0, [r5, #0]
  401ab6:	f7ff ffa7 	bl	401a08 <__retarget_lock_release_recursive>
  401aba:	f04f 30ff 	mov.w	r0, #4294967295
  401abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ac2:	bf00      	nop
  401ac4:	20400448 	.word	0x20400448
  401ac8:	00402524 	.word	0x00402524
  401acc:	00000000 	.word	0x00000000

00401ad0 <sysfont_glyphs>:
	...
  401af0:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  401b00:	00000030 00000000 00000000 006c006c     0...........l.l.
  401b10:	006c006c 00000000 00000000 00000000     l.l.............
	...
  401b28:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  401b38:	00000028 00000000 00000000 003c0010     (.............<.
  401b48:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  401b60:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  401b70:	00000088 00000000 00000000 00900060     ............`...
  401b80:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  401b98:	00100010 00000010 00000000 00000000     ................
	...
  401bb4:	00100008 00200020 00200020 00200020     .... . . . . . .
  401bc4:	00080010 00000000 00000000 00100020     ............ ...
  401bd4:	00080008 00080008 00080008 00200010     .............. .
  401be4:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  401c0c:	00100010 00fe0010 00100010 00000010     ................
	...
  401c34:	00300010 00000020 00000000 00000000     ..0. ...........
  401c44:	00000000 007c0000 00000000 00000000     ......|.........
	...
  401c68:	00300000 00000030 00000000 00000000     ..0.0...........
  401c78:	00080000 00100008 00200010 00400020     .......... . .@.
  401c88:	00000040 00000000 00000000 00780000     @.............x.
  401c98:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  401cb0:	00100000 00500030 00100010 00100010     ....0.P.........
  401cc0:	0000007c 00000000 00000000 00700000     |.............p.
  401cd0:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  401ce8:	00700000 00080088 00080030 00880008     ..p.....0.......
  401cf8:	00000070 00000000 00000000 00080000     p...............
  401d08:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  401d20:	00780000 00800080 000800f0 00080008     ..x.............
  401d30:	000000f0 00000000 00000000 00300000     ..............0.
  401d40:	00800040 008800f0 00880088 00000070     @...........p...
	...
  401d58:	00f80000 00100008 00200010 00400020     .......... . .@.
  401d68:	00000040 00000000 00000000 00700000     @.............p.
  401d78:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  401d90:	00700000 00880088 00780088 00100008     ..p.......x.....
  401da0:	00000060 00000000 00000000 00000000     `...............
  401db0:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  401dcc:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  401ddc:	00000040 00000000 00000000 00100008     @...............
  401dec:	00400020 00100020 00000008 00000000      .@. ...........
	...
  401e08:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  401e20:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  401e38:	00300000 00080048 00200010 00000000     ..0.H..... .....
  401e48:	00000020 00000000 00000000 00000000      ...............
  401e58:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  401e70:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  401e80:	00000044 00000000 00000000 00f80000     D...............
  401e90:	00840084 008400f8 00840084 000000f8     ................
	...
  401ea8:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  401eb8:	0000003c 00000000 00000000 00f00000     <...............
  401ec8:	00840088 00840084 00880084 000000f0     ................
	...
  401ee0:	00f80000 00800080 008000f0 00800080     ................
  401ef0:	000000f8 00000000 00000000 00f80000     ................
  401f00:	00800080 008000f8 00800080 00000080     ................
	...
  401f18:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  401f28:	00000038 00000000 00000000 00880000     8...............
  401f38:	00880088 008800f8 00880088 00000088     ................
	...
  401f50:	00f80000 00200020 00200020 00200020     .... . . . . . .
  401f60:	000000f8 00000000 00000000 00f80000     ................
  401f70:	00080008 00080008 00080008 000000f0     ................
	...
  401f88:	00840000 00900088 00d000a0 00840088     ................
  401f98:	00000084 00000000 00000000 00800000     ................
  401fa8:	00800080 00800080 00800080 000000fc     ................
	...
  401fc0:	00840000 00cc00cc 00b400b4 00840084     ................
  401fd0:	00000084 00000000 00000000 00840000     ................
  401fe0:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  401ff8:	00780000 00840084 00840084 00840084     ..x.............
  402008:	00000078 00000000 00000000 00f80000     x...............
  402018:	00840084 00f80084 00800080 00000080     ................
	...
  402030:	00780000 00840084 00840084 00840084     ..x.............
  402040:	00200078 00000018 00000000 00f80000     x. .............
  402050:	00840084 00f80084 00840088 00000084     ................
	...
  402068:	007c0000 00800080 00180060 00040004     ..|.....`.......
  402078:	000000f8 00000000 00000000 00f80000     ................
  402088:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  4020a0:	00840000 00840084 00840084 00840084     ................
  4020b0:	00000078 00000000 00000000 00840000     x...............
  4020c0:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  4020d8:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  4020e8:	00000050 00000000 00000000 00880000     P...............
  4020f8:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  402110:	00880000 00880088 00500050 00200020     ........P.P. . .
  402120:	00000020 00000000 00000000 00fc0000      ...............
  402130:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  402148:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  402158:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  402168:	00200020 00100020 00100010 00080008      . . ...........
	...
  402180:	00080038 00080008 00080008 00080008     8...............
  402190:	00080008 00000038 00000000 00280010     ....8.........(.
  4021a0:	00000044 00000000 00000000 00000000     D...............
	...
  4021c8:	00000038 00000000 00000000 00200000     8............. .
  4021d8:	00000010 00000000 00000000 00000000     ................
	...
  4021f4:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  40220c:	00800080 00f80080 00840084 00840084     ................
  40221c:	000000f8 00000000 00000000 00000000     ................
  40222c:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  402244:	00040004 007c0004 00840084 008c0084     ......|.........
  402254:	00000074 00000000 00000000 00000000     t...............
  402264:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  40227c:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  40228c:	000000fc 00000000 00000000 00000000     ................
  40229c:	007c0000 00840084 00840084 0004007c     ..|.........|...
  4022ac:	00000078 00000000 00800080 00b80080     x...............
  4022bc:	008400c4 00840084 00000084 00000000     ................
  4022cc:	00000000 00100000 00700000 00100010     ..........p.....
  4022dc:	00100010 0000007c 00000000 00000000     ....|...........
  4022ec:	00080000 00780000 00080008 00080008     ......x.........
  4022fc:	00080008 00700008 00000000 00800080     ......p.........
  40230c:	00880080 00a00090 008800d0 00000088     ................
	...
  402324:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  402334:	000000f8 00000000 00000000 00000000     ................
  402344:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  402360:	00b80000 008400c4 00840084 00000084     ................
	...
  40237c:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  402398:	00b80000 008400c4 00840084 008000f8     ................
  4023a8:	00000080 00000000 00000000 007c0000     ..............|.
  4023b8:	00840084 00840084 0004007c 00000004     ........|.......
	...
  4023d0:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  4023ec:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  402408:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  402424:	00880000 00880088 00880088 0000007c     ............|...
	...
  402440:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  40245c:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  402478:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  402494:	00840000 00480084 00300048 00200010     ......H.H.0... .
  4024a4:	00000040 00000000 00000000 00f80000     @...............
  4024b4:	00100008 00400020 000000f8 00000000     .... .@.........
  4024c4:	00000000 00200010 00100020 00200020     ...... . ... . .
  4024d4:	00200010 00100020 00000000 00000000     .. . ...........
  4024e4:	00100010 00100010 00000000 00100010     ................
  4024f4:	00100010 00000000 00000000 00100020     ............ ...
  402504:	00200010 00100010 00100020 00200010     .. ..... ..... .
  402514:	00000000 0000003a 20202020 00002020     ....:...      ..

00402524 <_global_impure_ptr>:
  402524:	20400020 33323130 37363534 62613938      .@ 0123456789ab
  402534:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
  402544:	76757473 7a797877 00000000              stuvwxyz....

00402550 <_init>:
  402550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402552:	bf00      	nop
  402554:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402556:	bc08      	pop	{r3}
  402558:	469e      	mov	lr, r3
  40255a:	4770      	bx	lr

0040255c <__init_array_start>:
  40255c:	004019b1 	.word	0x004019b1

00402560 <__frame_dummy_init_array_entry>:
  402560:	00400165                                e.@.

00402564 <_fini>:
  402564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402566:	bf00      	nop
  402568:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40256a:	bc08      	pop	{r3}
  40256c:	469e      	mov	lr, r3
  40256e:	4770      	bx	lr

00402570 <__fini_array_start>:
  402570:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 1ad0 0040 0e0a 7d20               ......@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	06f8 2040                                   ..@ 
